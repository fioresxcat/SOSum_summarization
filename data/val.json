[{"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n It's equivalent to", "output": "It's equivalent to", "answer": "It's equivalent to", "summary": "It's equivalent to"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n <code>console.log</code> has nothing to do with jQuery. It is a common object/method provided by debuggers (including the Chrome debugger and Firebug) that allows a script to log data (or objects in most cases) to the JavaScript console.", "output": "<code>console.log</code> has nothing to do with jQuery. It is a common object/method provided by debuggers (including the Chrome debugger and Firebug) that allows a script to log data (or objects in most cases) to the JavaScript console.", "answer": "<code>console.log</code> has nothing to do with jQuery. It is a common object/method provided by debuggers (including the Chrome debugger and Firebug) that allows a script to log data (or objects in most cases) to the JavaScript console.", "summary": "<code>console.log</code> has nothing to do with jQuery. It is a common object/method provided by debuggers (including the Chrome debugger and Firebug) that allows a script to log data (or objects in most cases) to the JavaScript console."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n urllib2.urlopen accepts an instance of the Request class or a url, whereas urllib.urlopen only accepts a url. A similar discussion took place here:http://www.velocityreviews.com/forums/t326690-urllib-urllib2-what-is-the-difference.html", "output": "urllib2.urlopen accepts an instance of the Request class or a url, whereas urllib.urlopen only accepts a url.", "answer": "urllib2.urlopen accepts an instance of the Request class or a url, whereas urllib.urlopen only accepts a url. A similar discussion took place here:http://www.velocityreviews.com/forums/t326690-urllib-urllib2-what-is-the-difference.html", "summary": "urllib2.urlopen accepts an instance of the Request class or a url, whereas urllib.urlopen only accepts a url."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Using <code>NOT EXISTS</code>: BIGBLOCK Using <code>NOT IN</code>: BIGBLOCK Using <code>LEFT JOIN/IS NULL</code>: BIGBLOCK Of the three options, the <code>LEFT JOIN/IS NULL</code> is less efficient. See this link for more details.", "output": "Using <code>NOT EXISTS</code>: BIGBLOCK Using <code>NOT IN</code>: BIGBLOCK Using <code>LEFT JOIN/IS NULL</code>: BIGBLOCK Of the three options, the <code>LEFT JOIN/IS NULL</code> is less efficient.", "answer": "Using <code>NOT EXISTS</code>: BIGBLOCK Using <code>NOT IN</code>: BIGBLOCK Using <code>LEFT JOIN/IS NULL</code>: BIGBLOCK Of the three options, the <code>LEFT JOIN/IS NULL</code> is less efficient. See this link for more details.", "summary": "Using <code>NOT EXISTS</code>: BIGBLOCK Using <code>NOT IN</code>: BIGBLOCK Using <code>LEFT JOIN/IS NULL</code>: BIGBLOCK Of the three options, the <code>LEFT JOIN/IS NULL</code> is less efficient."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Did you ever do this? Would you like to continue and run the last successful build? If you ticked the box and pressed \"Yes\" you will get the last successful build running even though your project does not compile. This means that whenever you set a breakpoint, you will get that error. Try changing this value: <li>Tools<li>Options<li>Projects and Solutions<li>Build and Run<li>On Run, when build or deployment errors occur: Do not Launch", "output": "Try changing this value: <li>Tools<li>Options<li>Projects and Solutions<li>Build and Run<li>On Run, when build or deployment errors occur: Do not Launch", "answer": "Did you ever do this? Would you like to continue and run the last successful build? If you ticked the box and pressed \"Yes\" you will get the last successful build running even though your project does not compile. This means that whenever you set a breakpoint, you will get that error. Try changing this value: <li>Tools<li>Options<li>Projects and Solutions<li>Build and Run<li>On Run, when build or deployment errors occur: Do not Launch", "summary": "Try changing this value: <li>Tools<li>Options<li>Projects and Solutions<li>Build and Run<li>On Run, when build or deployment errors occur: Do not Launch"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n vi should respect tabs and spaces, however you should consider that vi may be using different length tabs than your other editor. Can you be any more specific than \"whole thing messed up\"?", "output": "vi should respect tabs and spaces, however you should consider that vi may be using different length tabs than your other editor.", "answer": "vi should respect tabs and spaces, however you should consider that vi may be using different length tabs than your other editor. Can you be any more specific than \"whole thing messed up\"?", "summary": "vi should respect tabs and spaces, however you should consider that vi may be using different length tabs than your other editor."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n A \"race condition\" exists when multithreaded (or otherwise parallel) code that would access a shared resource could do so in such a way as to cause unexpected results. Take this example: If you had 5 threads executing this code at once, the value of x WOULD NOT end up being 50,000,000. It would in fact vary with each run. This is because, in order for each thread to increment the value of x, they have to do the following: (simplified, obviously) Any thread can be at any step in this process at any time, and they can step on each other when a shared resource is involved. The state of x can be changed by another thread during the time between x is being read and when it is written back. Let's say a thread retrieves the value of x, but hasn't stored it yet. Another thread can also retrieve the same value of x (because no thread has changed it yet) and then they would both be storing the same value (x+1) back in x! Example: Race conditions can be avoided by employing some sort of locking mechanism before the code that accesses the shared resource: Here, the answer comes out as 50,000,000 every time. For more on locking, search for: mutex, semaphore, critical section, shared resource.", "output": "A \"race condition\" exists when multithreaded (or otherwise parallel) code that would access a shared resource could do so in such a way as to cause unexpected results. Race conditions can be avoided by employing some sort of locking mechanism before the code that accesses the shared resource:", "answer": "A \"race condition\" exists when multithreaded (or otherwise parallel) code that would access a shared resource could do so in such a way as to cause unexpected results. Take this example: If you had 5 threads executing this code at once, the value of x WOULD NOT end up being 50,000,000. It would in fact vary with each run. This is because, in order for each thread to increment the value of x, they have to do the following: (simplified, obviously) Any thread can be at any step in this process at any time, and they can step on each other when a shared resource is involved. The state of x can be changed by another thread during the time between x is being read and when it is written back. Let's say a thread retrieves the value of x, but hasn't stored it yet. Another thread can also retrieve the same value of x (because no thread has changed it yet) and then they would both be storing the same value (x+1) back in x! Example: Race conditions can be avoided by employing some sort of locking mechanism before the code that accesses the shared resource: Here, the answer comes out as 50,000,000 every time. For more on locking, search for: mutex, semaphore, critical section, shared resource.", "summary": "A \"race condition\" exists when multithreaded (or otherwise parallel) code that would access a shared resource could do so in such a way as to cause unexpected results. Race conditions can be avoided by employing some sort of locking mechanism before the code that accesses the shared resource:"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n You use the <code>alter table ... change ...</code> method, for example:", "output": "You use the <code>alter table ... change ...</code> method, for example:", "answer": "You use the <code>alter table ... change ...</code> method, for example:", "summary": "You use the <code>alter table ... change ...</code> method, for example:"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Yes, you can do this in one line (though for robust <code>IOException</code> handling you wouldn't want to). This uses a <code>java.util.Scanner</code>, telling it to delimit the input with <code>\\Z</code>, which is the end of the string anchor. This ultimately makes the input have one actual token, which is the entire file, so it can be read with one call to <code>next()</code>. There is a constructor that takes a <code>File</code> and a <code>String charSetName</code> (among many other overloads). These two constructor may throw <code>FileNotFoundException</code>, but like all <code>Scanner</code> methods, no <code>IOException</code> can be thrown beyond these constructors. You can query the <code>Scanner</code> itself through the <code>ioException()</code> method if an <code>IOException</code> occurred or not. You may also want to explicitly <code>close()</code> the <code>Scanner</code> after you read the content, so perhaps storing the <code>Scanner</code> reference in a local variable is best. See also Java Tutorials - I/O Essentials - Scanning and formatting Related questions Validating input using java.util.Scanner - has many examples of more typical usage Third-party library options For completeness, these are some really good options if you have these very reputable and highly useful third party libraries: Guava <code>com.google.common.io.Files</code> contains many useful methods. The pertinent ones here are: <code>String toString(File, Charset)</code> Using the given character set, reads all characters from a file into a <code>String</code> <code>List&lt;String&gt; readLines(File, Charset)</code> ... reads all of the lines from a file into a <code>List&lt;String&gt;</code>, one entry per line Apache Commons/IO <code>org.apache.commons.io.IOUtils</code> also offer similar functionality: <code>String toString(InputStream, String encoding)</code> Using the specified character encoding, gets the contents of an <code>InputStream</code> as a <code>String</code> <code>List readLines(InputStream, String encoding)</code> ... as a (raw) <code>List</code> of <code>String</code>, one entry per line Related questions Most useful free third party Java libraries (deleted)?", "output": "Yes, you can do this in one line (though for robust <code>IOException</code> handling you wouldn't want to).", "answer": "Yes, you can do this in one line (though for robust <code>IOException</code> handling you wouldn't want to). This uses a <code>java.util.Scanner</code>, telling it to delimit the input with <code>\\Z</code>, which is the end of the string anchor. This ultimately makes the input have one actual token, which is the entire file, so it can be read with one call to <code>next()</code>. There is a constructor that takes a <code>File</code> and a <code>String charSetName</code> (among many other overloads). These two constructor may throw <code>FileNotFoundException</code>, but like all <code>Scanner</code> methods, no <code>IOException</code> can be thrown beyond these constructors. You can query the <code>Scanner</code> itself through the <code>ioException()</code> method if an <code>IOException</code> occurred or not. You may also want to explicitly <code>close()</code> the <code>Scanner</code> after you read the content, so perhaps storing the <code>Scanner</code> reference in a local variable is best. See also Java Tutorials - I/O Essentials - Scanning and formatting Related questions Validating input using java.util.Scanner - has many examples of more typical usage Third-party library options For completeness, these are some really good options if you have these very reputable and highly useful third party libraries: Guava <code>com.google.common.io.Files</code> contains many useful methods. The pertinent ones here are: <code>String toString(File, Charset)</code> Using the given character set, reads all characters from a file into a <code>String</code> <code>List&lt;String&gt; readLines(File, Charset)</code> ... reads all of the lines from a file into a <code>List&lt;String&gt;</code>, one entry per line Apache Commons/IO <code>org.apache.commons.io.IOUtils</code> also offer similar functionality: <code>String toString(InputStream, String encoding)</code> Using the specified character encoding, gets the contents of an <code>InputStream</code> as a <code>String</code> <code>List readLines(InputStream, String encoding)</code> ... as a (raw) <code>List</code> of <code>String</code>, one entry per line Related questions Most useful free third party Java libraries (deleted)?", "summary": "Yes, you can do this in one line (though for robust <code>IOException</code> handling you wouldn't want to)."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n If you want the user to input some logical functions and evaluate for AND the OR then the JavaScript eval function is perfect. I can accept two strings and <code>eval(uate) string1 === string2</code>, etc.", "output": "If you want the user to input some logical functions and evaluate for AND the OR then the JavaScript eval function is perfect.", "answer": "If you want the user to input some logical functions and evaluate for AND the OR then the JavaScript eval function is perfect. I can accept two strings and <code>eval(uate) string1 === string2</code>, etc.", "summary": "If you want the user to input some logical functions and evaluate for AND the OR then the JavaScript eval function is perfect."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n What if I want to obtain a distinct list based on <em>one</em> or <em>more</em> properties? Simple! You want to group them and pick a winner out of the group. If you want to define groups on multiple properties, here's how:", "output": "You want to group them and pick a winner out of the group. If you want to define groups on multiple properties, here's how:", "answer": "What if I want to obtain a distinct list based on <em>one</em> or <em>more</em> properties? Simple! You want to group them and pick a winner out of the group. If you want to define groups on multiple properties, here's how:", "summary": "You want to group them and pick a winner out of the group. If you want to define groups on multiple properties, here's how:"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n What's the memory profile of your machine ? e.g. if you run <code>top</code>, how much free memory do you have ? I suspect <code>UnixProcess</code> performs a <code>fork()</code> and it's simply not getting enough memory from the OS (if memory serves, it'll <code>fork()</code> to duplicate the process and then <code>exec()</code> to run the ls in the new memory process, and it's not getting as far as that) EDIT: Re. your overcommit solution, it permits overcommitting of system memory, possibly allowing processes to allocate (but not use) more memory than is actually available. So I guess that the <code>fork()</code> duplicates the Java process memory as discussed in the comments below. Of course you don't use the memory since the 'ls' replaces the duplicate Java process.", "output": "I suspect <code>UnixProcess</code> performs a <code>fork()</code> and it's simply not getting enough memory from the OS (if memory serves, it'll <code>fork()</code> to duplicate the process and then <code>exec()</code> to run the ls in the new memory process, and it's not getting as far as that)", "answer": "What's the memory profile of your machine ? e.g. if you run <code>top</code>, how much free memory do you have ? I suspect <code>UnixProcess</code> performs a <code>fork()</code> and it's simply not getting enough memory from the OS (if memory serves, it'll <code>fork()</code> to duplicate the process and then <code>exec()</code> to run the ls in the new memory process, and it's not getting as far as that) EDIT: Re. your overcommit solution, it permits overcommitting of system memory, possibly allowing processes to allocate (but not use) more memory than is actually available. So I guess that the <code>fork()</code> duplicates the Java process memory as discussed in the comments below. Of course you don't use the memory since the 'ls' replaces the duplicate Java process.", "summary": "I suspect <code>UnixProcess</code> performs a <code>fork()</code> and it's simply not getting enough memory from the OS (if memory serves, it'll <code>fork()</code> to duplicate the process and then <code>exec()</code> to run the ls in the new memory process, and it's not getting as far as that)"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n You need to register the directory with Oracle. fopen takes the name of a directory object, not the path. For example: (you may need to login as SYS to execute these) Then, you can refer to it in the call to fopen:", "output": "You need to register the directory with Oracle. fopen takes the name of a directory object, not the path.", "answer": "You need to register the directory with Oracle. fopen takes the name of a directory object, not the path. For example: (you may need to login as SYS to execute these) Then, you can refer to it in the call to fopen:", "summary": "You need to register the directory with Oracle. fopen takes the name of a directory object, not the path."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n I got this error too. Solved by installing development packages. I'm using arch and it was: which installed: but I think it actually needed make and gcc. Error output said (on my machine, among other): \"You have to install development tools first.\" So it was an obvious decision and it helped.", "output": "Solved by installing development packages. I'm using arch and it was:", "answer": "I got this error too. Solved by installing development packages. I'm using arch and it was: which installed: but I think it actually needed make and gcc. Error output said (on my machine, among other): \"You have to install development tools first.\" So it was an obvious decision and it helped.", "summary": "Solved by installing development packages. I'm using arch and it was:"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n As others have observed, you must either create a nullable column or provide a DEFAULT value. If that isn't flexible enough (e.g. if you need the new value to be computed for each row individually somehow), you can use the fact that in PostgreSQL, all DDL commands can be executed inside a transaction: BIGBLOCK", "output": "As others have observed, you must either create a nullable column or provide a DEFAULT value.", "answer": "As others have observed, you must either create a nullable column or provide a DEFAULT value. If that isn't flexible enough (e.g. if you need the new value to be computed for each row individually somehow), you can use the fact that in PostgreSQL, all DDL commands can be executed inside a transaction: BIGBLOCK", "summary": "As others have observed, you must either create a nullable column or provide a DEFAULT value."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n There's a term for it to make it sound special. The reality is nowhere near so mysterious. Basically, a \"Bean\": is a serializable object (that is, it implements <code>java.io.Serializable</code>, and does so correctly), that has \"properties\" whose getters and setters are just methods with certain names (like, say, <code>getFoo()</code> is the getter for the \"Foo\" property), and has a public default constructor (so it can be created at will and configured by setting its properties). Update: As for <code>Serializable</code>:  That is nothing but a \"marker interface\" (an interface that doesn't declare any functions) that tells Java that the implementing class consents to (and implies that it is capable of) \"serialization\" -- a process that converts an instance into a stream of bytes. Those bytes can be stored in files, sent over a network connection, etc, and have enough info to allow a JVM (at least, one that knows about the object's type) to reconstruct the object later -- possibly in a different instance of the application, or even on a whole other machine! Of course, in order to do that, the class has to abide by certain limitations. Chief among them is that all instance fields must be either primitive types (int, bool, etc), instances of some class that is also serializable, or marked as <code>transient</code> so that Java won't try to include them. (This of course means that <code>transient</code> fields will not survive the trip over a stream. A class that has <code>transient</code> fields should be prepared to reinitialize them if necessary.) A class that can not abide by those limitations should not implement <code>Serializable</code> (and, IIRC, the Java compiler won't even let it do so.)", "output": "There's a term for it to make it sound special. Basically, a \"Bean\": is a serializable object (that is, it implements <code>java.io.Serializable</code>, and does so correctly), that has \"properties\" whose getters and setters are just methods with certain names (like, say, <code>getFoo()</code> is the getter for the \"Foo\" property), and has a public default constructor (so it can be created at will and configured by setting its properties).", "answer": "There's a term for it to make it sound special. The reality is nowhere near so mysterious. Basically, a \"Bean\": is a serializable object (that is, it implements <code>java.io.Serializable</code>, and does so correctly), that has \"properties\" whose getters and setters are just methods with certain names (like, say, <code>getFoo()</code> is the getter for the \"Foo\" property), and has a public default constructor (so it can be created at will and configured by setting its properties). Update: As for <code>Serializable</code>:  That is nothing but a \"marker interface\" (an interface that doesn't declare any functions) that tells Java that the implementing class consents to (and implies that it is capable of) \"serialization\" -- a process that converts an instance into a stream of bytes. Those bytes can be stored in files, sent over a network connection, etc, and have enough info to allow a JVM (at least, one that knows about the object's type) to reconstruct the object later -- possibly in a different instance of the application, or even on a whole other machine! Of course, in order to do that, the class has to abide by certain limitations. Chief among them is that all instance fields must be either primitive types (int, bool, etc), instances of some class that is also serializable, or marked as <code>transient</code> so that Java won't try to include them. (This of course means that <code>transient</code> fields will not survive the trip over a stream. A class that has <code>transient</code> fields should be prepared to reinitialize them if necessary.) A class that can not abide by those limitations should not implement <code>Serializable</code> (and, IIRC, the Java compiler won't even let it do so.)", "summary": "There's a term for it to make it sound special. Basically, a \"Bean\": is a serializable object (that is, it implements <code>java.io.Serializable</code>, and does so correctly), that has \"properties\" whose getters and setters are just methods with certain names (like, say, <code>getFoo()</code> is the getter for the \"Foo\" property), and has a public default constructor (so it can be created at will and configured by setting its properties)."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Are you using a shared hosting provider? It could be master settings overriding anything you're trying to change. Have you tried adding those into your .htaccess? BIGBLOCK", "output": "It could be master settings overriding anything you're trying to change. Have you tried adding those into your .htaccess? BIGBLOCK", "answer": "Are you using a shared hosting provider? It could be master settings overriding anything you're trying to change. Have you tried adding those into your .htaccess? BIGBLOCK", "summary": "It could be master settings overriding anything you're trying to change. Have you tried adding those into your .htaccess? BIGBLOCK"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n You can use tidy application/utility to indent HTML &amp; XML files and it works pretty well in indenting those files. Prettify an XML file BIGBLOCK Prettify an HTML file BIGBLOCK", "output": "Prettify an XML file BIGBLOCK Prettify an HTML file BIGBLOCK", "answer": "You can use tidy application/utility to indent HTML &amp; XML files and it works pretty well in indenting those files. Prettify an XML file BIGBLOCK Prettify an HTML file BIGBLOCK", "summary": "Prettify an XML file BIGBLOCK Prettify an HTML file BIGBLOCK"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n In general, a developer should never throw a NullPointerException. This exception is thrown by the runtime when code attempts to dereference a variable who's value is null. Therefore, if your method wants to explicitly disallow null, as opposed to just happening to have a null value raise a NullPointerException, you should throw an IllegalArgumentException.", "output": "Therefore, if your method wants to explicitly disallow null, as opposed to just happening to have a null value raise a NullPointerException, you should throw an IllegalArgumentException.", "answer": "In general, a developer should never throw a NullPointerException. This exception is thrown by the runtime when code attempts to dereference a variable who's value is null. Therefore, if your method wants to explicitly disallow null, as opposed to just happening to have a null value raise a NullPointerException, you should throw an IllegalArgumentException.", "summary": "Therefore, if your method wants to explicitly disallow null, as opposed to just happening to have a null value raise a NullPointerException, you should throw an IllegalArgumentException."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n A web server runs the HTTP protocol to serve web pages. An application server can (but doesn't always) run on a web server to execute program logic, the results of which can then be delivered by the web server. That's one example of a web server/application server scenario. A good example in the Microsoft world is the Internet Information Server / SharePoint Server relationship. IIS is a web server; SharePoint is an application server. SharePoint sits \"on top\" of IIS, executes specific logic, and serves the results via IIS. In the Java world, there's a similar scenario with Apache and Tomcat, for example.", "output": "A web server runs the HTTP protocol to serve web pages. An application server can (but doesn't always) run on a web server to execute program logic, the results of which can then be delivered by the web server. IIS is a web server; SharePoint is an application server.", "answer": "A web server runs the HTTP protocol to serve web pages. An application server can (but doesn't always) run on a web server to execute program logic, the results of which can then be delivered by the web server. That's one example of a web server/application server scenario. A good example in the Microsoft world is the Internet Information Server / SharePoint Server relationship. IIS is a web server; SharePoint is an application server. SharePoint sits \"on top\" of IIS, executes specific logic, and serves the results via IIS. In the Java world, there's a similar scenario with Apache and Tomcat, for example.", "summary": "A web server runs the HTTP protocol to serve web pages. An application server can (but doesn't always) run on a web server to execute program logic, the results of which can then be delivered by the web server. IIS is a web server; SharePoint is an application server."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n You can use <code>Bit</code> DataType in SQL Server to store boolean data.", "output": "You can use <code>Bit</code> DataType in SQL Server to store boolean data.", "answer": "You can use <code>Bit</code> DataType in SQL Server to store boolean data.", "summary": "You can use <code>Bit</code> DataType in SQL Server to store boolean data."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Two approaches leap to mind. First, don't use <code>scanf</code>. Use <code>fgets()</code> which takes a parameter to specify the buffer size, and which leaves any newline characters intact. A simple loop over the file that prints the buffer content should naturally copy the file intact. Second, use <code>fread()</code> or the common C idiom with <code>fgetc()</code>. These would process the file in fixed-size chunks or a single character at a time. If you must process the file over white-space delimited strings, then use either <code>fgets</code> or <code>fread</code> to read the file, and something like <code>strtok</code> to split the buffer at whitespace. Don't forget to handle the transition from one buffer to the next, since your target strings are likely to span the buffer boundary. If there is an external requirement to use <code>scanf</code> to do the reading, then limit the length of the string it might read with a precision field in the format specifier. In your case with a 999 byte buffer, then say <code>scanf(\"%998s\", str);</code> which will write at most 998 characters to the buffer leaving room for the nul terminator. If single strings longer than your buffer are allowed, then you would have to process them in two pieces. If not, you have an opportunity to tell the user about an error politely without creating a buffer overflow security hole. Regardless, always validate the return values and think about how to handle bad, malicious, or just malformed input.", "output": "First, don't use <code>scanf</code>. Second, use <code>fread()</code> or the common C idiom with <code>fgetc()</code>.", "answer": "Two approaches leap to mind. First, don't use <code>scanf</code>. Use <code>fgets()</code> which takes a parameter to specify the buffer size, and which leaves any newline characters intact. A simple loop over the file that prints the buffer content should naturally copy the file intact. Second, use <code>fread()</code> or the common C idiom with <code>fgetc()</code>. These would process the file in fixed-size chunks or a single character at a time. If you must process the file over white-space delimited strings, then use either <code>fgets</code> or <code>fread</code> to read the file, and something like <code>strtok</code> to split the buffer at whitespace. Don't forget to handle the transition from one buffer to the next, since your target strings are likely to span the buffer boundary. If there is an external requirement to use <code>scanf</code> to do the reading, then limit the length of the string it might read with a precision field in the format specifier. In your case with a 999 byte buffer, then say <code>scanf(\"%998s\", str);</code> which will write at most 998 characters to the buffer leaving room for the nul terminator. If single strings longer than your buffer are allowed, then you would have to process them in two pieces. If not, you have an opportunity to tell the user about an error politely without creating a buffer overflow security hole. Regardless, always validate the return values and think about how to handle bad, malicious, or just malformed input.", "summary": "First, don't use <code>scanf</code>. Second, use <code>fread()</code> or the common C idiom with <code>fgetc()</code>."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n This generally means that the owning Hibernate session has already closed. You can do one of the following to fix it: whichever object creating this problem, use <code>HibernateTemplate.initialize(object name)</code> Use <code>lazy=false</code> in your hbm files.", "output": "This generally means that the owning Hibernate session has already closed. You can do one of the following to fix it:", "answer": "This generally means that the owning Hibernate session has already closed. You can do one of the following to fix it: whichever object creating this problem, use <code>HibernateTemplate.initialize(object name)</code> Use <code>lazy=false</code> in your hbm files.", "summary": "This generally means that the owning Hibernate session has already closed. You can do one of the following to fix it:"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n You never need to set objects to null in C#. The compiler and runtime will take care of figuring out when they are no longer in scope. Yes, you should dispose of objects that implement IDisposable.", "output": "You never need to set objects to null in C#. The compiler and runtime will take care of figuring out when they are no longer in scope. Yes, you should dispose of objects that implement IDisposable.", "answer": "You never need to set objects to null in C#. The compiler and runtime will take care of figuring out when they are no longer in scope. Yes, you should dispose of objects that implement IDisposable.", "summary": "You never need to set objects to null in C#. The compiler and runtime will take care of figuring out when they are no longer in scope. Yes, you should dispose of objects that implement IDisposable."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Strip time on inserts/updates in the first place. As for on-the-fly conversion, nothing can beat a user-defined function maintanability-wise: The implementation of <code>date_only</code> can be anything you like - now it's abstracted away and calling code is much much cleaner.", "output": "As for on-the-fly conversion, nothing can beat a user-defined function maintanability-wise: The implementation of <code>date_only</code> can be anything you like - now it's abstracted away and calling code is much much cleaner.", "answer": "Strip time on inserts/updates in the first place. As for on-the-fly conversion, nothing can beat a user-defined function maintanability-wise: The implementation of <code>date_only</code> can be anything you like - now it's abstracted away and calling code is much much cleaner.", "summary": "As for on-the-fly conversion, nothing can beat a user-defined function maintanability-wise: The implementation of <code>date_only</code> can be anything you like - now it's abstracted away and calling code is much much cleaner."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Is the following acceptable:", "output": "Is the following acceptable:", "answer": "Is the following acceptable:", "summary": "Is the following acceptable:"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Situations where you want to insert a lot of items into anywhere but the end of a sequence repeatedly. Check out the complexity guarantees for each different type of container: What are the complexity guarantees of the standard containers?", "output": "Situations where you want to insert a lot of items into anywhere but the end of a sequence repeatedly.", "answer": "Situations where you want to insert a lot of items into anywhere but the end of a sequence repeatedly. Check out the complexity guarantees for each different type of container: What are the complexity guarantees of the standard containers?", "summary": "Situations where you want to insert a lot of items into anywhere but the end of a sequence repeatedly."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n <code>self</code> (not $self) refers to the <em>type</em> of class, where as <code>$this</code> refers to the current <em>instance</em> of the class. <code>self</code> is for use in static member functions to allow you to access static member variables. <code>$this</code> is used in non-static member functions, and is a reference to the instance of the class on which the member function was called. Because <code>this</code> is an object, you use it like: <code>$this-&gt;member</code> Because <code>self</code> is not an object, it's basically a type that automatically refers to the current class, you use it like: <code>self::member</code>", "output": "<code>self</code> (not $self) refers to the <em>type</em> of class, where as <code>$this</code> refers to the current <em>instance</em> of the class. <code>self</code> is for use in static member functions to allow you to access static member variables. <code>$this</code> is used in non-static member functions, and is a reference to the instance of the class on which the member function was called.", "answer": "<code>self</code> (not $self) refers to the <em>type</em> of class, where as <code>$this</code> refers to the current <em>instance</em> of the class. <code>self</code> is for use in static member functions to allow you to access static member variables. <code>$this</code> is used in non-static member functions, and is a reference to the instance of the class on which the member function was called. Because <code>this</code> is an object, you use it like: <code>$this-&gt;member</code> Because <code>self</code> is not an object, it's basically a type that automatically refers to the current class, you use it like: <code>self::member</code>", "summary": "<code>self</code> (not $self) refers to the <em>type</em> of class, where as <code>$this</code> refers to the current <em>instance</em> of the class. <code>self</code> is for use in static member functions to allow you to access static member variables. <code>$this</code> is used in non-static member functions, and is a reference to the instance of the class on which the member function was called."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n using can be used to call IDisposable. It can also be used to alias types. BIGBLOCK", "output": "using can be used to call IDisposable. It can also be used to alias types.", "answer": "using can be used to call IDisposable. It can also be used to alias types. BIGBLOCK", "summary": "using can be used to call IDisposable. It can also be used to alias types."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n You should look at the article <em>C++ Programming/Type Casting</em>. It contains a good description of all of the different cast types. The following taken from the above link: const_cast const_cast(expression) The const_cast&lt;>() is used to add/remove  const(ness) (or volatile-ness) of a variable. static_cast static_cast(expression) The static_cast&lt;>() is used to cast between  the integer types. 'e.g.' char->long, int->short etc. Static cast is also used to cast pointers to related types, for  example casting void* to the appropriate type. dynamic_cast Dynamic cast is used to convert pointers and references at run-time,  generally for the purpose of casting a pointer or reference up or down  an inheritance chain (inheritance hierarchy). dynamic_cast(expression) The target type must be a pointer or reference type, and the  expression must evaluate to a pointer or reference. Dynamic cast works  only when the type of object to which the expression refers is  compatible with the target type and the base class has at least one  virtual member function. If not, and the type of expression being cast  is a pointer, NULL is returned, if a dynamic cast on a reference  fails, a bad_cast exception is thrown. When it doesn't fail, dynamic  cast returns a pointer or reference of the target type to the object  to which expression referred. reinterpret_cast Reinterpret cast simply casts one type bitwise to another. Any pointer  or integral type can be casted to any other with reinterpret cast,  easily allowing for misuse. For instance, with reinterpret cast one  might, unsafely, cast an integer pointer to a string pointer.", "output": "const_cast(expression) The const_cast&lt;>() is used to add/remove  const(ness) (or volatile-ness) of a variable. static_cast(expression) The static_cast&lt;>() is used to cast between  the integer types. Static cast is also used to cast pointers to related types, for  example casting void* to the appropriate type. Dynamic cast is used to convert pointers and references at run-time,  generally for the purpose of casting a pointer or reference up or down  an inheritance chain (inheritance hierarchy).", "answer": "You should look at the article <em>C++ Programming/Type Casting</em>. It contains a good description of all of the different cast types. The following taken from the above link: const_cast const_cast(expression) The const_cast&lt;>() is used to add/remove  const(ness) (or volatile-ness) of a variable. static_cast static_cast(expression) The static_cast&lt;>() is used to cast between  the integer types. 'e.g.' char->long, int->short etc. Static cast is also used to cast pointers to related types, for  example casting void* to the appropriate type. dynamic_cast Dynamic cast is used to convert pointers and references at run-time,  generally for the purpose of casting a pointer or reference up or down  an inheritance chain (inheritance hierarchy). dynamic_cast(expression) The target type must be a pointer or reference type, and the  expression must evaluate to a pointer or reference. Dynamic cast works  only when the type of object to which the expression refers is  compatible with the target type and the base class has at least one  virtual member function. If not, and the type of expression being cast  is a pointer, NULL is returned, if a dynamic cast on a reference  fails, a bad_cast exception is thrown. When it doesn't fail, dynamic  cast returns a pointer or reference of the target type to the object  to which expression referred. reinterpret_cast Reinterpret cast simply casts one type bitwise to another. Any pointer  or integral type can be casted to any other with reinterpret cast,  easily allowing for misuse. For instance, with reinterpret cast one  might, unsafely, cast an integer pointer to a string pointer.", "summary": "const_cast(expression) The const_cast&lt;>() is used to add/remove  const(ness) (or volatile-ness) of a variable. static_cast(expression) The static_cast&lt;>() is used to cast between  the integer types. Static cast is also used to cast pointers to related types, for  example casting void* to the appropriate type. Dynamic cast is used to convert pointers and references at run-time,  generally for the purpose of casting a pointer or reference up or down  an inheritance chain (inheritance hierarchy)."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Certainly not the only way - you could prototype a method (against Object here but I certainly wouldn't suggest using Object for live code) to replicate C#/Java style comparison methods. Edit, since a general example seems to be expected: Note that testing methods with toString() is <em>absolutely not good enough</em> but a method which would be acceptable is very hard because of the problem of whitespace having meaning or not, never mind synonym methods and methods producing the same result with different implementations. <em>And</em> the problems of prototyping against Object in general.", "output": "Certainly not the only way - you could prototype a method (against Object here but I certainly wouldn't suggest using Object for live code) to replicate C#/Java style comparison methods.", "answer": "Certainly not the only way - you could prototype a method (against Object here but I certainly wouldn't suggest using Object for live code) to replicate C#/Java style comparison methods. Edit, since a general example seems to be expected: Note that testing methods with toString() is <em>absolutely not good enough</em> but a method which would be acceptable is very hard because of the problem of whitespace having meaning or not, never mind synonym methods and methods producing the same result with different implementations. <em>And</em> the problems of prototyping against Object in general.", "summary": "Certainly not the only way - you could prototype a method (against Object here but I certainly wouldn't suggest using Object for live code) to replicate C#/Java style comparison methods."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n This may become more of an issue as the next generation of browsers come out with some flavor of a JavaScript compiler. Code executed via Eval may not perform as well as the rest of your JavaScript against these newer browsers. Someone should do some profiling.", "output": "Someone should do some profiling.", "answer": "This may become more of an issue as the next generation of browsers come out with some flavor of a JavaScript compiler. Code executed via Eval may not perform as well as the rest of your JavaScript against these newer browsers. Someone should do some profiling.", "summary": "Someone should do some profiling."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n have you tried: BIGBLOCK not sure about autohighlighting, though. <strong>EDIT</strong>: To append: BIGBLOCK", "output": "have you tried: BIGBLOCK To append: BIGBLOCK", "answer": "have you tried: BIGBLOCK not sure about autohighlighting, though. <strong>EDIT</strong>: To append: BIGBLOCK", "summary": "have you tried: BIGBLOCK To append: BIGBLOCK"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Probably because you're working with unmodifiable wrapper. Change this line: to this line:", "output": "Probably because you're working with unmodifiable wrapper.", "answer": "Probably because you're working with unmodifiable wrapper. Change this line: to this line:", "summary": "Probably because you're working with unmodifiable wrapper."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n You use: <code>public</code> scope to make that variable/function available from anywhere, other classes and instances of the object. <code>private</code> scope when you want your variable/function to be visible in its own class only. <code>protected</code> scope when you want to make your variable/function visible in all classes that extend current class including the parent class. More: (For comprehensive information) PHP Manual - Visibility", "output": "<code>public</code> scope to make that variable/function available from anywhere, other classes and instances of the object. <code>private</code> scope when you want your variable/function to be visible in its own class only. <code>protected</code> scope when you want to make your variable/function visible in all classes that extend current class including the parent class.", "answer": "You use: <code>public</code> scope to make that variable/function available from anywhere, other classes and instances of the object. <code>private</code> scope when you want your variable/function to be visible in its own class only. <code>protected</code> scope when you want to make your variable/function visible in all classes that extend current class including the parent class. More: (For comprehensive information) PHP Manual - Visibility", "summary": "<code>public</code> scope to make that variable/function available from anywhere, other classes and instances of the object. <code>private</code> scope when you want your variable/function to be visible in its own class only. <code>protected</code> scope when you want to make your variable/function visible in all classes that extend current class including the parent class."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n If it's a \"setter\", or somewhere I'm getting a member to use later, I tend to use IllegalArgumentException. If it's something I'm going to use (dereference) right now in the method, I throw a NullPointerException proactively. I like this better than letting the runtime do it, because I can provide a helpful message (seems like the runtime could do this too, but that's a rant for another day). If I'm overriding a method, I use whatever the overridden method uses.", "output": "If it's a \"setter\", or somewhere I'm getting a member to use later, I tend to use IllegalArgumentException. If it's something I'm going to use (dereference) right now in the method, I throw a NullPointerException proactively.", "answer": "If it's a \"setter\", or somewhere I'm getting a member to use later, I tend to use IllegalArgumentException. If it's something I'm going to use (dereference) right now in the method, I throw a NullPointerException proactively. I like this better than letting the runtime do it, because I can provide a helpful message (seems like the runtime could do this too, but that's a rant for another day). If I'm overriding a method, I use whatever the overridden method uses.", "summary": "If it's a \"setter\", or somewhere I'm getting a member to use later, I tend to use IllegalArgumentException. If it's something I'm going to use (dereference) right now in the method, I throw a NullPointerException proactively."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Does Snow Leopard still have <code>/usr/libexec/java_home</code>? On 10.5, I just set <code>JAVA_HOME</code> to the output of that command, which should give you the Java path specified in your Java preferences. Here's a snippet from my <code>.bashrc</code> file, which sets this variable: BIGBLOCK I haven't experienced any problems with that technique. Occasionally I do have to change the value of <code>JAVA_HOME</code> to an earlier version of Java. For example, one program I'm maintaining requires 32-bit Java 5 on OS X, so when using that program, I set <code>JAVA_HOME</code> by running: BIGBLOCK For those of you who don't have <code>java_home</code> in your path add it like this. BIGBLOCK", "output": "On 10.5, I just set <code>JAVA_HOME</code> to the output of that command, which should give you the Java path specified in your Java preferences. Here's a snippet from my <code>.bashrc</code> file, which sets this variable: BIGBLOCK", "answer": "Does Snow Leopard still have <code>/usr/libexec/java_home</code>? On 10.5, I just set <code>JAVA_HOME</code> to the output of that command, which should give you the Java path specified in your Java preferences. Here's a snippet from my <code>.bashrc</code> file, which sets this variable: BIGBLOCK I haven't experienced any problems with that technique. Occasionally I do have to change the value of <code>JAVA_HOME</code> to an earlier version of Java. For example, one program I'm maintaining requires 32-bit Java 5 on OS X, so when using that program, I set <code>JAVA_HOME</code> by running: BIGBLOCK For those of you who don't have <code>java_home</code> in your path add it like this. BIGBLOCK", "summary": "On 10.5, I just set <code>JAVA_HOME</code> to the output of that command, which should give you the Java path specified in your Java preferences. Here's a snippet from my <code>.bashrc</code> file, which sets this variable: BIGBLOCK"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Personally I think this is a flaw in the design of Java. Yes, yes, I understand that non-static methods are attached to an instance while static methods are attached to a class, etc etc. Still, consider the following code: BIGBLOCK This code will not work as you might expect. Namely, SpecialEmployee's get a 2% bonus just like regular employees. But if you remove the \"static\"s, then SpecialEmployee's get a 3% bonus. (Admittedly, this example is poor coding style in that in real life you would likely want the bonus multiplier to be in a database somewhere rather than hard-coded. But that's just because I didn't want to bog down the example with a lot of code irrelevant to the point.) It seems quite plausible to me that you might want to make getBonusMultiplier static. Perhaps you want to be able to display the bonus multiplier for all the categories of employees, without needing to have an instance of an employee in each category. What would be the point of searching for such example instances? What if we are creating a new category of employee and don't have any employees assigned to it yet? This is quite logically a static function. But it doesn't work. And yes, yes, I can think of any number of ways to rewrite the above code to make it work. My point is not that it creates an unsolvable problem, but that it creates a trap for the unwary programmer, because the language does not behave as I think a reasonable person would expect. Perhaps if I tried to write a compiler for an OOP language, I would quickly see why implementing it so that static functions can be overriden would be difficult or impossible. Or perhaps there is some good reason why Java behaves this way. Can anyone point out an advantage to this behavior, some category of problem that is made easier by this? I mean, don't just point me to the Java language spec and say \"see, this is documented how it behaves\". I know that. But is there a good reason why it SHOULD behave this way? (Besides the obvious \"making it work right was too hard\"...) <strong>Update</strong> @VicKirk: If you mean that this is \"bad design\" because it doesn't fit how Java handles statics, my reply is, \"Well, duh, of course.\" As I said in my original post, it doesn't work. But if you mean that it is bad design in the sense that there would be something fundamentally wrong with a language where this worked, i.e. where statics could be overridden just like virtual functions, that this would somehow introduce an ambiguity or it would be impossible to implement efficiently or some such, I reply, \"Why? What's wrong with the concept?\" I think the example I give is a very natural thing to want to do. I have a class that has a function that does not depend on any instance data, and which I might very reasonably want to call independent of an instance, as well as wanting to call from within an instance method. Why should this not work? I've run into this situation a fair number of times over the years. In practice I get around it by making the function virtual, and then creating a static method whose only purpose in life is to be a static method that passes the call on to the virtual method with a dummy instance. That seems like a very roundabout way to get there.", "output": "Personally I think this is a flaw in the design of Java. My point is not that it creates an unsolvable problem, but that it creates a trap for the unwary programmer, because the language does not behave as I think a reasonable person would expect.", "answer": "Personally I think this is a flaw in the design of Java. Yes, yes, I understand that non-static methods are attached to an instance while static methods are attached to a class, etc etc. Still, consider the following code: BIGBLOCK This code will not work as you might expect. Namely, SpecialEmployee's get a 2% bonus just like regular employees. But if you remove the \"static\"s, then SpecialEmployee's get a 3% bonus. (Admittedly, this example is poor coding style in that in real life you would likely want the bonus multiplier to be in a database somewhere rather than hard-coded. But that's just because I didn't want to bog down the example with a lot of code irrelevant to the point.) It seems quite plausible to me that you might want to make getBonusMultiplier static. Perhaps you want to be able to display the bonus multiplier for all the categories of employees, without needing to have an instance of an employee in each category. What would be the point of searching for such example instances? What if we are creating a new category of employee and don't have any employees assigned to it yet? This is quite logically a static function. But it doesn't work. And yes, yes, I can think of any number of ways to rewrite the above code to make it work. My point is not that it creates an unsolvable problem, but that it creates a trap for the unwary programmer, because the language does not behave as I think a reasonable person would expect. Perhaps if I tried to write a compiler for an OOP language, I would quickly see why implementing it so that static functions can be overriden would be difficult or impossible. Or perhaps there is some good reason why Java behaves this way. Can anyone point out an advantage to this behavior, some category of problem that is made easier by this? I mean, don't just point me to the Java language spec and say \"see, this is documented how it behaves\". I know that. But is there a good reason why it SHOULD behave this way? (Besides the obvious \"making it work right was too hard\"...) <strong>Update</strong> @VicKirk: If you mean that this is \"bad design\" because it doesn't fit how Java handles statics, my reply is, \"Well, duh, of course.\" As I said in my original post, it doesn't work. But if you mean that it is bad design in the sense that there would be something fundamentally wrong with a language where this worked, i.e. where statics could be overridden just like virtual functions, that this would somehow introduce an ambiguity or it would be impossible to implement efficiently or some such, I reply, \"Why? What's wrong with the concept?\" I think the example I give is a very natural thing to want to do. I have a class that has a function that does not depend on any instance data, and which I might very reasonably want to call independent of an instance, as well as wanting to call from within an instance method. Why should this not work? I've run into this situation a fair number of times over the years. In practice I get around it by making the function virtual, and then creating a static method whose only purpose in life is to be a static method that passes the call on to the virtual method with a dummy instance. That seems like a very roundabout way to get there.", "summary": "Personally I think this is a flaw in the design of Java. My point is not that it creates an unsolvable problem, but that it creates a trap for the unwary programmer, because the language does not behave as I think a reasonable person would expect."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Are you sure you want to filter the Collection itself, rather than an iterator? see org.apache.commons.collections.iterators.FilterIterator or using version 4 of apache commons org.apache.commons.collections4.iterators.FilterIterator", "output": "see org.apache.commons.collections.iterators.FilterIterator or using version 4 of apache commons org.apache.commons.collections4.iterators.FilterIterator", "answer": "Are you sure you want to filter the Collection itself, rather than an iterator? see org.apache.commons.collections.iterators.FilterIterator or using version 4 of apache commons org.apache.commons.collections4.iterators.FilterIterator", "summary": "see org.apache.commons.collections.iterators.FilterIterator or using version 4 of apache commons org.apache.commons.collections4.iterators.FilterIterator"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n I've come across that situation several times and, after a lot of attempts, I found the solution. Check your project build-path and enable specific output folders for each folder. Go one by one though each source-folder of your project and set the output folder that maven would use. For example, your web project's <code>src/main/java</code> should have <code>target/classes</code> under the web project, test classes should have <code>target/test-classes</code> also under the web project and so. Using this configuration will allow you to execute unit tests in eclipse. Just one more advice, if your web project's tests require some configuration files that are under the resources, be sure to include that folder as a source folder and to make the proper build-path configuration. Hope it helps.", "output": "Check your project build-path and enable specific output folders for each folder.", "answer": "I've come across that situation several times and, after a lot of attempts, I found the solution. Check your project build-path and enable specific output folders for each folder. Go one by one though each source-folder of your project and set the output folder that maven would use. For example, your web project's <code>src/main/java</code> should have <code>target/classes</code> under the web project, test classes should have <code>target/test-classes</code> also under the web project and so. Using this configuration will allow you to execute unit tests in eclipse. Just one more advice, if your web project's tests require some configuration files that are under the resources, be sure to include that folder as a source folder and to make the proper build-path configuration. Hope it helps.", "summary": "Check your project build-path and enable specific output folders for each folder."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Java generics work by checking types at compile time and inserting appropriate casts, but <em>erasing</em> the types in the compiled files. This makes generic libraries usable by code which doesn't understand generics (which was a deliberate design decision) but which means you can't normally find out what the type is at run time. The public <code>Stack(Class&lt;T&gt; clazz,int capacity)</code> constructor requires you to pass a Class object at run time, which means class information <em>is</em> available at runtime to code that needs it. And the <code>Class&lt;T&gt;</code> form means that the compiler will check that the Class object you pass is precisely the Class object for type T. Not a subclass of T, not a superclass of T, but precisely T. This then means that you can create an array object of the appropriate type in your constructor, which means that the type of the objects you store in your collection will have their types checked at the point they are added to the collection.", "output": "Java generics work by checking types at compile time and inserting appropriate casts, but <em>erasing</em> the types in the compiled files. This makes generic libraries usable by code which doesn't understand generics (which was a deliberate design decision) but which means you can't normally find out what the type is at run time. The public <code>Stack(Class&lt;T&gt; clazz,int capacity)</code> constructor requires you to pass a Class object at run time, which means class information <em>is</em> available at runtime to code that needs it. This then means that you can create an array object of the appropriate type in your constructor, which means that the type of the objects you store in your collection will have their types checked at the point they are added to the collection.", "answer": "Java generics work by checking types at compile time and inserting appropriate casts, but <em>erasing</em> the types in the compiled files. This makes generic libraries usable by code which doesn't understand generics (which was a deliberate design decision) but which means you can't normally find out what the type is at run time. The public <code>Stack(Class&lt;T&gt; clazz,int capacity)</code> constructor requires you to pass a Class object at run time, which means class information <em>is</em> available at runtime to code that needs it. And the <code>Class&lt;T&gt;</code> form means that the compiler will check that the Class object you pass is precisely the Class object for type T. Not a subclass of T, not a superclass of T, but precisely T. This then means that you can create an array object of the appropriate type in your constructor, which means that the type of the objects you store in your collection will have their types checked at the point they are added to the collection.", "summary": "Java generics work by checking types at compile time and inserting appropriate casts, but <em>erasing</em> the types in the compiled files. This makes generic libraries usable by code which doesn't understand generics (which was a deliberate design decision) but which means you can't normally find out what the type is at run time. The public <code>Stack(Class&lt;T&gt; clazz,int capacity)</code> constructor requires you to pass a Class object at run time, which means class information <em>is</em> available at runtime to code that needs it. This then means that you can create an array object of the appropriate type in your constructor, which means that the type of the objects you store in your collection will have their types checked at the point they are added to the collection."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n @buti-oxa: Not to be pedantic, but your code is invalid. The HTML <code>width</code> and <code>height</code> attributes do not allow for units; you're likely thinking of the CSS <code>width:</code> and <code>height:</code> properties. You should also provide a content-type (<code>text/css</code>; see Espo's code) with the <code>&lt;style&gt;</code> tag. Leaving <code>px;</code> in the <code>width</code> and <code>height</code> attributes might cause a rendering engine to balk.", "output": "The HTML <code>width</code> and <code>height</code> attributes do not allow for units; you're likely thinking of the CSS <code>width:</code> and <code>height:</code> properties. You should also provide a content-type (<code>text/css</code>; see Espo's code) with the <code>&lt;style&gt;</code> tag. Leaving <code>px;</code> in the <code>width</code> and <code>height</code> attributes might cause a rendering engine to balk.", "answer": "@buti-oxa: Not to be pedantic, but your code is invalid. The HTML <code>width</code> and <code>height</code> attributes do not allow for units; you're likely thinking of the CSS <code>width:</code> and <code>height:</code> properties. You should also provide a content-type (<code>text/css</code>; see Espo's code) with the <code>&lt;style&gt;</code> tag. Leaving <code>px;</code> in the <code>width</code> and <code>height</code> attributes might cause a rendering engine to balk.", "summary": "The HTML <code>width</code> and <code>height</code> attributes do not allow for units; you're likely thinking of the CSS <code>width:</code> and <code>height:</code> properties. You should also provide a content-type (<code>text/css</code>; see Espo's code) with the <code>&lt;style&gt;</code> tag. Leaving <code>px;</code> in the <code>width</code> and <code>height</code> attributes might cause a rendering engine to balk."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n I'm not working on IIS, but I do have an application that throws the same error on a 2K8 box. It works just fine on a 2K3 box, go figure. My resolution was to \"Run as administrator\" to give the application elevated rights and everything works happily. I hope this helps lead you in the right direction. Windows 2008 is rights/permissions/elevation is really different from Windows 2003, gar.", "output": "My resolution was to \"Run as administrator\" to give the application elevated rights and everything works happily.", "answer": "I'm not working on IIS, but I do have an application that throws the same error on a 2K8 box. It works just fine on a 2K3 box, go figure. My resolution was to \"Run as administrator\" to give the application elevated rights and everything works happily. I hope this helps lead you in the right direction. Windows 2008 is rights/permissions/elevation is really different from Windows 2003, gar.", "summary": "My resolution was to \"Run as administrator\" to give the application elevated rights and everything works happily."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n You shouldn't need to. Allow the user to have whatever preferences they want. Firefox does that by default because opening a page in a new window is annoying and a page should never be allowed to do so if that is not what is desired by the user. (Firefox does allow you to open tabs in a new window if you set it that way).", "output": "You shouldn't need to. Allow the user to have whatever preferences they want.", "answer": "You shouldn't need to. Allow the user to have whatever preferences they want. Firefox does that by default because opening a page in a new window is annoying and a page should never be allowed to do so if that is not what is desired by the user. (Firefox does allow you to open tabs in a new window if you set it that way).", "summary": "You shouldn't need to. Allow the user to have whatever preferences they want."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n You haven't initialised <code>a</code> and <code>b</code>, only declared them. There is a subtle difference. At least this is for C++, I presume Java is the same concept.", "output": "You haven't initialised <code>a</code> and <code>b</code>, only declared them.", "answer": "You haven't initialised <code>a</code> and <code>b</code>, only declared them. There is a subtle difference. At least this is for C++, I presume Java is the same concept.", "summary": "You haven't initialised <code>a</code> and <code>b</code>, only declared them."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Javascript doesn't have inheritance in the usual sense, but it has the prototype chain. prototype chain If a member of an object can't be found in the object it looks for it in the prototype chain. The chain consists of other objects. The prototype of a given instance can be accessed with the <code>__proto__</code> variable. Every object has one, as there is no difference between classes and instances in javascript. The advantage of adding a function / variable to the prototype is that it has to be in the memory only once, not for every instance. It's also useful for inheritance, because the prototype chain can consist of many other objects.", "output": "The advantage of adding a function / variable to the prototype is that it has to be in the memory only once, not for every instance.", "answer": "Javascript doesn't have inheritance in the usual sense, but it has the prototype chain. prototype chain If a member of an object can't be found in the object it looks for it in the prototype chain. The chain consists of other objects. The prototype of a given instance can be accessed with the <code>__proto__</code> variable. Every object has one, as there is no difference between classes and instances in javascript. The advantage of adding a function / variable to the prototype is that it has to be in the memory only once, not for every instance. It's also useful for inheritance, because the prototype chain can consist of many other objects.", "summary": "The advantage of adding a function / variable to the prototype is that it has to be in the memory only once, not for every instance."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n You can use this one: Ã©Â?You can type it by pressing Alt key and typing 0149.", "output": "You can use this one: Ã©Â?You can type it by pressing Alt key and typing 0149.", "answer": "You can use this one: Ã©Â?You can type it by pressing Alt key and typing 0149.", "summary": "You can use this one: Ã©Â?You can type it by pressing Alt key and typing 0149."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Maybe a bit of example code will help: Notice the difference in the call signatures of <code>foo</code>, <code>class_foo</code> and <code>static_foo</code>: Below is the usual way an object instance calls a method. The object instance, <code>a</code>, is implicitly passed as the first argument. <strong>With classmethods</strong>, the class of the object instance is implicitly passed as the first argument instead of <code>self</code>. You can also call <code>class_foo</code> using the class. In fact, if you define something to bea classmethod, it is probably because you intend to call it from the class rather than from a class instance. <code>A.foo(1)</code> would have raised a TypeError, but <code>A.class_foo(1)</code> works just fine: One use people have found for class methods is to create inheritable alternative constructors. <strong>With staticmethods</strong>, neither <code>self</code> (the object instance) nor  <code>cls</code> (the class) is implicitly passed as the first argument. They behave like plain functions except that you can call them from an instance or the class: Staticmethods are used to group functions which have some logical connection with a class to the class. <code>foo</code> is just a function, but when you call <code>a.foo</code> you don't just get the function,you get a \"partially applied\" version of the function with the object instance <code>a</code> bound as the first argument to the function. <code>foo</code> expects 2 arguments, while <code>a.foo</code> only expects 1 argument. <code>a</code> is bound to <code>foo</code>. That is what is meant by the term \"bound\" below: With <code>a.class_foo</code>, <code>a</code> is not bound to <code>class_foo</code>, rather the class <code>A</code> is bound to <code>class_foo</code>. Here, with a staticmethod, even though it is a method, <code>a.static_foo</code> just returnsa good 'ole function with no arguments bound. <code>static_foo</code> expects 1 argument, and<code>a.static_foo</code> expects 1 argument too. And of course the same thing happens when you call <code>static_foo</code> with the class <code>A</code> instead.", "output": "Below is the usual way an object instance calls a method. The object instance, <code>a</code>, is implicitly passed as the first argument. <strong>With classmethods</strong>, the class of the object instance is implicitly passed as the first argument instead of <code>self</code>. One use people have found for class methods is to create inheritable alternative constructors. <strong>With staticmethods</strong>, neither <code>self</code> (the object instance) nor  <code>cls</code> (the class) is implicitly passed as the first argument. They behave like plain functions except that you can call them from an instance or the class: Staticmethods are used to group functions which have some logical connection with a class to the class.", "answer": "Maybe a bit of example code will help: Notice the difference in the call signatures of <code>foo</code>, <code>class_foo</code> and <code>static_foo</code>: Below is the usual way an object instance calls a method. The object instance, <code>a</code>, is implicitly passed as the first argument. <strong>With classmethods</strong>, the class of the object instance is implicitly passed as the first argument instead of <code>self</code>. You can also call <code>class_foo</code> using the class. In fact, if you define something to bea classmethod, it is probably because you intend to call it from the class rather than from a class instance. <code>A.foo(1)</code> would have raised a TypeError, but <code>A.class_foo(1)</code> works just fine: One use people have found for class methods is to create inheritable alternative constructors. <strong>With staticmethods</strong>, neither <code>self</code> (the object instance) nor  <code>cls</code> (the class) is implicitly passed as the first argument. They behave like plain functions except that you can call them from an instance or the class: Staticmethods are used to group functions which have some logical connection with a class to the class. <code>foo</code> is just a function, but when you call <code>a.foo</code> you don't just get the function,you get a \"partially applied\" version of the function with the object instance <code>a</code> bound as the first argument to the function. <code>foo</code> expects 2 arguments, while <code>a.foo</code> only expects 1 argument. <code>a</code> is bound to <code>foo</code>. That is what is meant by the term \"bound\" below: With <code>a.class_foo</code>, <code>a</code> is not bound to <code>class_foo</code>, rather the class <code>A</code> is bound to <code>class_foo</code>. Here, with a staticmethod, even though it is a method, <code>a.static_foo</code> just returnsa good 'ole function with no arguments bound. <code>static_foo</code> expects 1 argument, and<code>a.static_foo</code> expects 1 argument too. And of course the same thing happens when you call <code>static_foo</code> with the class <code>A</code> instead.", "summary": "Below is the usual way an object instance calls a method. The object instance, <code>a</code>, is implicitly passed as the first argument. <strong>With classmethods</strong>, the class of the object instance is implicitly passed as the first argument instead of <code>self</code>. One use people have found for class methods is to create inheritable alternative constructors. <strong>With staticmethods</strong>, neither <code>self</code> (the object instance) nor  <code>cls</code> (the class) is implicitly passed as the first argument. They behave like plain functions except that you can call them from an instance or the class: Staticmethods are used to group functions which have some logical connection with a class to the class."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n This function returns either <code>\"undefined\"</code>, <code>\"null\"</code>, or the <code>\"class\"</code> in <code>[object class]</code> from <code>Object.prototype.toString.call(someObject)</code>.", "output": "This function returns either <code>\"undefined\"</code>, <code>\"null\"</code>, or the <code>\"class\"</code> in <code>[object class]</code> from <code>Object.prototype.toString.call(someObject)</code>.", "answer": "This function returns either <code>\"undefined\"</code>, <code>\"null\"</code>, or the <code>\"class\"</code> in <code>[object class]</code> from <code>Object.prototype.toString.call(someObject)</code>.", "summary": "This function returns either <code>\"undefined\"</code>, <code>\"null\"</code>, or the <code>\"class\"</code> in <code>[object class]</code> from <code>Object.prototype.toString.call(someObject)</code>."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n You can either use the iterator directly like you mentioned, or else keep a second collection and add each item you want to remove to the new collection, then removeAll at the end. This allows you to keep using the type-safety of the for-each loop at the cost of increased memory use and cpu time (shouldn't be a huge problem unless you have really, really big lists or a really old computer)", "output": "You can either use the iterator directly like you mentioned, or else keep a second collection and add each item you want to remove to the new collection, then removeAll at the end.", "answer": "You can either use the iterator directly like you mentioned, or else keep a second collection and add each item you want to remove to the new collection, then removeAll at the end. This allows you to keep using the type-safety of the for-each loop at the cost of increased memory use and cpu time (shouldn't be a huge problem unless you have really, really big lists or a really old computer)", "summary": "You can either use the iterator directly like you mentioned, or else keep a second collection and add each item you want to remove to the new collection, then removeAll at the end."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n You can parse dates from a custom format (as of PHP 5.3) with DateTime::createFromFormat BIGBLOCK (Aside: The <code>!</code> is used to reset non-specified values to the Unix timestamp, ie. the time will be midnight.) If you do not want to (or cannot) use PHP 5.3, then a full list of available date/time formats which strtotime accepts is listed on the <em>Date Formats</em> manual page. That page more thoroughly describes the fact that <code>m/d/Y</code> is inferred over <code>d/m/Y</code> (but you can, as mentioned in the answers here, use <code>d-m-Y</code>, <code>d.m.Y</code> or <code>d\\tm\\tY</code>). In the past, I've also resorted to the quicky <code>str_replace</code> mentioned in another answer, as well as self-parsing the date string into another format like BIGBLOCK", "output": "You can parse dates from a custom format (as of PHP 5.3) with DateTime::createFromFormat BIGBLOCK If you do not want to (or cannot) use PHP 5.3, then a full list of available date/time formats which strtotime accepts is listed on the <em>Date Formats</em> manual page. That page more thoroughly describes the fact that <code>m/d/Y</code> is inferred over <code>d/m/Y</code> (but you can, as mentioned in the answers here, use <code>d-m-Y</code>, <code>d.m.Y</code> or <code>d\\tm\\tY</code>).", "answer": "You can parse dates from a custom format (as of PHP 5.3) with DateTime::createFromFormat BIGBLOCK (Aside: The <code>!</code> is used to reset non-specified values to the Unix timestamp, ie. the time will be midnight.) If you do not want to (or cannot) use PHP 5.3, then a full list of available date/time formats which strtotime accepts is listed on the <em>Date Formats</em> manual page. That page more thoroughly describes the fact that <code>m/d/Y</code> is inferred over <code>d/m/Y</code> (but you can, as mentioned in the answers here, use <code>d-m-Y</code>, <code>d.m.Y</code> or <code>d\\tm\\tY</code>). In the past, I've also resorted to the quicky <code>str_replace</code> mentioned in another answer, as well as self-parsing the date string into another format like BIGBLOCK", "summary": "You can parse dates from a custom format (as of PHP 5.3) with DateTime::createFromFormat BIGBLOCK If you do not want to (or cannot) use PHP 5.3, then a full list of available date/time formats which strtotime accepts is listed on the <em>Date Formats</em> manual page. That page more thoroughly describes the fact that <code>m/d/Y</code> is inferred over <code>d/m/Y</code> (but you can, as mentioned in the answers here, use <code>d-m-Y</code>, <code>d.m.Y</code> or <code>d\\tm\\tY</code>)."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n I'm not sure if it would be faster, or even accurate, but you could use John Carmack's Magical Square Root, algorithm to solve the square root faster. You could probably easily test this for all possible 32 bit integers, and validate that you actually got correct results, as it's only an appoximation. However, now that I think about it, using doubles is approximating also, so I'm not sure how that would come into play.", "output": "I'm not sure if it would be faster, or even accurate, but you could use John Carmack's Magical Square Root, algorithm to solve the square root faster.", "answer": "I'm not sure if it would be faster, or even accurate, but you could use John Carmack's Magical Square Root, algorithm to solve the square root faster. You could probably easily test this for all possible 32 bit integers, and validate that you actually got correct results, as it's only an appoximation. However, now that I think about it, using doubles is approximating also, so I'm not sure how that would come into play.", "summary": "I'm not sure if it would be faster, or even accurate, but you could use John Carmack's Magical Square Root, algorithm to solve the square root faster."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n You may want to use the <code>BIT</code> data type, probably setting is as <code>NOT NULL</code>: Quoting the MSDN article: bit (Transact-SQL) An integer data type that can take a value of 1, 0, or NULL. The SQL Server Database Engine optimizes storage of bit columns. If there are 8 or less bit columns in a table, the columns are stored as 1 byte. If there are from 9 up to 16 bit columns, the columns are stored as 2 bytes, and so on. The string values TRUE and FALSE can be converted to bit values: TRUE is converted to 1 and FALSE is converted to 0.", "output": "You may want to use the <code>BIT</code> data type, probably setting is as <code>NOT NULL</code>:", "answer": "You may want to use the <code>BIT</code> data type, probably setting is as <code>NOT NULL</code>: Quoting the MSDN article: bit (Transact-SQL) An integer data type that can take a value of 1, 0, or NULL. The SQL Server Database Engine optimizes storage of bit columns. If there are 8 or less bit columns in a table, the columns are stored as 1 byte. If there are from 9 up to 16 bit columns, the columns are stored as 2 bytes, and so on. The string values TRUE and FALSE can be converted to bit values: TRUE is converted to 1 and FALSE is converted to 0.", "summary": "You may want to use the <code>BIT</code> data type, probably setting is as <code>NOT NULL</code>:"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n If you work without the JSON library, maybe this will help you out:", "output": "If you work without the JSON library, maybe this will help you out:", "answer": "If you work without the JSON library, maybe this will help you out:", "summary": "If you work without the JSON library, maybe this will help you out:"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n It is <code>.shape</code>: ndarray.shape   Tuple of array dimensions. Thus:", "output": "It is <code>.shape</code>:", "answer": "It is <code>.shape</code>: ndarray.shape   Tuple of array dimensions. Thus:", "summary": "It is <code>.shape</code>:"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n A procedure does not have a return value, whereas a function has. Example: BIGBLOCK Notice how the function has a return clause between the parameter list and the \"as\" keyword. This means that it is expected to have the last statement inside the body of the function read something like: BIGBLOCK Where my_varchar2_local_variable is some varchar2 that should be returned by that function.", "output": "A procedure does not have a return value, whereas a function has.", "answer": "A procedure does not have a return value, whereas a function has. Example: BIGBLOCK Notice how the function has a return clause between the parameter list and the \"as\" keyword. This means that it is expected to have the last statement inside the body of the function read something like: BIGBLOCK Where my_varchar2_local_variable is some varchar2 that should be returned by that function.", "summary": "A procedure does not have a return value, whereas a function has."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Try using double quotes if it's a char variable: or upd:", "output": "Try using double quotes if it's a char variable: or", "answer": "Try using double quotes if it's a char variable: or upd:", "summary": "Try using double quotes if it's a char variable: or"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n put it in a div and add border to the div", "output": "put it in a div and add border to the div", "answer": "put it in a div and add border to the div", "summary": "put it in a div and add border to the div"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Okay, finally figured out where I was remiss. I was under the mistaken notion that I should wrap each DAO method in a transaction. Terribly wrong! I've learned my lesson. I've hauled all the transaction code from all the DAO methods and have set up transactions strictly at the application/manager layer. This has totally solved all my problems. Data is properly lazy loaded as I need it, wrapped up and closed down once I do the commit. Life is goodly... :)", "output": "I was under the mistaken notion that I should wrap each DAO method in a transaction.", "answer": "Okay, finally figured out where I was remiss. I was under the mistaken notion that I should wrap each DAO method in a transaction. Terribly wrong! I've learned my lesson. I've hauled all the transaction code from all the DAO methods and have set up transactions strictly at the application/manager layer. This has totally solved all my problems. Data is properly lazy loaded as I need it, wrapped up and closed down once I do the commit. Life is goodly... :)", "summary": "I was under the mistaken notion that I should wrap each DAO method in a transaction."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n In Java, the <code>equals()</code> method that is inherited from <code>Object</code> is: BIGBLOCK In other words, the parameter must be of type <code>Object</code>. The <code>ArrayList</code> uses the correct equals method, where you were always calling the one that didn't properly override <code>Object</code>'s equals. Not overriding the method correctly can cause problems. I override equals the following everytime: BIGBLOCK The use of the <code>@Override</code> annotation can help a ton with silly mistakes. Use it whenever you think you are overriding a super class' or interface's method. That way, if you do it wrong you will get a compile error.", "output": "The <code>ArrayList</code> uses the correct equals method, where you were always calling the one that didn't properly override <code>Object</code>'s equals. I override equals the following everytime: BIGBLOCK", "answer": "In Java, the <code>equals()</code> method that is inherited from <code>Object</code> is: BIGBLOCK In other words, the parameter must be of type <code>Object</code>. The <code>ArrayList</code> uses the correct equals method, where you were always calling the one that didn't properly override <code>Object</code>'s equals. Not overriding the method correctly can cause problems. I override equals the following everytime: BIGBLOCK The use of the <code>@Override</code> annotation can help a ton with silly mistakes. Use it whenever you think you are overriding a super class' or interface's method. That way, if you do it wrong you will get a compile error.", "summary": "The <code>ArrayList</code> uses the correct equals method, where you were always calling the one that didn't properly override <code>Object</code>'s equals. I override equals the following everytime: BIGBLOCK"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Specifically in Commons Codec: class <code>Base64</code> to <code>decode(byte[] array)</code> or <code>encode(byte[] array)</code>", "output": "Specifically in Commons Codec: class <code>Base64</code> to <code>decode(byte[] array)</code> or <code>encode(byte[] array)</code>", "answer": "Specifically in Commons Codec: class <code>Base64</code> to <code>decode(byte[] array)</code> or <code>encode(byte[] array)</code>", "summary": "Specifically in Commons Codec: class <code>Base64</code> to <code>decode(byte[] array)</code> or <code>encode(byte[] array)</code>"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n For performance, you very often have to do some compromsies. Others have expressed various methods, however, you noted Carmack's hack was faster up to certain values of N. Then, you should check the \"n\" and if it is less than that number N, use Carmack's hack, else use some other method described in the answers here.", "output": "Others have expressed various methods, however, you noted Carmack's hack was faster up to certain values of N. Then, you should check the \"n\" and if it is less than that number N, use Carmack's hack, else use some other method described in the answers here.", "answer": "For performance, you very often have to do some compromsies. Others have expressed various methods, however, you noted Carmack's hack was faster up to certain values of N. Then, you should check the \"n\" and if it is less than that number N, use Carmack's hack, else use some other method described in the answers here.", "summary": "Others have expressed various methods, however, you noted Carmack's hack was faster up to certain values of N. Then, you should check the \"n\" and if it is less than that number N, use Carmack's hack, else use some other method described in the answers here."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n I had to do a lot of hacking of the symbolicatecrash script to get it to run properly. As far as I can tell, symbolicatecrash right now requires the .app to be in the same directory as the .dsym. It will use the .dsym to locate the .app, but it won't use the dsym to find the symbols. You should make a copy of your symbolicatecrash before attempting these patches which will make it look in the dsym: Around line 212 in the getSymbolPathFor_dsymUuid function BIGBLOCK Around line 265 in the matchesUUID function BIGBLOCK", "output": "As far as I can tell, symbolicatecrash right now requires the .app to be in the same directory as the .dsym. You should make a copy of your symbolicatecrash before attempting these patches which will make it look in the dsym:", "answer": "I had to do a lot of hacking of the symbolicatecrash script to get it to run properly. As far as I can tell, symbolicatecrash right now requires the .app to be in the same directory as the .dsym. It will use the .dsym to locate the .app, but it won't use the dsym to find the symbols. You should make a copy of your symbolicatecrash before attempting these patches which will make it look in the dsym: Around line 212 in the getSymbolPathFor_dsymUuid function BIGBLOCK Around line 265 in the matchesUUID function BIGBLOCK", "summary": "As far as I can tell, symbolicatecrash right now requires the .app to be in the same directory as the .dsym. You should make a copy of your symbolicatecrash before attempting these patches which will make it look in the dsym:"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n The Eventbug extension has been released yesterday, see:http://www.softwareishard.com/blog/firebug/eventbug-alpha-released/", "output": "The Eventbug extension has been released yesterday, see:http://www.softwareishard.com/blog/firebug/eventbug-alpha-released/", "answer": "The Eventbug extension has been released yesterday, see:http://www.softwareishard.com/blog/firebug/eventbug-alpha-released/", "summary": "The Eventbug extension has been released yesterday, see:http://www.softwareishard.com/blog/firebug/eventbug-alpha-released/"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n It depends on the context. <li>For a <code>final</code> class or method, the C# equivalent is <code>sealed</code>. <li>For a <code>final</code> field, the C# equivalent is <code>readonly</code>. <li>For a <code>final</code> local variable or method parameter, there's no direct C# equivalent.", "output": "<li>For a <code>final</code> class or method, the C# equivalent is <code>sealed</code>. <li>For a <code>final</code> field, the C# equivalent is <code>readonly</code>. <li>For a <code>final</code> local variable or method parameter, there's no direct C# equivalent.", "answer": "It depends on the context. <li>For a <code>final</code> class or method, the C# equivalent is <code>sealed</code>. <li>For a <code>final</code> field, the C# equivalent is <code>readonly</code>. <li>For a <code>final</code> local variable or method parameter, there's no direct C# equivalent.", "summary": "<li>For a <code>final</code> class or method, the C# equivalent is <code>sealed</code>. <li>For a <code>final</code> field, the C# equivalent is <code>readonly</code>. <li>For a <code>final</code> local variable or method parameter, there's no direct C# equivalent."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n For Ubuntu instances: BIGBLOCK For other instances, you might have to use <code>ec2-user</code> instead of <code>ubuntu</code>. Most EC2 Linux images I've used only have the root user created by default. See also: http://www.youtube.com/watch?v=WBro0TEAd7g", "output": "For Ubuntu instances: BIGBLOCK For other instances, you might have to use <code>ec2-user</code> instead of <code>ubuntu</code>.", "answer": "For Ubuntu instances: BIGBLOCK For other instances, you might have to use <code>ec2-user</code> instead of <code>ubuntu</code>. Most EC2 Linux images I've used only have the root user created by default. See also: http://www.youtube.com/watch?v=WBro0TEAd7g", "summary": "For Ubuntu instances: BIGBLOCK For other instances, you might have to use <code>ec2-user</code> instead of <code>ubuntu</code>."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n As others have said you definitely want to call <code>Dispose</code> if the class implements <code>IDisposable</code>. I take a fairly rigid position on this. Some might claim that calling <code>Dispose</code> on <code>DataSet</code>, for example, is pointless because they disassembled it and saw that it did not do anything meaningful. But, I think there are fallacies abound in that argument. Read this for an interesting debate by respected individuals on the subject. Then read my reasoning here why I think Jeffery Richter is in the wrong camp. Now, on to whether or not you should set a reference to <code>null</code>. The answer is no. Let me illustrate my point with the following code. BIGBLOCK So when do you think the object referenced by <code>a</code> is eligible for collection? If you said after the call to <code>a = null</code> then you are wrong. If you said after the <code>Main</code> method completes then you are also wrong. The correct answer is that it is eligible for collection sometime <strong>during</strong> the call to <code>DoSomething</code>. That is right. It is eligible <strong>before</strong> the reference is set to <code>null</code> and perhaps even before the call to <code>DoSomething</code> completes. That is because the JIT compiler can recognize when object references are no longer dereferenced even if they are still rooted.", "output": "Some might claim that calling <code>Dispose</code> on <code>DataSet</code>, for example, is pointless because they disassembled it and saw that it did not do anything meaningful. Let me illustrate my point with the following code. BIGBLOCK So when do you think the object referenced by <code>a</code> is eligible for collection? The correct answer is that it is eligible for collection sometime <strong>during</strong> the call to <code>DoSomething</code>. It is eligible <strong>before</strong> the reference is set to <code>null</code> and perhaps even before the call to <code>DoSomething</code> completes.", "answer": "As others have said you definitely want to call <code>Dispose</code> if the class implements <code>IDisposable</code>. I take a fairly rigid position on this. Some might claim that calling <code>Dispose</code> on <code>DataSet</code>, for example, is pointless because they disassembled it and saw that it did not do anything meaningful. But, I think there are fallacies abound in that argument. Read this for an interesting debate by respected individuals on the subject. Then read my reasoning here why I think Jeffery Richter is in the wrong camp. Now, on to whether or not you should set a reference to <code>null</code>. The answer is no. Let me illustrate my point with the following code. BIGBLOCK So when do you think the object referenced by <code>a</code> is eligible for collection? If you said after the call to <code>a = null</code> then you are wrong. If you said after the <code>Main</code> method completes then you are also wrong. The correct answer is that it is eligible for collection sometime <strong>during</strong> the call to <code>DoSomething</code>. That is right. It is eligible <strong>before</strong> the reference is set to <code>null</code> and perhaps even before the call to <code>DoSomething</code> completes. That is because the JIT compiler can recognize when object references are no longer dereferenced even if they are still rooted.", "summary": "Some might claim that calling <code>Dispose</code> on <code>DataSet</code>, for example, is pointless because they disassembled it and saw that it did not do anything meaningful. Let me illustrate my point with the following code. BIGBLOCK So when do you think the object referenced by <code>a</code> is eligible for collection? The correct answer is that it is eligible for collection sometime <strong>during</strong> the call to <code>DoSomething</code>. It is eligible <strong>before</strong> the reference is set to <code>null</code> and perhaps even before the call to <code>DoSomething</code> completes."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n If you are not into Cygwin, you can use native Windows builds. Some are here: curl Download Wizard.", "output": "If you are not into Cygwin, you can use native Windows builds.", "answer": "If you are not into Cygwin, you can use native Windows builds. Some are here: curl Download Wizard.", "summary": "If you are not into Cygwin, you can use native Windows builds."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Well the first and second queries may yield different results because a LEFT JOIN includes all records from the first table, even if there are no corresponding records in the right table.", "output": "Well the first and second queries may yield different results because a LEFT JOIN includes all records from the first table, even if there are no corresponding records in the right table.", "answer": "Well the first and second queries may yield different results because a LEFT JOIN includes all records from the first table, even if there are no corresponding records in the right table.", "summary": "Well the first and second queries may yield different results because a LEFT JOIN includes all records from the first table, even if there are no corresponding records in the right table."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n I guess you are using an IDE (like Netbeans) which allows you to run the code even if certain classes are not compilable. During the application's runtime, if you access this class it would lead to this exception.", "output": "I guess you are using an IDE (like Netbeans) which allows you to run the code even if certain classes are not compilable. During the application's runtime, if you access this class it would lead to this exception.", "answer": "I guess you are using an IDE (like Netbeans) which allows you to run the code even if certain classes are not compilable. During the application's runtime, if you access this class it would lead to this exception.", "summary": "I guess you are using an IDE (like Netbeans) which allows you to run the code even if certain classes are not compilable. During the application's runtime, if you access this class it would lead to this exception."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Your performance problems are more likely to be because of the number of joins you are doing and whether the columns you are joining on have indexes or not. Worst case you could easily be doing 9 whole table scans for each join.", "output": "Your performance problems are more likely to be because of the number of joins you are doing and whether the columns you are joining on have indexes or not.", "answer": "Your performance problems are more likely to be because of the number of joins you are doing and whether the columns you are joining on have indexes or not. Worst case you could easily be doing 9 whole table scans for each join.", "summary": "Your performance problems are more likely to be because of the number of joins you are doing and whether the columns you are joining on have indexes or not."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n In general it doesn't make sense to allow 'overriding' of static methods as there would be no good way to determine which one to call at runtime. Taking the Employee example, if we call RegularEmployee.getBonusMultiplier() - which method is supposed to be executed? In the case of Java, one could imagine a language definition where it is possible to 'override' static methods as long as they are called through an object instance. However, all this would do is to re-implement regular class methods, adding redundancy to the language without really adding any benefit.", "output": "In general it doesn't make sense to allow 'overriding' of static methods as there would be no good way to determine which one to call at runtime. In the case of Java, one could imagine a language definition where it is possible to 'override' static methods as long as they are called through an object instance. However, all this would do is to re-implement regular class methods, adding redundancy to the language without really adding any benefit.", "answer": "In general it doesn't make sense to allow 'overriding' of static methods as there would be no good way to determine which one to call at runtime. Taking the Employee example, if we call RegularEmployee.getBonusMultiplier() - which method is supposed to be executed? In the case of Java, one could imagine a language definition where it is possible to 'override' static methods as long as they are called through an object instance. However, all this would do is to re-implement regular class methods, adding redundancy to the language without really adding any benefit.", "summary": "In general it doesn't make sense to allow 'overriding' of static methods as there would be no good way to determine which one to call at runtime. In the case of Java, one could imagine a language definition where it is possible to 'override' static methods as long as they are called through an object instance. However, all this would do is to re-implement regular class methods, adding redundancy to the language without really adding any benefit."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n SQL Server uses the <code>Bit</code> datatype", "output": "SQL Server uses the <code>Bit</code> datatype", "answer": "SQL Server uses the <code>Bit</code> datatype", "summary": "SQL Server uses the <code>Bit</code> datatype"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Lambda is a procedure constructor. You can synthesize programs at run-time, although Python's lambda is not very powerful. Note that few people understand that kind of programming.", "output": "You can synthesize programs at run-time, although Python's lambda is not very powerful.", "answer": "Lambda is a procedure constructor. You can synthesize programs at run-time, although Python's lambda is not very powerful. Note that few people understand that kind of programming.", "summary": "You can synthesize programs at run-time, although Python's lambda is not very powerful."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Do what Mehrdad says - or use the url helper from an <code>HtmlHelper</code> extension method like Stephen Walther describes here and make your own extension method which can be used to render all of your links. Then it will be easy to render all links as buttons/anchors or whichever you prefer - and, most importantly, you can change your mind later when you find out that you actually prefer some other way of making your links.", "output": "Do what Mehrdad says - or use the url helper from an <code>HtmlHelper</code> extension method like Stephen Walther describes here and make your own extension method which can be used to render all of your links.", "answer": "Do what Mehrdad says - or use the url helper from an <code>HtmlHelper</code> extension method like Stephen Walther describes here and make your own extension method which can be used to render all of your links. Then it will be easy to render all links as buttons/anchors or whichever you prefer - and, most importantly, you can change your mind later when you find out that you actually prefer some other way of making your links.", "summary": "Do what Mehrdad says - or use the url helper from an <code>HtmlHelper</code> extension method like Stephen Walther describes here and make your own extension method which can be used to render all of your links."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n In MySQL you can do this: BIGBLOCK Does SQL Server have anything similar?", "output": "In MySQL you can do this: BIGBLOCK", "answer": "In MySQL you can do this: BIGBLOCK Does SQL Server have anything similar?", "summary": "In MySQL you can do this: BIGBLOCK"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n It is a possible security risk, it has a different scope of execution, and is quite inefficient, as it creates an entirely new scripting environment for the execution of the code. See here for some more info: eval. It is quite useful, though, and used with moderation can add a lot of good functionality.", "output": "It is a possible security risk, it has a different scope of execution, and is quite inefficient, as it creates an entirely new scripting environment for the execution of the code.", "answer": "It is a possible security risk, it has a different scope of execution, and is quite inefficient, as it creates an entirely new scripting environment for the execution of the code. See here for some more info: eval. It is quite useful, though, and used with moderation can add a lot of good functionality.", "summary": "It is a possible security risk, it has a different scope of execution, and is quite inefficient, as it creates an entirely new scripting environment for the execution of the code."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n You can change the width and height to be 100%, but it won't cover the browser chrome or the OS shell. Design decision is because HTML lives inside the browser window. Flash plugins aren't inside the window, so they can go full screen. This makes sense, otherwise you could make img tags that covered the shell, or make h1 tags so the whole screen was a letter.", "output": "You can change the width and height to be 100%, but it won't cover the browser chrome or the OS shell. Flash plugins aren't inside the window, so they can go full screen.", "answer": "You can change the width and height to be 100%, but it won't cover the browser chrome or the OS shell. Design decision is because HTML lives inside the browser window. Flash plugins aren't inside the window, so they can go full screen. This makes sense, otherwise you could make img tags that covered the shell, or make h1 tags so the whole screen was a letter.", "summary": "You can change the width and height to be 100%, but it won't cover the browser chrome or the OS shell. Flash plugins aren't inside the window, so they can go full screen."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Obviously you can add utility methods to add/remove children.", "output": "Obviously you can add utility methods to add/remove children.", "answer": "Obviously you can add utility methods to add/remove children.", "summary": "Obviously you can add utility methods to add/remove children."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n What OS and CPU are you using? If you are using a 32-bit OS, then a process on your system physically cannot address more than 4GB of memory. Since most text editors try to load the entire file into memory, I doubt you'll find one that will do what you want. It would have to be a very fancy text editor, that can do out-of-core processing, i. e. load a chunk of the file at a time. You may be able to load such a huge file with if you use a 64-bit text editor on a computer with a 64-bit CPU and a 64-bit operating system. And you have to make sure that you have enough space in your swap partition or your swap file.", "output": "If you are using a 32-bit OS, then a process on your system physically cannot address more than 4GB of memory. You may be able to load such a huge file with if you use a 64-bit text editor on a computer with a 64-bit CPU and a 64-bit operating system.", "answer": "What OS and CPU are you using? If you are using a 32-bit OS, then a process on your system physically cannot address more than 4GB of memory. Since most text editors try to load the entire file into memory, I doubt you'll find one that will do what you want. It would have to be a very fancy text editor, that can do out-of-core processing, i. e. load a chunk of the file at a time. You may be able to load such a huge file with if you use a 64-bit text editor on a computer with a 64-bit CPU and a 64-bit operating system. And you have to make sure that you have enough space in your swap partition or your swap file.", "summary": "If you are using a 32-bit OS, then a process on your system physically cannot address more than 4GB of memory. You may be able to load such a huge file with if you use a 64-bit text editor on a computer with a 64-bit CPU and a 64-bit operating system."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n IntelliJ has intellisense and refactoring support from code into jspx documents.", "output": "IntelliJ has intellisense and refactoring support from code into jspx documents.", "answer": "IntelliJ has intellisense and refactoring support from code into jspx documents.", "summary": "IntelliJ has intellisense and refactoring support from code into jspx documents."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n <strong>2016 Update</strong> Use the Sharing Debugger to figure out what your problems are. Make sure you're following the Facebook Sharing Best Practices. Make sure you're using the Open Graph Markup correctly. <strong>Original Answer</strong> I agree with what has already been said here, but per documentation on the Facebook developer site, you might want to use the following meta tags. BIGBLOCK If you are not able to accomplish your goal with meta tags and you need a URL embedded version, see @Lelis718's answer below.", "output": "Use the Sharing Debugger to figure out what your problems are. Make sure you're following the Facebook Sharing Best Practices. Make sure you're using the Open Graph Markup correctly. I agree with what has already been said here, but per documentation on the Facebook developer site, you might want to use the following meta tags. BIGBLOCK", "answer": "<strong>2016 Update</strong> Use the Sharing Debugger to figure out what your problems are. Make sure you're following the Facebook Sharing Best Practices. Make sure you're using the Open Graph Markup correctly. <strong>Original Answer</strong> I agree with what has already been said here, but per documentation on the Facebook developer site, you might want to use the following meta tags. BIGBLOCK If you are not able to accomplish your goal with meta tags and you need a URL embedded version, see @Lelis718's answer below.", "summary": "Use the Sharing Debugger to figure out what your problems are. Make sure you're following the Facebook Sharing Best Practices. Make sure you're using the Open Graph Markup correctly. I agree with what has already been said here, but per documentation on the Facebook developer site, you might want to use the following meta tags. BIGBLOCK"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n The singleton pattern is not a problem in itself. The problem is that the pattern is often used by people developing software with object-oriented tools without having a solid grasp of OO concepts. When singletons are introduced in this context they tend to grow into unmanageable classes that contain helper methods for every little use. Singletons are also a problem from a testing perspective. They tend to make isolated unit-tests difficult to write. Inversion of control (IoC) and dependency injection are patterns meant to overcome this problem in an object-oriented manner that lends itself to unit testing. In a garbage collected environment singletons can quickly become an issue with regard to memory management. There is also the multi-threaded scenario where singletons can become a bottleneck as well as a synchronization issue.", "output": "When singletons are introduced in this context they tend to grow into unmanageable classes that contain helper methods for every little use. Singletons are also a problem from a testing perspective. There is also the multi-threaded scenario where singletons can become a bottleneck as well as a synchronization issue.", "answer": "The singleton pattern is not a problem in itself. The problem is that the pattern is often used by people developing software with object-oriented tools without having a solid grasp of OO concepts. When singletons are introduced in this context they tend to grow into unmanageable classes that contain helper methods for every little use. Singletons are also a problem from a testing perspective. They tend to make isolated unit-tests difficult to write. Inversion of control (IoC) and dependency injection are patterns meant to overcome this problem in an object-oriented manner that lends itself to unit testing. In a garbage collected environment singletons can quickly become an issue with regard to memory management. There is also the multi-threaded scenario where singletons can become a bottleneck as well as a synchronization issue.", "summary": "When singletons are introduced in this context they tend to grow into unmanageable classes that contain helper methods for every little use. Singletons are also a problem from a testing perspective. There is also the multi-threaded scenario where singletons can become a bottleneck as well as a synchronization issue."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n The shortest pair that I could come up with is the following, using Lombok: It has all the benefits of the answer from @arturh (except the comparability), it has <code>hashCode</code>, <code>equals</code>, <code>toString</code> and a static __onstructorÃ¨ÂÂÃ©Â©Â´?", "output": "The shortest pair that I could come up with is the following, using Lombok:", "answer": "The shortest pair that I could come up with is the following, using Lombok: It has all the benefits of the answer from @arturh (except the comparability), it has <code>hashCode</code>, <code>equals</code>, <code>toString</code> and a static __onstructorÃ¨ÂÂÃ©Â©Â´?", "summary": "The shortest pair that I could come up with is the following, using Lombok:"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Here's what I had to do to get this working. This means: <li>Custom UserNamePasswordValidator (no need for a Windows account, SQLServer or ActiveDirectory -- your UserNamePasswordValidator could have username &amp; password hardcoded, or read it from a text file, MySQL or whatever). <li>https <li>IIS7 <li>.net 4.0 My site is managed through DotNetPanel. It has 3 security options for virtual directories: <li>Allow Anonymous Access <li>Enable Basic Authentication <li>Enable Integrated Windows Authentication Only \"Allow Anonymous Access\" is needed (although, that, by itself wasn't enough). Setting BIGBLOCK Didn't make a difference in my case. However, using this binding worked: BIGBLOCK", "output": "My site is managed through DotNetPanel. It has 3 security options for virtual directories: <li>Enable Integrated Windows Authentication However, using this binding worked: BIGBLOCK", "answer": "Here's what I had to do to get this working. This means: <li>Custom UserNamePasswordValidator (no need for a Windows account, SQLServer or ActiveDirectory -- your UserNamePasswordValidator could have username &amp; password hardcoded, or read it from a text file, MySQL or whatever). <li>https <li>IIS7 <li>.net 4.0 My site is managed through DotNetPanel. It has 3 security options for virtual directories: <li>Allow Anonymous Access <li>Enable Basic Authentication <li>Enable Integrated Windows Authentication Only \"Allow Anonymous Access\" is needed (although, that, by itself wasn't enough). Setting BIGBLOCK Didn't make a difference in my case. However, using this binding worked: BIGBLOCK", "summary": "My site is managed through DotNetPanel. It has 3 security options for virtual directories: <li>Enable Integrated Windows Authentication However, using this binding worked: BIGBLOCK"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n You'll have to do some benchmarking. The best algorithm will depend on the distribution of your inputs. Your algorithm may be nearly optimal, but you might want to do a quick check to rule out some possibilities before calling your square root routine. For example, look at the last digit of your number in hex by doing a bit-wise \"and.\" Perfect squares can only end in 0, 1, 4, or 9 in base 16,  So for 75% of your inputs (assuming they are uniformly distributed) you can avoid a call to the square root in exchange for some very fast bit twiddling. Kip benchmarked the following code implementing the hex trick. When testing numbers 1 through 100,000,000, this code ran twice as fast as the original. BIGBLOCK When I tested the analogous code in C++, it actually ran slower than the original. However, when I eliminated the switch statement, the hex trick once again make the code twice as fast. BIGBLOCK Eliminating the switch statement had little effect on the C# code.", "output": "The best algorithm will depend on the distribution of your inputs. Your algorithm may be nearly optimal, but you might want to do a quick check to rule out some possibilities before calling your square root routine.", "answer": "You'll have to do some benchmarking. The best algorithm will depend on the distribution of your inputs. Your algorithm may be nearly optimal, but you might want to do a quick check to rule out some possibilities before calling your square root routine. For example, look at the last digit of your number in hex by doing a bit-wise \"and.\" Perfect squares can only end in 0, 1, 4, or 9 in base 16,  So for 75% of your inputs (assuming they are uniformly distributed) you can avoid a call to the square root in exchange for some very fast bit twiddling. Kip benchmarked the following code implementing the hex trick. When testing numbers 1 through 100,000,000, this code ran twice as fast as the original. BIGBLOCK When I tested the analogous code in C++, it actually ran slower than the original. However, when I eliminated the switch statement, the hex trick once again make the code twice as fast. BIGBLOCK Eliminating the switch statement had little effect on the C# code.", "summary": "The best algorithm will depend on the distribution of your inputs. Your algorithm may be nearly optimal, but you might want to do a quick check to rule out some possibilities before calling your square root routine."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n To be able to call notify() you need to synchronize on the same object. BIGBLOCK", "output": "To be able to call notify() you need to synchronize on the same object. BIGBLOCK", "answer": "To be able to call notify() you need to synchronize on the same object. BIGBLOCK", "summary": "To be able to call notify() you need to synchronize on the same object. BIGBLOCK"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Mutex work on blocking critical region, But Semaphore work on count.", "output": "Mutex work on blocking critical region, But Semaphore work on count.", "answer": "Mutex work on blocking critical region, But Semaphore work on count.", "summary": "Mutex work on blocking critical region, But Semaphore work on count."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n You can use fgets and limit the size of the read string. At your code you can change the while to:", "output": "You can use fgets and limit the size of the read string.", "answer": "You can use fgets and limit the size of the read string. At your code you can change the while to:", "summary": "You can use fgets and limit the size of the read string."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Perl doesn't have a native boolean type, but you can use comparison of integers or strings in order to get the same behavior. Alan's example is a nice way of doing that using comparison of integers. Here's an example BIGBLOCK One thing that I've done in some of my programs is added the same behavior using a constant: BIGBLOCK The lines marked in \"use constant\" define a constant named true that always evaluates to 1, and a constant named false that always evaluates by 0. Because of the way that constants are defined in Perl, the following lines of code fails as well: BIGBLOCK The error message should say something like \"Can't modify constant in scalar assignment.\" I saw that in one of the comments you asked about comparing strings. You should know that because Perl combines strings and numeric types in scalar variables, you have different syntax for comparing strings and numbers: BIGBLOCK The difference between these operators is a very common source of confusion in Perl.", "output": "Perl doesn't have a native boolean type, but you can use comparison of integers or strings in order to get the same behavior. Alan's example is a nice way of doing that using comparison of integers. One thing that I've done in some of my programs is added the same behavior using a constant: BIGBLOCK I saw that in one of the comments you asked about comparing strings. You should know that because Perl combines strings and numeric types in scalar variables, you have different syntax for comparing strings and numbers: BIGBLOCK", "answer": "Perl doesn't have a native boolean type, but you can use comparison of integers or strings in order to get the same behavior. Alan's example is a nice way of doing that using comparison of integers. Here's an example BIGBLOCK One thing that I've done in some of my programs is added the same behavior using a constant: BIGBLOCK The lines marked in \"use constant\" define a constant named true that always evaluates to 1, and a constant named false that always evaluates by 0. Because of the way that constants are defined in Perl, the following lines of code fails as well: BIGBLOCK The error message should say something like \"Can't modify constant in scalar assignment.\" I saw that in one of the comments you asked about comparing strings. You should know that because Perl combines strings and numeric types in scalar variables, you have different syntax for comparing strings and numbers: BIGBLOCK The difference between these operators is a very common source of confusion in Perl.", "summary": "Perl doesn't have a native boolean type, but you can use comparison of integers or strings in order to get the same behavior. Alan's example is a nice way of doing that using comparison of integers. One thing that I've done in some of my programs is added the same behavior using a constant: BIGBLOCK I saw that in one of the comments you asked about comparing strings. You should know that because Perl combines strings and numeric types in scalar variables, you have different syntax for comparing strings and numbers: BIGBLOCK"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n EDIT: Quick note, this is almost certainly confusing Big O notation (which is an upper bound) with Theta notation (which is both an upper and lower bound). In my experience this is actually typical of discussions in non-academic settings. Apologies for any confusion caused. In one sentence: As the size of your job goes up, how much longer does it take to complete it? Obviously that's only using \"size\" as the input and \"time taken\" as the output &mdash; the same idea applies if you want to talk about memory usage etc. Here's an example where we have N T-shirts which we want to dry. We'll <em>assume</em> it's incredibly quick to get them in the drying position (i.e. the human interaction is negligible). That's not the case in real life, of course... <li>Using a washing line outside: assuming you have an infinitely large back yard, washing dries in O(1) time. However much you have of it, it'll get the same sun and fresh air, so the size doesn't affect the drying time. <li>Using a tumble dryer: you put 10 shirts in each load, and then they're done an hour later. (Ignore the actual numbers here &mdash; they're irrelevant.) So drying 50 shirts takes <em>about</em> 5 times as long as drying 10 shirts. <li>Putting everything in an airing cupboard: If we put everything in one big pile and just let general warmth do it, it will take a long time for the middle shirts to get dry. I wouldn't like to guess at the detail, but I suspect this is at least O(N^2) &mdash; as you increase the wash load, the drying time increases faster. One important aspect of \"big O\" notation is that it <em>doesn't</em> say which algorithm will be faster for a given size. Take a hashtable (string key, integer value)  vs an array of pairs (string, integer). Is it faster to find a key in the hashtable or an element in the array, based on a string? (i.e. for the array, \"find the first element where the string part matches the given key.\") Hashtables are generally amortised (~= \"on average\") O(1) &mdash; once they're set up, it should take about the same time to find an entry in a 100 entry table as in a 1,000,000 entry table. Finding an element in an array (based on content rather than index) is linear, i.e. O(N) &mdash; on average, you're going to have to look at half the entries. Does this make a hashtable faster than an array for lookups? Not necessarily. If you've got a very small collection of entries, an array may well be faster &mdash; you may be able to check all the strings in the time that it takes to just calculate the hashcode of the one you're looking at. As the data set grows larger, however, the hashtable will eventually beat the array.", "output": "In one sentence: As the size of your job goes up, how much longer does it take to complete it? One important aspect of \"big O\" notation is that it <em>doesn't</em> say which algorithm will be faster for a given size.", "answer": "EDIT: Quick note, this is almost certainly confusing Big O notation (which is an upper bound) with Theta notation (which is both an upper and lower bound). In my experience this is actually typical of discussions in non-academic settings. Apologies for any confusion caused. In one sentence: As the size of your job goes up, how much longer does it take to complete it? Obviously that's only using \"size\" as the input and \"time taken\" as the output &mdash; the same idea applies if you want to talk about memory usage etc. Here's an example where we have N T-shirts which we want to dry. We'll <em>assume</em> it's incredibly quick to get them in the drying position (i.e. the human interaction is negligible). That's not the case in real life, of course... <li>Using a washing line outside: assuming you have an infinitely large back yard, washing dries in O(1) time. However much you have of it, it'll get the same sun and fresh air, so the size doesn't affect the drying time. <li>Using a tumble dryer: you put 10 shirts in each load, and then they're done an hour later. (Ignore the actual numbers here &mdash; they're irrelevant.) So drying 50 shirts takes <em>about</em> 5 times as long as drying 10 shirts. <li>Putting everything in an airing cupboard: If we put everything in one big pile and just let general warmth do it, it will take a long time for the middle shirts to get dry. I wouldn't like to guess at the detail, but I suspect this is at least O(N^2) &mdash; as you increase the wash load, the drying time increases faster. One important aspect of \"big O\" notation is that it <em>doesn't</em> say which algorithm will be faster for a given size. Take a hashtable (string key, integer value)  vs an array of pairs (string, integer). Is it faster to find a key in the hashtable or an element in the array, based on a string? (i.e. for the array, \"find the first element where the string part matches the given key.\") Hashtables are generally amortised (~= \"on average\") O(1) &mdash; once they're set up, it should take about the same time to find an entry in a 100 entry table as in a 1,000,000 entry table. Finding an element in an array (based on content rather than index) is linear, i.e. O(N) &mdash; on average, you're going to have to look at half the entries. Does this make a hashtable faster than an array for lookups? Not necessarily. If you've got a very small collection of entries, an array may well be faster &mdash; you may be able to check all the strings in the time that it takes to just calculate the hashcode of the one you're looking at. As the data set grows larger, however, the hashtable will eventually beat the array.", "summary": "In one sentence: As the size of your job goes up, how much longer does it take to complete it? One important aspect of \"big O\" notation is that it <em>doesn't</em> say which algorithm will be faster for a given size."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n It worked for me. Here is my test code. Test run follows:", "output": "It worked for me.", "answer": "It worked for me. Here is my test code. Test run follows:", "summary": "It worked for me."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n It is the directory from where you start the batch file. E.g. if your batch is in <code>c:\\dir1\\dir2</code> and you do <code>cd c:\\dir3</code>, then run the batch, the current directory will be <code>c:\\dir3</code>.", "output": "It is the directory from where you start the batch file.", "answer": "It is the directory from where you start the batch file. E.g. if your batch is in <code>c:\\dir1\\dir2</code> and you do <code>cd c:\\dir3</code>, then run the batch, the current directory will be <code>c:\\dir3</code>.", "summary": "It is the directory from where you start the batch file."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n If you happen to be using Java, the built-in method <code>Integer.bitCount</code> will do that.", "output": "If you happen to be using Java, the built-in method <code>Integer.bitCount</code> will do that.", "answer": "If you happen to be using Java, the built-in method <code>Integer.bitCount</code> will do that.", "summary": "If you happen to be using Java, the built-in method <code>Integer.bitCount</code> will do that."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n 'ShallowCopy' points to the same location in memory as 'Source' does. 'DeepCopy' points to a different location in memory, but the contents are the same.", "output": "'ShallowCopy' points to the same location in memory as 'Source' does. 'DeepCopy' points to a different location in memory, but the contents are the same.", "answer": "'ShallowCopy' points to the same location in memory as 'Source' does. 'DeepCopy' points to a different location in memory, but the contents are the same.", "summary": "'ShallowCopy' points to the same location in memory as 'Source' does. 'DeepCopy' points to a different location in memory, but the contents are the same."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n The second is preferred because it is far less likely to result in an accidental cross join by forgetting to put inthe where clause. A join with no on clause will fail the syntax check, an old style join with no where clause will not fail, it will do a cross join. Additionally when you later have to a left join, it is helpful for maintenance that they all be in the same structure. And the old syntax has been out of date since 1992, it is well past time to stop using it. Plus I have found that many people who exclusively use the first syntax don't really understand joins and understanding joins is critical to getting correct results when querying.", "output": "The second is preferred because it is far less likely to result in an accidental cross join by forgetting to put inthe where clause. A join with no on clause will fail the syntax check, an old style join with no where clause will not fail, it will do a cross join.", "answer": "The second is preferred because it is far less likely to result in an accidental cross join by forgetting to put inthe where clause. A join with no on clause will fail the syntax check, an old style join with no where clause will not fail, it will do a cross join. Additionally when you later have to a left join, it is helpful for maintenance that they all be in the same structure. And the old syntax has been out of date since 1992, it is well past time to stop using it. Plus I have found that many people who exclusively use the first syntax don't really understand joins and understanding joins is critical to getting correct results when querying.", "summary": "The second is preferred because it is far less likely to result in an accidental cross join by forgetting to put inthe where clause. A join with no on clause will fail the syntax check, an old style join with no where clause will not fail, it will do a cross join."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n The reason for the <code>using</code> statement is to ensure that the object is disposed as soon as it goes out of scope, and it doesn't require explicit code to ensure that this happens. As in <em>Understanding the 'using' statement in C#</em>, the .NET CLR converts BIGBLOCK to BIGBLOCK", "output": "The reason for the <code>using</code> statement is to ensure that the object is disposed as soon as it goes out of scope, and it doesn't require explicit code to ensure that this happens.", "answer": "The reason for the <code>using</code> statement is to ensure that the object is disposed as soon as it goes out of scope, and it doesn't require explicit code to ensure that this happens. As in <em>Understanding the 'using' statement in C#</em>, the .NET CLR converts BIGBLOCK to BIGBLOCK", "summary": "The reason for the <code>using</code> statement is to ensure that the object is disposed as soon as it goes out of scope, and it doesn't require explicit code to ensure that this happens."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n \"yield\" would come to my mind. Some of the attributes like [DefaultValue()] are also among my favorites. The \"var\" keyword is a bit more known, but that you can use it in .NET 2.0 applications as well (as long as you use the .NET 3.5 compiler and set it to output 2.0 code) does not seem to be known very well. Edit: kokos, thanks for pointing out the ?? operator, that's indeed really useful. Since it's a bit hard to google for it (as ?? is just ignored), here is the MSDN documentation page for that operator: <em>?? Operator (C# Reference)</em>", "output": "\"yield\" would come to my mind. Some of the attributes like [DefaultValue()] are also among my favorites.", "answer": "\"yield\" would come to my mind. Some of the attributes like [DefaultValue()] are also among my favorites. The \"var\" keyword is a bit more known, but that you can use it in .NET 2.0 applications as well (as long as you use the .NET 3.5 compiler and set it to output 2.0 code) does not seem to be known very well. Edit: kokos, thanks for pointing out the ?? operator, that's indeed really useful. Since it's a bit hard to google for it (as ?? is just ignored), here is the MSDN documentation page for that operator: <em>?? Operator (C# Reference)</em>", "summary": "\"yield\" would come to my mind. Some of the attributes like [DefaultValue()] are also among my favorites."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n DefaultValueAttribute ONLY work in the vs designer. It will not initialize the property to that value. See DefaultValue attribute is not working with my Auto Property", "output": "DefaultValueAttribute ONLY work in the vs designer. It will not initialize the property to that value.", "answer": "DefaultValueAttribute ONLY work in the vs designer. It will not initialize the property to that value. See DefaultValue attribute is not working with my Auto Property", "summary": "DefaultValueAttribute ONLY work in the vs designer. It will not initialize the property to that value."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n The thing about margins is that you don't need to worry about the element's width. Like when you give something <code>{padding: 10px;}</code>, you'll have to reduce the width of the element by <strong>20px</strong> to keep the '<strong>fit</strong>' and not disturb other elements around it. So I generally start off by using paddings to get everything '<code>packed</code>' and then use margins for minor tweaks. Another thing to be aware of is that paddings are more consistent on different browsers and IE doesn't treat negative margins very well.", "output": "The thing about margins is that you don't need to worry about the element's width.", "answer": "The thing about margins is that you don't need to worry about the element's width. Like when you give something <code>{padding: 10px;}</code>, you'll have to reduce the width of the element by <strong>20px</strong> to keep the '<strong>fit</strong>' and not disturb other elements around it. So I generally start off by using paddings to get everything '<code>packed</code>' and then use margins for minor tweaks. Another thing to be aware of is that paddings are more consistent on different browsers and IE doesn't treat negative margins very well.", "summary": "The thing about margins is that you don't need to worry about the element's width."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Try <code>TypeFactory</code>. Here's the code for Jackson JSON (2.8.4). BIGBLOCK Here's the code for an older version of Jackson JSON. BIGBLOCK", "output": "Try <code>TypeFactory</code>.", "answer": "Try <code>TypeFactory</code>. Here's the code for Jackson JSON (2.8.4). BIGBLOCK Here's the code for an older version of Jackson JSON. BIGBLOCK", "summary": "Try <code>TypeFactory</code>."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n To answer that question, I'd like to describe member's accessors first in my own words. If you already know this, skip to the heading \"next:\". There are three accessors that I'm aware of: <code>public</code>, <code>protected</code> and <code>private</code>. Let: <li>Everything that is aware of <code>Base</code> is also aware that <code>Base</code> contains <code>publicMember</code>. <li>Only the children (and their children) are aware that <code>Base</code> contains <code>protectedMember</code>. <li>No one but <code>Base</code> is aware of <code>privateMember</code>. By \"is aware of\", I mean \"acknowledge the existence of, and thus be able to access\". next: The same happens with public, private and protected inheritance. Let's consider a class <code>Base</code> and a class <code>Child</code> that inherits from <code>Base</code>. <li>If the inheritance is <code>public</code>, everything that is aware of <code>Base</code> and <code>Child</code> is also aware that <code>Child</code> inherits from <code>Base</code>. <li>If the inheritance is <code>protected</code>, only <code>Child</code>, and its children, are aware that they inherit from <code>Base</code>. <li>If the inheritance is <code>private</code>, no one other than <code>Child</code> is aware of the inheritance.", "output": "<li>Everything that is aware of <code>Base</code> is also aware that <code>Base</code> contains <code>publicMember</code>. <li>Only the children (and their children) are aware that <code>Base</code> contains <code>protectedMember</code>. <li>No one but <code>Base</code> is aware of <code>privateMember</code>.", "answer": "To answer that question, I'd like to describe member's accessors first in my own words. If you already know this, skip to the heading \"next:\". There are three accessors that I'm aware of: <code>public</code>, <code>protected</code> and <code>private</code>. Let: <li>Everything that is aware of <code>Base</code> is also aware that <code>Base</code> contains <code>publicMember</code>. <li>Only the children (and their children) are aware that <code>Base</code> contains <code>protectedMember</code>. <li>No one but <code>Base</code> is aware of <code>privateMember</code>. By \"is aware of\", I mean \"acknowledge the existence of, and thus be able to access\". next: The same happens with public, private and protected inheritance. Let's consider a class <code>Base</code> and a class <code>Child</code> that inherits from <code>Base</code>. <li>If the inheritance is <code>public</code>, everything that is aware of <code>Base</code> and <code>Child</code> is also aware that <code>Child</code> inherits from <code>Base</code>. <li>If the inheritance is <code>protected</code>, only <code>Child</code>, and its children, are aware that they inherit from <code>Base</code>. <li>If the inheritance is <code>private</code>, no one other than <code>Child</code> is aware of the inheritance.", "summary": "<li>Everything that is aware of <code>Base</code> is also aware that <code>Base</code> contains <code>publicMember</code>. <li>Only the children (and their children) are aware that <code>Base</code> contains <code>protectedMember</code>. <li>No one but <code>Base</code> is aware of <code>privateMember</code>."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n When you face the following issue: PHP throwing error \"Warning: mysql_connect() http://function.mysql-connect: 2002 No such file or directory (trying to connect via unix:///tmp/mysql.sock)\" Set \"mysql.default_socket\" value in your <code>/etc/php.ini</code> to Then restart web service in server admin", "output": "Set \"mysql.default_socket\" value in your <code>/etc/php.ini</code> to Then restart web service in server admin", "answer": "When you face the following issue: PHP throwing error \"Warning: mysql_connect() http://function.mysql-connect: 2002 No such file or directory (trying to connect via unix:///tmp/mysql.sock)\" Set \"mysql.default_socket\" value in your <code>/etc/php.ini</code> to Then restart web service in server admin", "summary": "Set \"mysql.default_socket\" value in your <code>/etc/php.ini</code> to Then restart web service in server admin"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Select the range of cells, type in the value and press Ctrl+Enter. This, of course, is true if you want to do it manually. If you want to do it in code, please, be more specific, what do you use.", "output": "Select the range of cells, type in the value and press Ctrl+Enter.", "answer": "Select the range of cells, type in the value and press Ctrl+Enter. This, of course, is true if you want to do it manually. If you want to do it in code, please, be more specific, what do you use.", "summary": "Select the range of cells, type in the value and press Ctrl+Enter."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Here's yet another answer, from another duplicate question: This magic number method performs slightly faster than the DATEADD method. (It looks like ~10%) The CPU Time on several rounds of a million records: But note that these numbers are possibly irrelevant because they are already VERY fast. Unless I had record sets of 100,000 or more, I couldn't even get the CPU Time to read above zero. Considering the fact that DateAdd is meant for this purpose and is more robust, I'd say use DateAdd.", "output": "This magic number method performs slightly faster than the DATEADD method. Considering the fact that DateAdd is meant for this purpose and is more robust, I'd say use DateAdd.", "answer": "Here's yet another answer, from another duplicate question: This magic number method performs slightly faster than the DATEADD method. (It looks like ~10%) The CPU Time on several rounds of a million records: But note that these numbers are possibly irrelevant because they are already VERY fast. Unless I had record sets of 100,000 or more, I couldn't even get the CPU Time to read above zero. Considering the fact that DateAdd is meant for this purpose and is more robust, I'd say use DateAdd.", "summary": "This magic number method performs slightly faster than the DATEADD method. Considering the fact that DateAdd is meant for this purpose and is more robust, I'd say use DateAdd."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Objective-C doesn't have named parameters, so everything on the left side of a colon is part of the method name. For example, BIGBLOCK is the name of the method. The name is broken up so it can be more descriptive. You could simply name your method BIGBLOCK but that doesn't tell you much about the second parameter.", "output": "Objective-C doesn't have named parameters, so everything on the left side of a colon is part of the method name.", "answer": "Objective-C doesn't have named parameters, so everything on the left side of a colon is part of the method name. For example, BIGBLOCK is the name of the method. The name is broken up so it can be more descriptive. You could simply name your method BIGBLOCK but that doesn't tell you much about the second parameter.", "summary": "Objective-C doesn't have named parameters, so everything on the left side of a colon is part of the method name."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n You can use the sp_columns stored procedure:", "output": "You can use the sp_columns stored procedure:", "answer": "You can use the sp_columns stored procedure:", "summary": "You can use the sp_columns stored procedure:"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n The problem is that you are trying to access a collection in an object that is detached. You need to re-attach the object before accessing the collection to the current session. You can do that through Using <code>lazy=false</code> is not a good solution because you are throwing away the Lazy Initialization  feature of hibernate. When <code>lazy=false</code>, the collection is loaded in memory at the same time that the object is requested. This means that if we have a collection with 1000 items, they all will be loaded in memory, despite we are going to access them or not. And this is not good. Please read this article where it explains the problem, the possible solutions and why is implemented this way. Also, to understand Sessions and Transactions you must read this other article.", "output": "The problem is that you are trying to access a collection in an object that is detached. You need to re-attach the object before accessing the collection to the current session. You can do that through", "answer": "The problem is that you are trying to access a collection in an object that is detached. You need to re-attach the object before accessing the collection to the current session. You can do that through Using <code>lazy=false</code> is not a good solution because you are throwing away the Lazy Initialization  feature of hibernate. When <code>lazy=false</code>, the collection is loaded in memory at the same time that the object is requested. This means that if we have a collection with 1000 items, they all will be loaded in memory, despite we are going to access them or not. And this is not good. Please read this article where it explains the problem, the possible solutions and why is implemented this way. Also, to understand Sessions and Transactions you must read this other article.", "summary": "The problem is that you are trying to access a collection in an object that is detached. You need to re-attach the object before accessing the collection to the current session. You can do that through"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Use the following: This will leave your current branch as is, create and checkout a new branch and keep all your changes. You can then make a commit with: and commit to your new branch with: The changes in the working directory and changes staged in index do not belong to any branch yet. This changes where those changes would end in. You don't reset your original branch, it stays as it is. The last commit on <code>&lt;old-branch&gt;</code> will still be the same. Therefore you <code>checkout -b</code> and then commit.", "output": "Use the following:", "answer": "Use the following: This will leave your current branch as is, create and checkout a new branch and keep all your changes. You can then make a commit with: and commit to your new branch with: The changes in the working directory and changes staged in index do not belong to any branch yet. This changes where those changes would end in. You don't reset your original branch, it stays as it is. The last commit on <code>&lt;old-branch&gt;</code> will still be the same. Therefore you <code>checkout -b</code> and then commit.", "summary": "Use the following:"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n <code>wait</code> is defined in <code>Object</code>, and not it <code>Thread</code>. The monitor on <code>Thread</code> is a little unpredictable. Although all Java objects have monitors, it is generally better to have a dedicated lock: You can get slightly easier to read diagnostics, at a small memory cost (about 2K per process) by using a named class: In order to <code>wait</code> or <code>notify</code>/<code>notifyAll</code> an object, you need to be holding the lock with the <code>synchronized</code> statement. Also, you will need a <code>while</code> loop to check for the wakeup condition (find a good text on threading to explain why). To notify: It is well worth getting to understand both Java language and <code>java.util.concurrent.locks</code> locks (and <code>java.util.concurrent.atomic</code>) when getting into multithreading. But use <code>java.util.concurrent</code> data structures whenever you can.", "output": "In order to <code>wait</code> or <code>notify</code>/<code>notifyAll</code> an object, you need to be holding the lock with the <code>synchronized</code> statement. Also, you will need a <code>while</code> loop to check for the wakeup condition (find a good text on threading to explain why).", "answer": "<code>wait</code> is defined in <code>Object</code>, and not it <code>Thread</code>. The monitor on <code>Thread</code> is a little unpredictable. Although all Java objects have monitors, it is generally better to have a dedicated lock: You can get slightly easier to read diagnostics, at a small memory cost (about 2K per process) by using a named class: In order to <code>wait</code> or <code>notify</code>/<code>notifyAll</code> an object, you need to be holding the lock with the <code>synchronized</code> statement. Also, you will need a <code>while</code> loop to check for the wakeup condition (find a good text on threading to explain why). To notify: It is well worth getting to understand both Java language and <code>java.util.concurrent.locks</code> locks (and <code>java.util.concurrent.atomic</code>) when getting into multithreading. But use <code>java.util.concurrent</code> data structures whenever you can.", "summary": "In order to <code>wait</code> or <code>notify</code>/<code>notifyAll</code> an object, you need to be holding the lock with the <code>synchronized</code> statement. Also, you will need a <code>while</code> loop to check for the wakeup condition (find a good text on threading to explain why)."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Mod just means you take the remainder after performing the division. Since 4 goes into 2 zero times, you end up with a remainder of 2.", "output": "Since 4 goes into 2 zero times, you end up with a remainder of 2.", "answer": "Mod just means you take the remainder after performing the division. Since 4 goes into 2 zero times, you end up with a remainder of 2.", "summary": "Since 4 goes into 2 zero times, you end up with a remainder of 2."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n The usage of <code>--&gt;</code> has historical relevance. Decrementing was (and still is in some cases), faster than incrementing on the x86 architecture. Using <code>--&gt;</code> suggests that <code>x</code> is going to <code>0</code>, and appeals to those with mathematical backgrounds.", "output": "The usage of <code>--&gt;</code> has historical relevance. Decrementing was (and still is in some cases), faster than incrementing on the x86 architecture.", "answer": "The usage of <code>--&gt;</code> has historical relevance. Decrementing was (and still is in some cases), faster than incrementing on the x86 architecture. Using <code>--&gt;</code> suggests that <code>x</code> is going to <code>0</code>, and appeals to those with mathematical backgrounds.", "summary": "The usage of <code>--&gt;</code> has historical relevance. Decrementing was (and still is in some cases), faster than incrementing on the x86 architecture."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Brute force method BIGBLOCK This will create a script that you could execute on the database. BIGBLOCK etc.", "output": "Brute force method BIGBLOCK", "answer": "Brute force method BIGBLOCK This will create a script that you could execute on the database. BIGBLOCK etc.", "summary": "Brute force method BIGBLOCK"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n From Python v2.7.14 documentation - 18.1.11. email: Examples: HereÃ©ÂÂ¥Ã¦ÂªÂ an example of how to create an HTML message with an alternative plain text version: BIGBLOCK", "output": "HereÃ©ÂÂ¥Ã¦ÂªÂ an example of how to create an HTML message with an alternative plain text version: BIGBLOCK", "answer": "From Python v2.7.14 documentation - 18.1.11. email: Examples: HereÃ©ÂÂ¥Ã¦ÂªÂ an example of how to create an HTML message with an alternative plain text version: BIGBLOCK", "summary": "HereÃ©ÂÂ¥Ã¦ÂªÂ an example of how to create an HTML message with an alternative plain text version: BIGBLOCK"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n you're getting that poor transition because you're adjusting the position of the element every time the document is scrolled. What you want is to use fixed positioning. I tried that fixed center plugin listed above and that seems to do solve the problem nicely. Fixed positioning allows you to center an element once, and the CSS property will take care of maintaining that position for you every time you scroll.", "output": "I tried that fixed center plugin listed above and that seems to do solve the problem nicely.", "answer": "you're getting that poor transition because you're adjusting the position of the element every time the document is scrolled. What you want is to use fixed positioning. I tried that fixed center plugin listed above and that seems to do solve the problem nicely. Fixed positioning allows you to center an element once, and the CSS property will take care of maintaining that position for you every time you scroll.", "summary": "I tried that fixed center plugin listed above and that seems to do solve the problem nicely."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n In modern browsers (IE9+, FF4+, Chrome5+, Opera12+, Safari5+) you can use the built in Object.keys method: The above has a full polyfill but a simplified version is: Alternatively replace <code>var getKeys</code> with <code>Object.prototype.keys</code> to allow you to call <code>.keys()</code> on any object. Extending the prototype has some side effects and I wouldn't recommend doing it.", "output": "In modern browsers (IE9+, FF4+, Chrome5+, Opera12+, Safari5+) you can use the built in Object.keys method: Alternatively replace <code>var getKeys</code> with <code>Object.prototype.keys</code> to allow you to call <code>.keys()</code> on any object.", "answer": "In modern browsers (IE9+, FF4+, Chrome5+, Opera12+, Safari5+) you can use the built in Object.keys method: The above has a full polyfill but a simplified version is: Alternatively replace <code>var getKeys</code> with <code>Object.prototype.keys</code> to allow you to call <code>.keys()</code> on any object. Extending the prototype has some side effects and I wouldn't recommend doing it.", "summary": "In modern browsers (IE9+, FF4+, Chrome5+, Opera12+, Safari5+) you can use the built in Object.keys method: Alternatively replace <code>var getKeys</code> with <code>Object.prototype.keys</code> to allow you to call <code>.keys()</code> on any object."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Literal Answer -- warning, performance may not be as good as just using an <code>int</code> to track the index. At least it is better than using <code>IndexOf</code>. You just need to use the indexing overload of Select to wrap each item in the collection with an anonymous object that knows the index. This can be done against anything that implements IEnumerable.", "output": "Literal Answer -- warning, performance may not be as good as just using an <code>int</code> to track the index. You just need to use the indexing overload of Select to wrap each item in the collection with an anonymous object that knows the index.", "answer": "Literal Answer -- warning, performance may not be as good as just using an <code>int</code> to track the index. At least it is better than using <code>IndexOf</code>. You just need to use the indexing overload of Select to wrap each item in the collection with an anonymous object that knows the index. This can be done against anything that implements IEnumerable.", "summary": "Literal Answer -- warning, performance may not be as good as just using an <code>int</code> to track the index. You just need to use the indexing overload of Select to wrap each item in the collection with an anonymous object that knows the index."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n DOS has a few special files (devices, actually) that exist in every directory, <code>NUL</code> being the equivalent of UNIX's <code>/dev/null</code>: it's a magic file that's always empty and throws away anything you write to it. Here's a list of some others; <code>CON</code> is occasionally useful as well. To avoid having any output at all, you can use <code>/y</code> prevents <code>copy</code> from asking a question you can't see when output goes to <code>NUL</code>.", "output": "To avoid having any output at all, you can use", "answer": "DOS has a few special files (devices, actually) that exist in every directory, <code>NUL</code> being the equivalent of UNIX's <code>/dev/null</code>: it's a magic file that's always empty and throws away anything you write to it. Here's a list of some others; <code>CON</code> is occasionally useful as well. To avoid having any output at all, you can use <code>/y</code> prevents <code>copy</code> from asking a question you can't see when output goes to <code>NUL</code>.", "summary": "To avoid having any output at all, you can use"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n This was my solution to the problem. Of course, many things can cause it to occur. For me it was that Maven2 (not the plugin for Eclipse) was setting the eclipse profile up to use a different builder (aspectJ) but I did not have the plugin in eclipse./ http://rbtech.blogspot.com/2009/09/eclipse-galileo-javalangclassnotfoundex.html Cheers Ramon Buckland", "output": "For me it was that Maven2 (not the plugin for Eclipse) was setting the eclipse profile up to use a different builder (aspectJ) but I did not have the plugin in eclipse./", "answer": "This was my solution to the problem. Of course, many things can cause it to occur. For me it was that Maven2 (not the plugin for Eclipse) was setting the eclipse profile up to use a different builder (aspectJ) but I did not have the plugin in eclipse./ http://rbtech.blogspot.com/2009/09/eclipse-galileo-javalangclassnotfoundex.html Cheers Ramon Buckland", "summary": "For me it was that Maven2 (not the plugin for Eclipse) was setting the eclipse profile up to use a different builder (aspectJ) but I did not have the plugin in eclipse./"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n According to http://www.php.net/manual/en/language.oop5.static.php there is no <code>$self</code>. There is only <code>$this</code>, for referring to the current instance of the class (the object), and self, which can be used to refer to static members of a class. The difference between an object instance and a class comes into play here.", "output": "According to http://www.php.net/manual/en/language.oop5.static.php there is no <code>$self</code>.", "answer": "According to http://www.php.net/manual/en/language.oop5.static.php there is no <code>$self</code>. There is only <code>$this</code>, for referring to the current instance of the class (the object), and self, which can be used to refer to static members of a class. The difference between an object instance and a class comes into play here.", "summary": "According to http://www.php.net/manual/en/language.oop5.static.php there is no <code>$self</code>."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n If you are using TortoiseSVN, right-click on a file and then select TortoiseSVN / Add to ignore list. This will add the file/wildcard to the <code>svn:ignore</code> property. <code>svn:ignore</code> will be checked when you are checking in files, and matching files will be ignored. I have the following ignore list for a Visual Studio .NET project: You can find this list in the context menu at TortoiseSVN / Properties.", "output": "<code>svn:ignore</code> will be checked when you are checking in files, and matching files will be ignored.", "answer": "If you are using TortoiseSVN, right-click on a file and then select TortoiseSVN / Add to ignore list. This will add the file/wildcard to the <code>svn:ignore</code> property. <code>svn:ignore</code> will be checked when you are checking in files, and matching files will be ignored. I have the following ignore list for a Visual Studio .NET project: You can find this list in the context menu at TortoiseSVN / Properties.", "summary": "<code>svn:ignore</code> will be checked when you are checking in files, and matching files will be ignored."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n <li>gFTP <li>Konqueror's fish kio-slave (just write as file path: ssh://user@server/path", "output": "<li>gFTP <li>Konqueror's fish kio-slave (just write as file path: ssh://user@server/path", "answer": "<li>gFTP <li>Konqueror's fish kio-slave (just write as file path: ssh://user@server/path", "summary": "<li>gFTP <li>Konqueror's fish kio-slave (just write as file path: ssh://user@server/path"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Classes, Structures, Collections and Arrays can contain multiple values. Output and reference parameters can also be set in a function. Return multiple values is possible in dynamic and functional languages by means of tuples, but not in C#.", "output": "Classes, Structures, Collections and Arrays can contain multiple values. Output and reference parameters can also be set in a function.", "answer": "Classes, Structures, Collections and Arrays can contain multiple values. Output and reference parameters can also be set in a function. Return multiple values is possible in dynamic and functional languages by means of tuples, but not in C#.", "summary": "Classes, Structures, Collections and Arrays can contain multiple values. Output and reference parameters can also be set in a function."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n We use this stored procedure - it allows you to target specific tables, and use where clauses. You can find the text here. For example, it lets you do this:", "output": "We use this stored procedure - it allows you to target specific tables, and use where clauses.", "answer": "We use this stored procedure - it allows you to target specific tables, and use where clauses. You can find the text here. For example, it lets you do this:", "summary": "We use this stored procedure - it allows you to target specific tables, and use where clauses."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n OK, here's a hokey solution, but I just can't figure out how to get Excel to evaluate a column of URLs as hyperlinks in bulk. Create a formula, <code>=\"=hyperlink(\"\"\" &amp; A1 &amp; \"\"\")\"</code> Drag down Copy new formula column Paste Special Values-only over the original column Highlight column, click Ctrl-H (to replace), finding and replacing <code>=</code> with <code>=</code> (somehow forces re-evaluation of cells). Cells should now be clickable as hyperlinks. If you want the blue/underline style, then just highlight all cells and choose the Hyperlink style. The hyperlink style alone won't convert to clickable links, and the \"Insert Hyperlink\" dialog can't seem to use the text as the address for a bunch of cells in bulk. Aside from that, F2 and Enter through all cells would do it, but that's tedious for a lot of cells.", "output": "OK, here's a hokey solution, but I just can't figure out how to get Excel to evaluate a column of URLs as hyperlinks in bulk.", "answer": "OK, here's a hokey solution, but I just can't figure out how to get Excel to evaluate a column of URLs as hyperlinks in bulk. Create a formula, <code>=\"=hyperlink(\"\"\" &amp; A1 &amp; \"\"\")\"</code> Drag down Copy new formula column Paste Special Values-only over the original column Highlight column, click Ctrl-H (to replace), finding and replacing <code>=</code> with <code>=</code> (somehow forces re-evaluation of cells). Cells should now be clickable as hyperlinks. If you want the blue/underline style, then just highlight all cells and choose the Hyperlink style. The hyperlink style alone won't convert to clickable links, and the \"Insert Hyperlink\" dialog can't seem to use the text as the address for a bunch of cells in bulk. Aside from that, F2 and Enter through all cells would do it, but that's tedious for a lot of cells.", "summary": "OK, here's a hokey solution, but I just can't figure out how to get Excel to evaluate a column of URLs as hyperlinks in bulk."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n The problem with solutions based on sums of numbers is they don't take into account the cost of storing and working with numbers with large exponents... in practice, for it to work for very large n, a big numbers library would be used. We can analyse the space utilisation for these algorithms. We can analyse the time and space complexity of sdcvvc and Dimitris Andreou's algorithms. Storage: BIGBLOCK So <code>l_j \\in \\Theta(j log n)</code> Total storage used: <code>\\sum_{j=1}^k l_j \\in \\Theta(k^2 log n)</code> Space used: assuming that computing <code>a^j</code> takes <code>ceil(log_2 j)</code> time, total time: BIGBLOCK Total time used: <code>\\Theta(kn log n)</code> If this time and space is satisfactory, you can use a simple recursivealgorithm. Let b!i be the ith entry in the bag, n the number of numbers beforeremovals, and k the number of removals. In Haskell syntax... BIGBLOCK Storage used: <code>O(k)</code> for list, <code>O(log(n))</code> for stack: <code>O(k + log(n))</code>This algorithm is more intuitive, has the same time complexity, and uses less space.", "output": "The problem with solutions based on sums of numbers is they don't take into account the cost of storing and working with numbers with large exponents... in practice, for it to work for very large n, a big numbers library would be used. In Haskell syntax... BIGBLOCK Storage used: <code>O(k)</code> for list, <code>O(log(n))</code> for stack: <code>O(k + log(n))</code>This algorithm is more intuitive, has the same time complexity, and uses less space.", "answer": "The problem with solutions based on sums of numbers is they don't take into account the cost of storing and working with numbers with large exponents... in practice, for it to work for very large n, a big numbers library would be used. We can analyse the space utilisation for these algorithms. We can analyse the time and space complexity of sdcvvc and Dimitris Andreou's algorithms. Storage: BIGBLOCK So <code>l_j \\in \\Theta(j log n)</code> Total storage used: <code>\\sum_{j=1}^k l_j \\in \\Theta(k^2 log n)</code> Space used: assuming that computing <code>a^j</code> takes <code>ceil(log_2 j)</code> time, total time: BIGBLOCK Total time used: <code>\\Theta(kn log n)</code> If this time and space is satisfactory, you can use a simple recursivealgorithm. Let b!i be the ith entry in the bag, n the number of numbers beforeremovals, and k the number of removals. In Haskell syntax... BIGBLOCK Storage used: <code>O(k)</code> for list, <code>O(log(n))</code> for stack: <code>O(k + log(n))</code>This algorithm is more intuitive, has the same time complexity, and uses less space.", "summary": "The problem with solutions based on sums of numbers is they don't take into account the cost of storing and working with numbers with large exponents... in practice, for it to work for very large n, a big numbers library would be used. In Haskell syntax... BIGBLOCK Storage used: <code>O(k)</code> for list, <code>O(log(n))</code> for stack: <code>O(k + log(n))</code>This algorithm is more intuitive, has the same time complexity, and uses less space."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n At the PSQL prompt, you can do:", "output": "At the PSQL prompt, you can do:", "answer": "At the PSQL prompt, you can do:", "summary": "At the PSQL prompt, you can do:"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n The closest equivalent to a destructor in Java is the finalize() method. The big difference to a traditional destructor is that you can't be sure when it'll be called, since that's the responsibility of the garbage collector. I'd strongly recommend carefully reading up on this before using it, since your typical RAIA patterns for file handles and so on won't work reliably with finalize().", "output": "The closest equivalent to a destructor in Java is the finalize() method.", "answer": "The closest equivalent to a destructor in Java is the finalize() method. The big difference to a traditional destructor is that you can't be sure when it'll be called, since that's the responsibility of the garbage collector. I'd strongly recommend carefully reading up on this before using it, since your typical RAIA patterns for file handles and so on won't work reliably with finalize().", "summary": "The closest equivalent to a destructor in Java is the finalize() method."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n For me ony granting 'Read' permissions for 'NetworkService' to the whole 'EventLog' branch worked.", "output": "For me ony granting 'Read' permissions for 'NetworkService' to the whole 'EventLog' branch worked.", "answer": "For me ony granting 'Read' permissions for 'NetworkService' to the whole 'EventLog' branch worked.", "summary": "For me ony granting 'Read' permissions for 'NetworkService' to the whole 'EventLog' branch worked."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n The first way is the older standard. The second method was introduced in SQL-92, http://en.wikipedia.org/wiki/SQL. The complete standard can be viewed at http://www.contrib.andrew.cmu.edu/~shadow/sql/sql1992.txt . It took many years before database companies adopted the SQL-92 standard. So the reason why the second method is preferred, it is the SQL standard according the ANSI and ISO standards committee.", "output": "The first way is the older standard. So the reason why the second method is preferred, it is the SQL standard according the ANSI and ISO standards committee.", "answer": "The first way is the older standard. The second method was introduced in SQL-92, http://en.wikipedia.org/wiki/SQL. The complete standard can be viewed at http://www.contrib.andrew.cmu.edu/~shadow/sql/sql1992.txt . It took many years before database companies adopted the SQL-92 standard. So the reason why the second method is preferred, it is the SQL standard according the ANSI and ISO standards committee.", "summary": "The first way is the older standard. So the reason why the second method is preferred, it is the SQL standard according the ANSI and ISO standards committee."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n <code>time.clock()</code> returns the processor time, which allows us to calculate only the time used by this process (on Unix anyway). The documentation says \"in any case, this is the function to use for benchmarking Python or timing algorithms\"", "output": "The documentation says \"in any case, this is the function to use for benchmarking Python or timing algorithms\"", "answer": "<code>time.clock()</code> returns the processor time, which allows us to calculate only the time used by this process (on Unix anyway). The documentation says \"in any case, this is the function to use for benchmarking Python or timing algorithms\"", "summary": "The documentation says \"in any case, this is the function to use for benchmarking Python or timing algorithms\""}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n If you want to simply hide the errors: BIGBLOCK If you specified the <code>errorClass</code>, call that class to hide instead <code>error</code> (the default) I used above.", "output": "If you want to simply hide the errors: BIGBLOCK If you specified the <code>errorClass</code>, call that class to hide instead <code>error</code> (the default) I used above.", "answer": "If you want to simply hide the errors: BIGBLOCK If you specified the <code>errorClass</code>, call that class to hide instead <code>error</code> (the default) I used above.", "summary": "If you want to simply hide the errors: BIGBLOCK If you specified the <code>errorClass</code>, call that class to hide instead <code>error</code> (the default) I used above."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Because not all variables are of a serializable nature", "output": "Because not all variables are of a serializable nature", "answer": "Because not all variables are of a serializable nature", "summary": "Because not all variables are of a serializable nature"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n A smart pointer is like a regular (typed) pointer, like \"char*\", except when the pointer itself goes out of scope then what it points to is deleted as well. You can use it like you would a regular pointer, by using \"->\", but not if you need an actual pointer to the data. For that, you can use \"&amp;*ptr\". It is useful for: Objects that must be allocated with new, but that you'd like to have the same lifetime as something on that stack. If the object is assigned to a smart pointer, then they will be deleted when the program exits that function/block. Data members of classes, so that when the object is deleted all the owned data is deleted as well, without any special code in the destructor (you will need to be sure the destructor is virtual, which is almost always a good thing to do). You may not want to use a smart pointer when: ... the pointer shouldn't actually own the data... i.e., when you are just using the data, but you want it to survive the function where you are referencing it. ... the smart pointer isn't itself going to be destroyed at some point. You don't want it to sit in memory that never gets destroyed (such as in an object that is dynamically allocated but won't be explicitly deleted). ... two smart pointers might point to the same data. (There are, however, even smarter pointers that will handle that... that is called reference counting.) See also: garbage collection. This stack overflow question regarding data ownership", "output": "A smart pointer is like a regular (typed) pointer, like \"char*\", except when the pointer itself goes out of scope then what it points to is deleted as well. You can use it like you would a regular pointer, by using \"->\", but not if you need an actual pointer to the data.", "answer": "A smart pointer is like a regular (typed) pointer, like \"char*\", except when the pointer itself goes out of scope then what it points to is deleted as well. You can use it like you would a regular pointer, by using \"->\", but not if you need an actual pointer to the data. For that, you can use \"&amp;*ptr\". It is useful for: Objects that must be allocated with new, but that you'd like to have the same lifetime as something on that stack. If the object is assigned to a smart pointer, then they will be deleted when the program exits that function/block. Data members of classes, so that when the object is deleted all the owned data is deleted as well, without any special code in the destructor (you will need to be sure the destructor is virtual, which is almost always a good thing to do). You may not want to use a smart pointer when: ... the pointer shouldn't actually own the data... i.e., when you are just using the data, but you want it to survive the function where you are referencing it. ... the smart pointer isn't itself going to be destroyed at some point. You don't want it to sit in memory that never gets destroyed (such as in an object that is dynamically allocated but won't be explicitly deleted). ... two smart pointers might point to the same data. (There are, however, even smarter pointers that will handle that... that is called reference counting.) See also: garbage collection. This stack overflow question regarding data ownership", "summary": "A smart pointer is like a regular (typed) pointer, like \"char*\", except when the pointer itself goes out of scope then what it points to is deleted as well. You can use it like you would a regular pointer, by using \"->\", but not if you need an actual pointer to the data."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n There's no simple answer to this question. Apple's mobile version of WebKit, used in iPhones, iPod Touches, and iPads, will scale the page to fit the screen, at which point the user can zoom in and out freely. That said, you can design your page to minimize the amount of zooming necessary. Your best bet is to make the width and height the same as the lower resolution of the iPad, since you don't know which way it's oriented; in other words, you would make your page 768x768, so that it will fit well on the iPad's screen whether it's oriented to be 1024x768 or 768x1024. More importantly, you'd want to design your page with big controls with lots of space that are easy to hit with your thumbs - you could easily design a 768x768 page that was very cluttered and therefore required lots of zooming. To accomplish this, you'll likely want to divide your controls among a number of web pages. On the other hand, it's not the most worthwhile pursuit. If while designing you find opportunities to make your page more \"finger-friendly\", then go for it...but the reality is that iPad users are very comfortable with moving around and zooming in and out of the page to get to things because it's necessary on most web sites. If anything, you probably want to design it so that it's conducive to this type of navigation. Make boxes with relevant grouped data that can be easily double-tapped to focus on, and keep related controls close to each other. iPad users will most likely appreciate a page that facilitates the familiar zoom-and-pan navigation they're accustomed to more than they will a page that has fewer controls so that they don't have to.", "output": "That said, you can design your page to minimize the amount of zooming necessary. Your best bet is to make the width and height the same as the lower resolution of the iPad, since you don't know which way it's oriented; in other words, you would make your page 768x768, so that it will fit well on the iPad's screen whether it's oriented to be 1024x768 or 768x1024. To accomplish this, you'll likely want to divide your controls among a number of web pages. On the other hand, it's not the most worthwhile pursuit. Make boxes with relevant grouped data that can be easily double-tapped to focus on, and keep related controls close to each other. iPad users will most likely appreciate a page that facilitates the familiar zoom-and-pan navigation they're accustomed to more than they will a page that has fewer controls so that they don't have to.", "answer": "There's no simple answer to this question. Apple's mobile version of WebKit, used in iPhones, iPod Touches, and iPads, will scale the page to fit the screen, at which point the user can zoom in and out freely. That said, you can design your page to minimize the amount of zooming necessary. Your best bet is to make the width and height the same as the lower resolution of the iPad, since you don't know which way it's oriented; in other words, you would make your page 768x768, so that it will fit well on the iPad's screen whether it's oriented to be 1024x768 or 768x1024. More importantly, you'd want to design your page with big controls with lots of space that are easy to hit with your thumbs - you could easily design a 768x768 page that was very cluttered and therefore required lots of zooming. To accomplish this, you'll likely want to divide your controls among a number of web pages. On the other hand, it's not the most worthwhile pursuit. If while designing you find opportunities to make your page more \"finger-friendly\", then go for it...but the reality is that iPad users are very comfortable with moving around and zooming in and out of the page to get to things because it's necessary on most web sites. If anything, you probably want to design it so that it's conducive to this type of navigation. Make boxes with relevant grouped data that can be easily double-tapped to focus on, and keep related controls close to each other. iPad users will most likely appreciate a page that facilitates the familiar zoom-and-pan navigation they're accustomed to more than they will a page that has fewer controls so that they don't have to.", "summary": "That said, you can design your page to minimize the amount of zooming necessary. Your best bet is to make the width and height the same as the lower resolution of the iPad, since you don't know which way it's oriented; in other words, you would make your page 768x768, so that it will fit well on the iPad's screen whether it's oriented to be 1024x768 or 768x1024. To accomplish this, you'll likely want to divide your controls among a number of web pages. On the other hand, it's not the most worthwhile pursuit. Make boxes with relevant grouped data that can be easily double-tapped to focus on, and keep related controls close to each other. iPad users will most likely appreciate a page that facilitates the familiar zoom-and-pan navigation they're accustomed to more than they will a page that has fewer controls so that they don't have to."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n You realise that you may be making a rod for your own back for the future. The pwdencrypt() and pwdcompare() are undocumented functions and may not behave the same in future versions of SQL Server. Why not hash the password using a predictable algorithm such as SHA-2 or better before hitting the DB?", "output": "The pwdencrypt() and pwdcompare() are undocumented functions and may not behave the same in future versions of SQL Server.", "answer": "You realise that you may be making a rod for your own back for the future. The pwdencrypt() and pwdcompare() are undocumented functions and may not behave the same in future versions of SQL Server. Why not hash the password using a predictable algorithm such as SHA-2 or better before hitting the DB?", "summary": "The pwdencrypt() and pwdcompare() are undocumented functions and may not behave the same in future versions of SQL Server."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Don't use inserts, use BCP", "output": "Don't use inserts, use BCP", "answer": "Don't use inserts, use BCP", "summary": "Don't use inserts, use BCP"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n The first error java.lang.Exception; must be caught or declared to be thrown byte[] encrypted = encrypt(concatURL); means that your <code>encrypt</code> method throws an exception that is not being handled or declared by the <code>actionPerformed</code> method where you are calling it. Read all about it at the Java Exceptions Tutorial. You have a couple of choices that you can pick from to get the code to compile. You can remove <code>throws Exception</code> from your <code>encrypt</code> method and actually handle the exception inside <code>encrypt</code>. You can remove the try/catch block from <code>encrypt</code> and add <code>throws Exception</code> and the exception handling block to your <code>actionPerformed</code> method. It's generally better to handle an exception at the lowest level that you can, instead of passing it up to a higher level. The second error just means that you need to add a return statement to whichever method contains line 109 (also <code>encrypt</code>, in this case). There is a return statement in the method, but if an exception is thrown it might not be reached, so you either need to return in the catch block, or remove the try/catch from <code>encrypt</code>, as I mentioned before.", "output": "means that your <code>encrypt</code> method throws an exception that is not being handled or declared by the <code>actionPerformed</code> method where you are calling it. You have a couple of choices that you can pick from to get the code to compile.", "answer": "The first error java.lang.Exception; must be caught or declared to be thrown byte[] encrypted = encrypt(concatURL); means that your <code>encrypt</code> method throws an exception that is not being handled or declared by the <code>actionPerformed</code> method where you are calling it. Read all about it at the Java Exceptions Tutorial. You have a couple of choices that you can pick from to get the code to compile. You can remove <code>throws Exception</code> from your <code>encrypt</code> method and actually handle the exception inside <code>encrypt</code>. You can remove the try/catch block from <code>encrypt</code> and add <code>throws Exception</code> and the exception handling block to your <code>actionPerformed</code> method. It's generally better to handle an exception at the lowest level that you can, instead of passing it up to a higher level. The second error just means that you need to add a return statement to whichever method contains line 109 (also <code>encrypt</code>, in this case). There is a return statement in the method, but if an exception is thrown it might not be reached, so you either need to return in the catch block, or remove the try/catch from <code>encrypt</code>, as I mentioned before.", "summary": "means that your <code>encrypt</code> method throws an exception that is not being handled or declared by the <code>actionPerformed</code> method where you are calling it. You have a couple of choices that you can pick from to get the code to compile."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Put the number you want to multiply by in a cell that is not in your range. Select the cell and \"Copy\" it to the clipboard.Next, select the Range A1:D5, and from the menu choose Edit|Paste Special.A dialog box will appear. In the \"Operation\" area, select \"Multiply\" and click \"OK\".", "output": "Put the number you want to multiply by in a cell that is not in your range. Select the cell and \"Copy\" it to the clipboard.Next, select the Range A1:D5, and from the menu choose Edit|Paste Special.A dialog box will appear. In the \"Operation\" area, select \"Multiply\" and click \"OK\".", "answer": "Put the number you want to multiply by in a cell that is not in your range. Select the cell and \"Copy\" it to the clipboard.Next, select the Range A1:D5, and from the menu choose Edit|Paste Special.A dialog box will appear. In the \"Operation\" area, select \"Multiply\" and click \"OK\".", "summary": "Put the number you want to multiply by in a cell that is not in your range. Select the cell and \"Copy\" it to the clipboard.Next, select the Range A1:D5, and from the menu choose Edit|Paste Special.A dialog box will appear. In the \"Operation\" area, select \"Multiply\" and click \"OK\"."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Every JavaScript object has an internal property called [[Prototype]]. If you look up a property via <code>obj.propName</code> or <code>obj['propName']</code> and the object does not have such a property - which can be checked via <code>obj.hasOwnProperty('propName')</code> - the runtime looks up the property in the object referenced by [[Prototype]] instead. If the prototype-object also doesn't have such a property, its prototype is checked in turn, thus walking the original object's prototype-chain until a match is found or its end is reached. Some JavaScript implementations allow direct access to the [[Prototype]] property, eg via a non-standard property named <code>__proto__</code>. In general, it's only possible to set an object's prototype during object creation: If you create a new object via <code>new Func()</code>, the object's [[Prototype]] property will be set to the object referenced by <code>Func.prototype</code>. This allows to simulate classes in JavaScript, although JavaScript's inheritance system is - as we have seen - prototypical, and not class-based: Just think of constructor functions as classes and the properties of the prototype (ie of the object referenced by the constructor function's <code>prototype</code> property) as shared members, ie members which are the same for each instance. In class-based systems, methods are implemented the same way for each instance, so methods are normally added to the prototype, whereas an object's fields are instance-specific and therefore added to the object itself during construction.", "output": "Just think of constructor functions as classes and the properties of the prototype (ie of the object referenced by the constructor function's <code>prototype</code> property) as shared members, ie members which are the same for each instance.", "answer": "Every JavaScript object has an internal property called [[Prototype]]. If you look up a property via <code>obj.propName</code> or <code>obj['propName']</code> and the object does not have such a property - which can be checked via <code>obj.hasOwnProperty('propName')</code> - the runtime looks up the property in the object referenced by [[Prototype]] instead. If the prototype-object also doesn't have such a property, its prototype is checked in turn, thus walking the original object's prototype-chain until a match is found or its end is reached. Some JavaScript implementations allow direct access to the [[Prototype]] property, eg via a non-standard property named <code>__proto__</code>. In general, it's only possible to set an object's prototype during object creation: If you create a new object via <code>new Func()</code>, the object's [[Prototype]] property will be set to the object referenced by <code>Func.prototype</code>. This allows to simulate classes in JavaScript, although JavaScript's inheritance system is - as we have seen - prototypical, and not class-based: Just think of constructor functions as classes and the properties of the prototype (ie of the object referenced by the constructor function's <code>prototype</code> property) as shared members, ie members which are the same for each instance. In class-based systems, methods are implemented the same way for each instance, so methods are normally added to the prototype, whereas an object's fields are instance-specific and therefore added to the object itself during construction.", "summary": "Just think of constructor functions as classes and the properties of the prototype (ie of the object referenced by the constructor function's <code>prototype</code> property) as shared members, ie members which are the same for each instance."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Careful watch your accessibility of your classes. Public and protected classes and methods are by default accessible for everyone. Also Microsoft isn't very explict in showing access modifiers (public, protected, etc.. keywords) when new classes in Visual Studio are created. So, take good care and think about your accessibility of your class because it's the door to your implementation internals.", "output": "Public and protected classes and methods are by default accessible for everyone.", "answer": "Careful watch your accessibility of your classes. Public and protected classes and methods are by default accessible for everyone. Also Microsoft isn't very explict in showing access modifiers (public, protected, etc.. keywords) when new classes in Visual Studio are created. So, take good care and think about your accessibility of your class because it's the door to your implementation internals.", "summary": "Public and protected classes and methods are by default accessible for everyone."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n With the latest version of Xcode (3.2.2), you can drag and drop any crash reports into the Device Logs section of the Xcode Organiser and they will automatically by symbolicated for you. I think this works best if you built that version of the App using Build &amp; Archive (also part of Xcode 3.2.2)", "output": "With the latest version of Xcode (3.2.2), you can drag and drop any crash reports into the Device Logs section of the Xcode Organiser and they will automatically by symbolicated for you.", "answer": "With the latest version of Xcode (3.2.2), you can drag and drop any crash reports into the Device Logs section of the Xcode Organiser and they will automatically by symbolicated for you. I think this works best if you built that version of the App using Build &amp; Archive (also part of Xcode 3.2.2)", "summary": "With the latest version of Xcode (3.2.2), you can drag and drop any crash reports into the Device Logs section of the Xcode Organiser and they will automatically by symbolicated for you."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Firstly a class and its collaborators should firstly perform their intended purpose rather than focusing on deoendents. Lifecycle management (when instances are creared snd when they go out of scope) should not be part of the cladses responsibility. The accepted best practice for this is to craft or configure a new component to manage dependencies using dependency injection. Often software gets more complicated it makes sense to have multiple independent instances of the \"singleton\" class with different state. Committing code to simply grab the singleton is wrong in such cases. Using Singleton.getInstance() might be ok for small simple systems but it doesn't work / scale when one might need a different instance of the same class. No class should be thought of as a singleton but rather that should be an aplication of it's usage or how it is used to configure dependents. For a quick and nasty this does not matter- just luke hardcoding say file paths does not matter but for bigger applications such dependencies need to be factored out and managed in more appropriate way using DI. The problems that singleton cause in testing is a symptom of their hard coded single usage case/environment. The test suite and the many tests are each individual and separate something that is not compatible with hardcoding a singleton.", "output": "No class should be thought of as a singleton but rather that should be an aplication of it's usage or how it is used to configure dependents. The problems that singleton cause in testing is a symptom of their hard coded single usage case/environment.", "answer": "Firstly a class and its collaborators should firstly perform their intended purpose rather than focusing on deoendents. Lifecycle management (when instances are creared snd when they go out of scope) should not be part of the cladses responsibility. The accepted best practice for this is to craft or configure a new component to manage dependencies using dependency injection. Often software gets more complicated it makes sense to have multiple independent instances of the \"singleton\" class with different state. Committing code to simply grab the singleton is wrong in such cases. Using Singleton.getInstance() might be ok for small simple systems but it doesn't work / scale when one might need a different instance of the same class. No class should be thought of as a singleton but rather that should be an aplication of it's usage or how it is used to configure dependents. For a quick and nasty this does not matter- just luke hardcoding say file paths does not matter but for bigger applications such dependencies need to be factored out and managed in more appropriate way using DI. The problems that singleton cause in testing is a symptom of their hard coded single usage case/environment. The test suite and the many tests are each individual and separate something that is not compatible with hardcoding a singleton.", "summary": "No class should be thought of as a singleton but rather that should be an aplication of it's usage or how it is used to configure dependents. The problems that singleton cause in testing is a symptom of their hard coded single usage case/environment."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n No, you can't. The easiest way to make it work would be to put the function call directly after the element Example: or - even better - just in front of <code>&lt;/body&gt;</code>: ...so it doesn't block the following content from loading.", "output": "The easiest way to make it work would be to put the function call directly after the element or - even better - just in front of <code>&lt;/body&gt;</code>:", "answer": "No, you can't. The easiest way to make it work would be to put the function call directly after the element Example: or - even better - just in front of <code>&lt;/body&gt;</code>: ...so it doesn't block the following content from loading.", "summary": "The easiest way to make it work would be to put the function call directly after the element or - even better - just in front of <code>&lt;/body&gt;</code>:"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n It's actually not too complicated... Say you're on domain example.com, and you want to make a request to domain example.net. To do so, you need to cross domain boundaries, a no-no in most of browserland. The one item that bypasses this limitation is &lt;script&gt; tags. When you use a script tag, the domain limitation is ignored, but under normal circumstances, you can't really do anything with the results, the script just gets evaluated. Enter JSONP. When you make your request to a server that is JSONP enabled, you pass a special parameter that tells the server a little bit about your page. That way, the server is able to nicely wrap up its response in a way that your page can handle. For example, say the server expects a parameter called \"callback\" to enable its JSONP capabilities. Then your request would look like: Without JSONP, this might return some basic JavaScript object, like so: However, with JSONP, when the server receives the \"callback\" parameter, it wraps up the result a little differently, returning something like this: As you can see, it will now invoke the method you specified. So, in your page, you define the callback function: And now, when the script is loaded, it'll be evaluated, and your function will be executed. Voila, cross-domain requests! It's also worth noting the one major issue with JSONP: you lose a lot of control of the request. For example, there is no \"nice\" way to get proper failure codes back. As a result, you end up using timers to monitor the request, etc, which is always a bit suspect. The proposition for JSONRequest is a great solution to allowing cross domain scripting, maintaining security, and allowing proper control of the request. These days (2015), CORS is the recommended approach vs. JSONRequest. JSONP is still useful for older browser support, but given the security implications, unless you have no choice CORS is the better choice.", "output": "When you make your request to a server that is JSONP enabled, you pass a special parameter that tells the server a little bit about your page. That way, the server is able to nicely wrap up its response in a way that your page can handle.", "answer": "It's actually not too complicated... Say you're on domain example.com, and you want to make a request to domain example.net. To do so, you need to cross domain boundaries, a no-no in most of browserland. The one item that bypasses this limitation is &lt;script&gt; tags. When you use a script tag, the domain limitation is ignored, but under normal circumstances, you can't really do anything with the results, the script just gets evaluated. Enter JSONP. When you make your request to a server that is JSONP enabled, you pass a special parameter that tells the server a little bit about your page. That way, the server is able to nicely wrap up its response in a way that your page can handle. For example, say the server expects a parameter called \"callback\" to enable its JSONP capabilities. Then your request would look like: Without JSONP, this might return some basic JavaScript object, like so: However, with JSONP, when the server receives the \"callback\" parameter, it wraps up the result a little differently, returning something like this: As you can see, it will now invoke the method you specified. So, in your page, you define the callback function: And now, when the script is loaded, it'll be evaluated, and your function will be executed. Voila, cross-domain requests! It's also worth noting the one major issue with JSONP: you lose a lot of control of the request. For example, there is no \"nice\" way to get proper failure codes back. As a result, you end up using timers to monitor the request, etc, which is always a bit suspect. The proposition for JSONRequest is a great solution to allowing cross domain scripting, maintaining security, and allowing proper control of the request. These days (2015), CORS is the recommended approach vs. JSONRequest. JSONP is still useful for older browser support, but given the security implications, unless you have no choice CORS is the better choice.", "summary": "When you make your request to a server that is JSONP enabled, you pass a special parameter that tells the server a little bit about your page. That way, the server is able to nicely wrap up its response in a way that your page can handle."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Before pasting into the terminal, try <code>:set paste</code> (and then <code>:set nopaste</code> after you're done). This will turn off the auto-indent, line-wrap, etc. features that are messing up your paste. edit: Also, I should point out that a much better result than = indenting can usually be obtained by using an external program. For example, I run <code>:%!perltidy</code> all the time. astyle, cindent, etc. can also be used. And, of course, you can map those to a key stroke Ã©Â?and map different ones to the same keystroke depending on file type", "output": "Before pasting into the terminal, try <code>:set paste</code> (and then <code>:set nopaste</code> after you're done). And, of course, you can map those to a key stroke Ã©Â?and map different ones to the same keystroke depending on file type", "answer": "Before pasting into the terminal, try <code>:set paste</code> (and then <code>:set nopaste</code> after you're done). This will turn off the auto-indent, line-wrap, etc. features that are messing up your paste. edit: Also, I should point out that a much better result than = indenting can usually be obtained by using an external program. For example, I run <code>:%!perltidy</code> all the time. astyle, cindent, etc. can also be used. And, of course, you can map those to a key stroke Ã©Â?and map different ones to the same keystroke depending on file type", "summary": "Before pasting into the terminal, try <code>:set paste</code> (and then <code>:set nopaste</code> after you're done). And, of course, you can map those to a key stroke Ã©Â?and map different ones to the same keystroke depending on file type"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Their names should help you: <code>android:gravity</code> sets the gravity of the contents (i.e. it's subviews) of the <code>View</code> it's used on. <code>android:layout_gravity</code> sets the gravity of the <code>View</code> or <code>Layout</code> relative to its parent. And an example is here.", "output": "<code>android:gravity</code> sets the gravity of the contents (i.e. it's subviews) of the <code>View</code> it's used on. <code>android:layout_gravity</code> sets the gravity of the <code>View</code> or <code>Layout</code> relative to its parent.", "answer": "Their names should help you: <code>android:gravity</code> sets the gravity of the contents (i.e. it's subviews) of the <code>View</code> it's used on. <code>android:layout_gravity</code> sets the gravity of the <code>View</code> or <code>Layout</code> relative to its parent. And an example is here.", "summary": "<code>android:gravity</code> sets the gravity of the contents (i.e. it's subviews) of the <code>View</code> it's used on. <code>android:layout_gravity</code> sets the gravity of the <code>View</code> or <code>Layout</code> relative to its parent."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n This is how I think of it (and have seen rationalized by others): A library is something contained within your code. And a framework is a container for your application.", "output": "A library is something contained within your code. And a framework is a container for your application.", "answer": "This is how I think of it (and have seen rationalized by others): A library is something contained within your code. And a framework is a container for your application.", "summary": "A library is something contained within your code. And a framework is a container for your application."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n There is a great and exhaustive comparison tables and charts on git, Mercurial and Bazaar over at InfoQ's guide about DVCS.", "output": "There is a great and exhaustive comparison tables and charts on git, Mercurial and Bazaar over at InfoQ's guide about DVCS.", "answer": "There is a great and exhaustive comparison tables and charts on git, Mercurial and Bazaar over at InfoQ's guide about DVCS.", "summary": "There is a great and exhaustive comparison tables and charts on git, Mercurial and Bazaar over at InfoQ's guide about DVCS."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n <code>break</code> will exit the loop completely, <code>continue</code> will just <strong>skip</strong> the current iteration. For example: The break will cause the loop to exit on the first iteration - <code>DoSomeThingWith</code> will never be executed. This here: Will not execute <code>DoSomeThingWith</code> for <code>i = 0</code>, but the loop will <strong>continue</strong> and <code>DoSomeThingWith</code> will be executed for <code>i = 1</code> to <code>i = 9</code>.", "output": "<code>break</code> will exit the loop completely, <code>continue</code> will just <strong>skip</strong> the current iteration.", "answer": "<code>break</code> will exit the loop completely, <code>continue</code> will just <strong>skip</strong> the current iteration. For example: The break will cause the loop to exit on the first iteration - <code>DoSomeThingWith</code> will never be executed. This here: Will not execute <code>DoSomeThingWith</code> for <code>i = 0</code>, but the loop will <strong>continue</strong> and <code>DoSomeThingWith</code> will be executed for <code>i = 1</code> to <code>i = 9</code>.", "summary": "<code>break</code> will exit the loop completely, <code>continue</code> will just <strong>skip</strong> the current iteration."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n It works, but I wouldn't do it if I were you. You don't seem to be deleting that heap data when you're done, which means that you've created a memory leak. The C++ compiler takes care of ensuring that exception data is kept alive even as the stack is popped, so don't feel that you need to use the heap. Incidentally, throwing a <code>std::string</code> isn't the best approach to begin with. You'll have a lot more flexibility down the road if you use a simple wrapper object. It may just encapsulate a <code>string</code> for now, but maybe in future you will want to include other information, like some data which caused the exception or maybe a line number (very common, that). You don't want to change all of your exception handling in every spot in your code-base, so take the high road now and don't throw raw objects.", "output": "It works, but I wouldn't do it if I were you.", "answer": "It works, but I wouldn't do it if I were you. You don't seem to be deleting that heap data when you're done, which means that you've created a memory leak. The C++ compiler takes care of ensuring that exception data is kept alive even as the stack is popped, so don't feel that you need to use the heap. Incidentally, throwing a <code>std::string</code> isn't the best approach to begin with. You'll have a lot more flexibility down the road if you use a simple wrapper object. It may just encapsulate a <code>string</code> for now, but maybe in future you will want to include other information, like some data which caused the exception or maybe a line number (very common, that). You don't want to change all of your exception handling in every spot in your code-base, so take the high road now and don't throw raw objects.", "summary": "It works, but I wouldn't do it if I were you."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Introduction To browse and select a file for upload you need a HTML <code>&lt;input type=\"file\"&gt;</code> field in the form. As stated in the HTML specification you have to use the <code>POST</code> method and the <code>enctype</code> attribute of the form has to be set to <code>\"multipart/form-data\"</code>. After submitting such a form, the binary multipart form data is available in the request body in a different format than when the <code>enctype</code> isn't set. Before Servlet 3.0, the Servlet API didn't natively support <code>multipart/form-data</code>. It supports only the default form enctype of <code>application/x-www-form-urlencoded</code>. The <code>request.getParameter()</code> and consorts would all return <code>null</code> when using multipart form data. This is where the well known Apache Commons FileUpload came into the picture. Don't manually parse it! You can in theory parse the request body yourself based on <code>ServletRequest#getInputStream()</code>. However, this is a precise and tedious work which requires precise knowledge of RFC2388. You shouldn't try to do this on your own or copypaste some homegrown library-less code found elsewhere on the Internet. Many online sources have failed hard in this, such as roseindia.net. See also uploading of pdf file. You should rather use a real library which is used (and implicitly tested!) by millions of users for years. Such a library has proven its robustness. When you're already on Servlet 3.0 or newer, use native API If you're using at least Servlet 3.0 (Tomcat 7, Jetty 9, JBoss AS 6, GlassFish 3, etc), then you can just use standard API provided <code>HttpServletRequest#getPart()</code> to collect the individual multipart form data items (most Servlet 3.0 implementations actually use Apache Commons FileUpload under the covers for this!). Also, normal form fields are available by <code>getParameter()</code> the usual way. First annotate your servlet with <code>@MultipartConfig</code> in order to let it recognize and support <code>multipart/form-data</code> requests and thus get <code>getPart()</code> to work: Then, implement its <code>doPost()</code> as follows: Note the <code>Path#getFileName()</code>. This is a MSIE fix as to obtaining the file name. This browser incorrectly sends the full file path along the name instead of only the file name. In case you have a <code>&lt;input type=\"file\" name=\"file\" multiple=\"true\" /&gt;</code> for multi-file upload, collect them as below (unfortunately there is no such method as <code>request.getParts(\"file\")</code>): When you're not on Servlet 3.1 yet, manually get submitted file name Note that <code>Part#getSubmittedFileName()</code> was introduced in Servlet 3.1 (Tomcat 8, Jetty 9, WildFly 8, GlassFish 4, etc). If you're not on Servlet 3.1 yet, then you need an additional utility method to obtain the submitted file name. Note the MSIE fix as to obtaining the file name. This browser incorrectly sends the full file path along the name instead of only the file name. When you're not on Servlet 3.0 yet, use Apache Commons FileUpload If you're not on Servlet 3.0 yet (isn't it about time to upgrade? ), the common practice is to make use of Apache Commons FileUpload to parse the multpart form data requests. It has an excellent User Guide and FAQ (carefully go through both). There's also the O'Reilly (\"cos\") <code>MultipartRequest</code>, but it has some (minor) bugs and isn't actively maintained anymore for years. I wouldn't recommend using it. Apache Commons FileUpload is still actively maintained and currently very mature. In order to use Apache Commons FileUpload, you need to have at least the following files in your webapp's <code>/WEB-INF/lib</code>: <code>commons-fileupload.jar</code> <code>commons-io.jar</code> Your initial attempt failed most likely because you forgot the commons IO. Here's a kickoff example how the <code>doPost()</code> of your <code>UploadServlet</code> may look like when using Apache Commons FileUpload: It's very important that you don't call <code>getParameter()</code>, <code>getParameterMap()</code>, <code>getParameterValues()</code>, <code>getInputStream()</code>, <code>getReader()</code>, etc on the same request beforehand. Otherwise the servlet container will read and parse the request body and thus Apache Commons FileUpload will get an empty request body. See also a.o. ServletFileUpload#parseRequest(request) returns an empty list. Note the <code>FilenameUtils#getName()</code>. This is a MSIE fix as to obtaining the file name. This browser incorrectly sends the full file path along the name instead of only the file name. Alternatively you can also wrap this all in a <code>Filter</code> which parses it all automagically and put the stuff back in the parametermap of the request so that you can continue using <code>request.getParameter()</code> the usual way and retrieve the uploaded file by <code>request.getAttribute()</code>. You can find an example in this blog article. Workaround for GlassFish3 bug of <code>getParameter()</code> still returning <code>null</code> Note that Glassfish versions older than 3.1.2 had a bug wherein the <code>getParameter()</code> still returns <code>null</code>. If you are targeting such a container and can't upgrade it, then you need to extract the value from <code>getPart()</code> with help of this utility method: Saving uploaded file (don't use <code>getRealPath()</code> nor <code>part.write()</code>!) Head to the following answers for detail on properly saving the obtained <code>InputStream</code> (the <code>fileContent</code> variable as shown in the above code snippets) to disk or database: Recommended way to save uploaded files in a servlet application How to upload an image and save it in database? How to convert Part to Blob, so I can store it in MySQL? Serving uploaded file Head to the following answers for detail on properly serving the saved file from disk or database back to the client: Load images from outside of webapps / webcontext / deploy folder using &lt;h:graphicImage&gt; or &lt;img&gt; tag How to retrieve and display images from a database in a JSP page? Simplest way to serve static data from outside the application server in a Java web application Abstract template for static resource servlet supporting HTTP caching Ajaxifying the form Head to the following answers how to upload using Ajax (and jQuery). Do note that the servlet code to collect the form data does not need to be changed for this! Only the way how you respond may be changed, but this is rather trivial (i.e. instead of forwarding to JSP, just print some JSON or XML or even plain text depending on whatever the script responsible for the Ajax call is expecting). How to upload files to server using JSP/Servlet and Ajax? sending a file as multipart through xmlHttpRequest HTML5 File Upload to Java Servlet Hope this all helps :)", "output": "To browse and select a file for upload you need a HTML <code>&lt;input type=\"file\"&gt;</code> field in the form. As stated in the HTML specification you have to use the <code>POST</code> method and the <code>enctype</code> attribute of the form has to be set to <code>\"multipart/form-data\"</code>. Don't manually parse it! When you're already on Servlet 3.0 or newer, use native API When you're not on Servlet 3.1 yet, manually get submitted file name When you're not on Servlet 3.0 yet, use Apache Commons FileUpload Workaround for GlassFish3 bug of <code>getParameter()</code> still returning <code>null</code> Saving uploaded file (don't use <code>getRealPath()</code> nor <code>part.write()</code>!)", "answer": "Introduction To browse and select a file for upload you need a HTML <code>&lt;input type=\"file\"&gt;</code> field in the form. As stated in the HTML specification you have to use the <code>POST</code> method and the <code>enctype</code> attribute of the form has to be set to <code>\"multipart/form-data\"</code>. After submitting such a form, the binary multipart form data is available in the request body in a different format than when the <code>enctype</code> isn't set. Before Servlet 3.0, the Servlet API didn't natively support <code>multipart/form-data</code>. It supports only the default form enctype of <code>application/x-www-form-urlencoded</code>. The <code>request.getParameter()</code> and consorts would all return <code>null</code> when using multipart form data. This is where the well known Apache Commons FileUpload came into the picture. Don't manually parse it! You can in theory parse the request body yourself based on <code>ServletRequest#getInputStream()</code>. However, this is a precise and tedious work which requires precise knowledge of RFC2388. You shouldn't try to do this on your own or copypaste some homegrown library-less code found elsewhere on the Internet. Many online sources have failed hard in this, such as roseindia.net. See also uploading of pdf file. You should rather use a real library which is used (and implicitly tested!) by millions of users for years. Such a library has proven its robustness. When you're already on Servlet 3.0 or newer, use native API If you're using at least Servlet 3.0 (Tomcat 7, Jetty 9, JBoss AS 6, GlassFish 3, etc), then you can just use standard API provided <code>HttpServletRequest#getPart()</code> to collect the individual multipart form data items (most Servlet 3.0 implementations actually use Apache Commons FileUpload under the covers for this!). Also, normal form fields are available by <code>getParameter()</code> the usual way. First annotate your servlet with <code>@MultipartConfig</code> in order to let it recognize and support <code>multipart/form-data</code> requests and thus get <code>getPart()</code> to work: Then, implement its <code>doPost()</code> as follows: Note the <code>Path#getFileName()</code>. This is a MSIE fix as to obtaining the file name. This browser incorrectly sends the full file path along the name instead of only the file name. In case you have a <code>&lt;input type=\"file\" name=\"file\" multiple=\"true\" /&gt;</code> for multi-file upload, collect them as below (unfortunately there is no such method as <code>request.getParts(\"file\")</code>): When you're not on Servlet 3.1 yet, manually get submitted file name Note that <code>Part#getSubmittedFileName()</code> was introduced in Servlet 3.1 (Tomcat 8, Jetty 9, WildFly 8, GlassFish 4, etc). If you're not on Servlet 3.1 yet, then you need an additional utility method to obtain the submitted file name. Note the MSIE fix as to obtaining the file name. This browser incorrectly sends the full file path along the name instead of only the file name. When you're not on Servlet 3.0 yet, use Apache Commons FileUpload If you're not on Servlet 3.0 yet (isn't it about time to upgrade? ), the common practice is to make use of Apache Commons FileUpload to parse the multpart form data requests. It has an excellent User Guide and FAQ (carefully go through both). There's also the O'Reilly (\"cos\") <code>MultipartRequest</code>, but it has some (minor) bugs and isn't actively maintained anymore for years. I wouldn't recommend using it. Apache Commons FileUpload is still actively maintained and currently very mature. In order to use Apache Commons FileUpload, you need to have at least the following files in your webapp's <code>/WEB-INF/lib</code>: <code>commons-fileupload.jar</code> <code>commons-io.jar</code> Your initial attempt failed most likely because you forgot the commons IO. Here's a kickoff example how the <code>doPost()</code> of your <code>UploadServlet</code> may look like when using Apache Commons FileUpload: It's very important that you don't call <code>getParameter()</code>, <code>getParameterMap()</code>, <code>getParameterValues()</code>, <code>getInputStream()</code>, <code>getReader()</code>, etc on the same request beforehand. Otherwise the servlet container will read and parse the request body and thus Apache Commons FileUpload will get an empty request body. See also a.o. ServletFileUpload#parseRequest(request) returns an empty list. Note the <code>FilenameUtils#getName()</code>. This is a MSIE fix as to obtaining the file name. This browser incorrectly sends the full file path along the name instead of only the file name. Alternatively you can also wrap this all in a <code>Filter</code> which parses it all automagically and put the stuff back in the parametermap of the request so that you can continue using <code>request.getParameter()</code> the usual way and retrieve the uploaded file by <code>request.getAttribute()</code>. You can find an example in this blog article. Workaround for GlassFish3 bug of <code>getParameter()</code> still returning <code>null</code> Note that Glassfish versions older than 3.1.2 had a bug wherein the <code>getParameter()</code> still returns <code>null</code>. If you are targeting such a container and can't upgrade it, then you need to extract the value from <code>getPart()</code> with help of this utility method: Saving uploaded file (don't use <code>getRealPath()</code> nor <code>part.write()</code>!) Head to the following answers for detail on properly saving the obtained <code>InputStream</code> (the <code>fileContent</code> variable as shown in the above code snippets) to disk or database: Recommended way to save uploaded files in a servlet application How to upload an image and save it in database? How to convert Part to Blob, so I can store it in MySQL? Serving uploaded file Head to the following answers for detail on properly serving the saved file from disk or database back to the client: Load images from outside of webapps / webcontext / deploy folder using &lt;h:graphicImage&gt; or &lt;img&gt; tag How to retrieve and display images from a database in a JSP page? Simplest way to serve static data from outside the application server in a Java web application Abstract template for static resource servlet supporting HTTP caching Ajaxifying the form Head to the following answers how to upload using Ajax (and jQuery). Do note that the servlet code to collect the form data does not need to be changed for this! Only the way how you respond may be changed, but this is rather trivial (i.e. instead of forwarding to JSP, just print some JSON or XML or even plain text depending on whatever the script responsible for the Ajax call is expecting). How to upload files to server using JSP/Servlet and Ajax? sending a file as multipart through xmlHttpRequest HTML5 File Upload to Java Servlet Hope this all helps :)", "summary": "To browse and select a file for upload you need a HTML <code>&lt;input type=\"file\"&gt;</code> field in the form. As stated in the HTML specification you have to use the <code>POST</code> method and the <code>enctype</code> attribute of the form has to be set to <code>\"multipart/form-data\"</code>. Don't manually parse it! When you're already on Servlet 3.0 or newer, use native API When you're not on Servlet 3.1 yet, manually get submitted file name When you're not on Servlet 3.0 yet, use Apache Commons FileUpload Workaround for GlassFish3 bug of <code>getParameter()</code> still returning <code>null</code> Saving uploaded file (don't use <code>getRealPath()</code> nor <code>part.write()</code>!)"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Not sure, if it's the most efficient solution, but I would loop over all entries, and use a bitset to remember, which numbers are set, and then test for 0 bits. I like simple solutions - and I even believe, that it might be faster than calculating the sum, or the sum of squares etc.", "output": "Not sure, if it's the most efficient solution, but I would loop over all entries, and use a bitset to remember, which numbers are set, and then test for 0 bits.", "answer": "Not sure, if it's the most efficient solution, but I would loop over all entries, and use a bitset to remember, which numbers are set, and then test for 0 bits. I like simple solutions - and I even believe, that it might be faster than calculating the sum, or the sum of squares etc.", "summary": "Not sure, if it's the most efficient solution, but I would loop over all entries, and use a bitset to remember, which numbers are set, and then test for 0 bits."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Plain Old Data In short, it is all built-in data types (e.g. <code>int</code>, <code>char</code>, <code>float</code>, <code>long</code>, <code>unsigned char</code>, <code>double</code>, etc.) and all aggregation of POD data. Yes, it's a recursive definition. ;) To be more clear, a POD is what we call \"a struct\": a unit or a group of units that just store data.", "output": "In short, it is all built-in data types (e.g. Yes, it's a recursive definition. To be more clear, a POD is what we call \"a struct\": a unit or a group of units that just store data.", "answer": "Plain Old Data In short, it is all built-in data types (e.g. <code>int</code>, <code>char</code>, <code>float</code>, <code>long</code>, <code>unsigned char</code>, <code>double</code>, etc.) and all aggregation of POD data. Yes, it's a recursive definition. ;) To be more clear, a POD is what we call \"a struct\": a unit or a group of units that just store data.", "summary": "In short, it is all built-in data types (e.g. Yes, it's a recursive definition. To be more clear, a POD is what we call \"a struct\": a unit or a group of units that just store data."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n In addition to probably throwing something derived from std::exception you should throw anonymous temporaries and catch by reference: You should throw anonymous temporaries so the compiler deals with the object lifetime of whatever you're throwing - if you throw something new-ed off the heap, someone else needs to free the thing. You should catch references to prevent object slicing . See Meyer's \"Effective C++ - 3rd edition\" for details or visit https://www.securecoding.cert.org/.../ERR02-A.+Throw+anonymous+temporaries+and+catch+by+reference", "output": "In addition to probably throwing something derived from std::exception you should throw anonymous temporaries and catch by reference:", "answer": "In addition to probably throwing something derived from std::exception you should throw anonymous temporaries and catch by reference: You should throw anonymous temporaries so the compiler deals with the object lifetime of whatever you're throwing - if you throw something new-ed off the heap, someone else needs to free the thing. You should catch references to prevent object slicing . See Meyer's \"Effective C++ - 3rd edition\" for details or visit https://www.securecoding.cert.org/.../ERR02-A.+Throw+anonymous+temporaries+and+catch+by+reference", "summary": "In addition to probably throwing something derived from std::exception you should throw anonymous temporaries and catch by reference:"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n <code>dynamic_cast</code> has runtime type checking and only works with references and pointers, whereas <code>static_cast</code> does not offer runtime type checking. For complete information, see the MSDN article <em>static_cast Operator</em>.", "output": "<code>dynamic_cast</code> has runtime type checking and only works with references and pointers, whereas <code>static_cast</code> does not offer runtime type checking.", "answer": "<code>dynamic_cast</code> has runtime type checking and only works with references and pointers, whereas <code>static_cast</code> does not offer runtime type checking. For complete information, see the MSDN article <em>static_cast Operator</em>.", "summary": "<code>dynamic_cast</code> has runtime type checking and only works with references and pointers, whereas <code>static_cast</code> does not offer runtime type checking."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n You want to loop on the .Rows, and access the column for the row like q(\"column\") Just: BIGBLOCK Also make sure to check msdn doc for any class you are using + use intellisense", "output": "You want to loop on the .Rows, and access the column for the row like q(\"column\") BIGBLOCK", "answer": "You want to loop on the .Rows, and access the column for the row like q(\"column\") Just: BIGBLOCK Also make sure to check msdn doc for any class you are using + use intellisense", "summary": "You want to loop on the .Rows, and access the column for the row like q(\"column\") BIGBLOCK"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n <code>has_key</code> is a dictionary method, but <code>in</code> will work on any collection, and even when <code>__contains__</code> is missing, <code>in</code> will use any other method to iterate the collection to find out.", "output": "<code>has_key</code> is a dictionary method, but <code>in</code> will work on any collection, and even when <code>__contains__</code> is missing, <code>in</code> will use any other method to iterate the collection to find out.", "answer": "<code>has_key</code> is a dictionary method, but <code>in</code> will work on any collection, and even when <code>__contains__</code> is missing, <code>in</code> will use any other method to iterate the collection to find out.", "summary": "<code>has_key</code> is a dictionary method, but <code>in</code> will work on any collection, and even when <code>__contains__</code> is missing, <code>in</code> will use any other method to iterate the collection to find out."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Yes. <code>std::exception</code> is the base exception class in the C++ standard library. You may want to avoid using strings as exception classes because they themselves can throw an exception during use. If that happens, then where will you be? boost has an excellent document on good style for exceptions and error handling. It's worth a read.", "output": "Yes. You may want to avoid using strings as exception classes because they themselves can throw an exception during use.", "answer": "Yes. <code>std::exception</code> is the base exception class in the C++ standard library. You may want to avoid using strings as exception classes because they themselves can throw an exception during use. If that happens, then where will you be? boost has an excellent document on good style for exceptions and error handling. It's worth a read.", "summary": "Yes. You may want to avoid using strings as exception classes because they themselves can throw an exception during use."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n In general, the following regular expression fragment is what you are looking for: BIGBLOCK This uses the non-greedy *? operator to capture everything up to but not including the next double quote. Then, you use a language-specific mechanism to extract the matched text. In Python, you could do: BIGBLOCK", "output": "BIGBLOCK In Python, you could do: BIGBLOCK", "answer": "In general, the following regular expression fragment is what you are looking for: BIGBLOCK This uses the non-greedy *? operator to capture everything up to but not including the next double quote. Then, you use a language-specific mechanism to extract the matched text. In Python, you could do: BIGBLOCK", "summary": "BIGBLOCK In Python, you could do: BIGBLOCK"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Inline style only for clarity here. Use a real CSS stylesheet.", "output": "Use a real CSS stylesheet.", "answer": "Inline style only for clarity here. Use a real CSS stylesheet.", "summary": "Use a real CSS stylesheet."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n You can start a separate thread whose sole duty is to count for 5 seconds, update the file, repeat. You wouldn't want this separate thread to interfere with your main thread.", "output": "You can start a separate thread whose sole duty is to count for 5 seconds, update the file, repeat.", "answer": "You can start a separate thread whose sole duty is to count for 5 seconds, update the file, repeat. You wouldn't want this separate thread to interfere with your main thread.", "summary": "You can start a separate thread whose sole duty is to count for 5 seconds, update the file, repeat."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n What are you developing in? Are you using Apache Tomcat? I have a properties like this in a Java app of mine.", "output": "I have a properties like this in a Java app of mine.", "answer": "What are you developing in? Are you using Apache Tomcat? I have a properties like this in a Java app of mine.", "summary": "I have a properties like this in a Java app of mine."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Nested list comprehensions and generator expressions: These can replace huge chunks of nested-loop code.", "output": "Nested list comprehensions and generator expressions:", "answer": "Nested list comprehensions and generator expressions: These can replace huge chunks of nested-loop code.", "summary": "Nested list comprehensions and generator expressions:"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n An id must be unique in the whole page. A class may apply to many elements. Sometimes, it's a good idea to use ids. In a page, you usually have one footer, one header... Then the footer may be into a div with an id &lt;div id=\"footer\" class=\"...\"&gt; and still have a class", "output": "An id must be unique in the whole page. A class may apply to many elements.", "answer": "An id must be unique in the whole page. A class may apply to many elements. Sometimes, it's a good idea to use ids. In a page, you usually have one footer, one header... Then the footer may be into a div with an id &lt;div id=\"footer\" class=\"...\"&gt; and still have a class", "summary": "An id must be unique in the whole page. A class may apply to many elements."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n My solution for this problem is an extension method <code>WithIndex()</code>, http://code.google.com/p/ub-dotnet-utilities/source/browse/trunk/Src/Utilities/Extensions/EnumerableExtensions.cs <strong>Use it like</strong>", "output": "My solution for this problem is an extension method <code>WithIndex()</code>,", "answer": "My solution for this problem is an extension method <code>WithIndex()</code>, http://code.google.com/p/ub-dotnet-utilities/source/browse/trunk/Src/Utilities/Extensions/EnumerableExtensions.cs <strong>Use it like</strong>", "summary": "My solution for this problem is an extension method <code>WithIndex()</code>,"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Apache Commons Lang has a NullArgumentException that does a number of the things discussed here: it extends IllegalArgumentException and its sole constructor takes the name of the argument which should have been non-null. While I feel that throwing something like a NullArgumentException or IllegalArgumentException more accurately describes the exceptional circumstances, my colleagues and I have chosen to defer to Bloch's advice on the subject.", "output": "While I feel that throwing something like a NullArgumentException or IllegalArgumentException more accurately describes the exceptional circumstances, my colleagues and I have chosen to defer to Bloch's advice on the subject.", "answer": "Apache Commons Lang has a NullArgumentException that does a number of the things discussed here: it extends IllegalArgumentException and its sole constructor takes the name of the argument which should have been non-null. While I feel that throwing something like a NullArgumentException or IllegalArgumentException more accurately describes the exceptional circumstances, my colleagues and I have chosen to defer to Bloch's advice on the subject.", "summary": "While I feel that throwing something like a NullArgumentException or IllegalArgumentException more accurately describes the exceptional circumstances, my colleagues and I have chosen to defer to Bloch's advice on the subject."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n HTML 5 provides no way to make a video fullscreen, but the parallel Fullscreen specification supplies the <code>requestFullScreen</code> method which allows arbitrary elements (including <code>&lt;video&gt;</code> elements) to be made fullscreen. It has experimental support in a number of browsers. Original answer: From the HTML5 spec (at the time of writing: June '09): User agents should not provide a  public API to cause videos to be shown  full-screen. A script, combined with a  carefully crafted video file, could  trick the user into thinking a  system-modal dialog had been shown,  and prompt the user for a password. There is also the danger of \"mere\"  annoyance, with pages launching  full-screen videos when links are  clicked or pages navigated. Instead,  user-agent specific interface features  may be provided to easily allow the  user to obtain a full-screen playback  mode. Browsers may provide a user interface, but shouldn't provide a programmable one. Note that the above warning has since been removed from the specification.", "output": "HTML 5 provides no way to make a video fullscreen, but the parallel Fullscreen specification supplies the <code>requestFullScreen</code> method which allows arbitrary elements (including <code>&lt;video&gt;</code> elements) to be made fullscreen. From the HTML5 spec (at the time of writing: June '09): Browsers may provide a user interface, but shouldn't provide a programmable one.", "answer": "HTML 5 provides no way to make a video fullscreen, but the parallel Fullscreen specification supplies the <code>requestFullScreen</code> method which allows arbitrary elements (including <code>&lt;video&gt;</code> elements) to be made fullscreen. It has experimental support in a number of browsers. Original answer: From the HTML5 spec (at the time of writing: June '09): User agents should not provide a  public API to cause videos to be shown  full-screen. A script, combined with a  carefully crafted video file, could  trick the user into thinking a  system-modal dialog had been shown,  and prompt the user for a password. There is also the danger of \"mere\"  annoyance, with pages launching  full-screen videos when links are  clicked or pages navigated. Instead,  user-agent specific interface features  may be provided to easily allow the  user to obtain a full-screen playback  mode. Browsers may provide a user interface, but shouldn't provide a programmable one. Note that the above warning has since been removed from the specification.", "summary": "HTML 5 provides no way to make a video fullscreen, but the parallel Fullscreen specification supplies the <code>requestFullScreen</code> method which allows arbitrary elements (including <code>&lt;video&gt;</code> elements) to be made fullscreen. From the HTML5 spec (at the time of writing: June '09): Browsers may provide a user interface, but shouldn't provide a programmable one."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Either attribute can be applied to View's (visual control) horizontal or vertical size. It's used to set a View or Layouts size based on either it's contents or the size of it's parent layout rather than explicitly specifying a dimension. <strong><code>fill_parent</code></strong> (deprecated and renamed <code>MATCH_PARENT</code> in API Level 8 and higher) Setting the layout of a widget to fill_parent will force it to expand to take up as much space as is available within the layout element it's been placed in. It's roughly equivalent of setting the dockstyle of a Windows Form Control to <code>Fill</code>. Setting a top level layout or control to fill_parent will force it to take up the whole screen. <strong><code>wrap_content</code></strong> Setting a View's size to wrap_content will force it to expand only far enough to contain the values (or child controls) it contains. For controls -- like text boxes (TextView) or images (ImageView) -- this will wrap the text or image being shown. For layout elements it will resize the layout to fit the controls / layouts added as its children. It's roughly the equivalent of setting a Windows Form Control's <code>Autosize</code> property to True. <strong>Online Documentation</strong> There's some details in the Android code documentation here.", "output": "It's used to set a View or Layouts size based on either it's contents or the size of it's parent layout rather than explicitly specifying a dimension. <strong><code>fill_parent</code></strong> (deprecated and renamed <code>MATCH_PARENT</code> in API Level 8 and higher) Setting the layout of a widget to fill_parent will force it to expand to take up as much space as is available within the layout element it's been placed in. Setting a top level layout or control to fill_parent will force it to take up the whole screen. <strong><code>wrap_content</code></strong> Setting a View's size to wrap_content will force it to expand only far enough to contain the values (or child controls) it contains. For layout elements it will resize the layout to fit the controls / layouts added as its children.", "answer": "Either attribute can be applied to View's (visual control) horizontal or vertical size. It's used to set a View or Layouts size based on either it's contents or the size of it's parent layout rather than explicitly specifying a dimension. <strong><code>fill_parent</code></strong> (deprecated and renamed <code>MATCH_PARENT</code> in API Level 8 and higher) Setting the layout of a widget to fill_parent will force it to expand to take up as much space as is available within the layout element it's been placed in. It's roughly equivalent of setting the dockstyle of a Windows Form Control to <code>Fill</code>. Setting a top level layout or control to fill_parent will force it to take up the whole screen. <strong><code>wrap_content</code></strong> Setting a View's size to wrap_content will force it to expand only far enough to contain the values (or child controls) it contains. For controls -- like text boxes (TextView) or images (ImageView) -- this will wrap the text or image being shown. For layout elements it will resize the layout to fit the controls / layouts added as its children. It's roughly the equivalent of setting a Windows Form Control's <code>Autosize</code> property to True. <strong>Online Documentation</strong> There's some details in the Android code documentation here.", "summary": "It's used to set a View or Layouts size based on either it's contents or the size of it's parent layout rather than explicitly specifying a dimension. <strong><code>fill_parent</code></strong> (deprecated and renamed <code>MATCH_PARENT</code> in API Level 8 and higher) Setting the layout of a widget to fill_parent will force it to expand to take up as much space as is available within the layout element it's been placed in. Setting a top level layout or control to fill_parent will force it to take up the whole screen. <strong><code>wrap_content</code></strong> Setting a View's size to wrap_content will force it to expand only far enough to contain the values (or child controls) it contains. For layout elements it will resize the layout to fit the controls / layouts added as its children."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n <code>display: none</code> removes the element from the page entirely, and the page is built as though the element were not there at all. <code>Visibility: hidden</code> leaves the space in the document flow even though you can no longer see it. This may or may not make a big difference depending on what you are doing.", "output": "<code>display: none</code> removes the element from the page entirely, and the page is built as though the element were not there at all. <code>Visibility: hidden</code> leaves the space in the document flow even though you can no longer see it.", "answer": "<code>display: none</code> removes the element from the page entirely, and the page is built as though the element were not there at all. <code>Visibility: hidden</code> leaves the space in the document flow even though you can no longer see it. This may or may not make a big difference depending on what you are doing.", "summary": "<code>display: none</code> removes the element from the page entirely, and the page is built as though the element were not there at all. <code>Visibility: hidden</code> leaves the space in the document flow even though you can no longer see it."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Java JDK1.5 Integer.bitCount(n); where n is the number whose 1's are to be counted. check also,", "output": "Integer.bitCount(n);", "answer": "Java JDK1.5 Integer.bitCount(n); where n is the number whose 1's are to be counted. check also,", "summary": "Integer.bitCount(n);"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n <code>SQL</code> is a query language to operate on sets. It is more or less standardized, and used by almost all relational database management systems: SQL Server, Oracle, MySQL, PostgreSQL, DB2, Informix, etc. <code>PL/SQL</code> is a proprietary procedural language used by Oracle <code>PL/pgSQL</code> is a procedural language used by PostgreSQL <code>TSQL</code> is a proprietary procedural language used by Microsoft in SQL Server. Procedural languages are designed to extend SQL's abilities while being able to integrate well with SQL. Several features such as local variables and string/data processing are added. These features make the language Turing-complete. They are also used to write stored procedures: pieces of code residing on the server to manage complex business rules that are hard or impossible to manage with pure set-based operations.", "output": "<code>SQL</code> is a query language to operate on sets. <code>PL/SQL</code> is a proprietary procedural language used by Oracle <code>PL/pgSQL</code> is a procedural language used by PostgreSQL <code>TSQL</code> is a proprietary procedural language used by Microsoft in SQL Server.", "answer": "<code>SQL</code> is a query language to operate on sets. It is more or less standardized, and used by almost all relational database management systems: SQL Server, Oracle, MySQL, PostgreSQL, DB2, Informix, etc. <code>PL/SQL</code> is a proprietary procedural language used by Oracle <code>PL/pgSQL</code> is a procedural language used by PostgreSQL <code>TSQL</code> is a proprietary procedural language used by Microsoft in SQL Server. Procedural languages are designed to extend SQL's abilities while being able to integrate well with SQL. Several features such as local variables and string/data processing are added. These features make the language Turing-complete. They are also used to write stored procedures: pieces of code residing on the server to manage complex business rules that are hard or impossible to manage with pure set-based operations.", "summary": "<code>SQL</code> is a query language to operate on sets. <code>PL/SQL</code> is a proprietary procedural language used by Oracle <code>PL/pgSQL</code> is a procedural language used by PostgreSQL <code>TSQL</code> is a proprietary procedural language used by Microsoft in SQL Server."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Just in case you don't want to use stored proc, here's a simple query version", "output": "Just in case you don't want to use stored proc, here's a simple query version", "answer": "Just in case you don't want to use stored proc, here's a simple query version", "summary": "Just in case you don't want to use stored proc, here's a simple query version"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n If you think about the Greek roots of the term, it should become obvious. Poly = many: polygon = many-sided, polystyrene = many styrenes (a), polyglot = many languages, and so on. Morph = change or form: morphology = study of biological form, Morpheus = the Greek god of dreams able to take any form. So polymorphism is the ability (in programming) to present the same interface for differing underlying forms (data types). For example, in many languages, integers and floats are implicitly polymorphic since you can add, subtract, multiply and so on, irrespective of the fact that the types are different. They're rarely considered as objects in the usual term. But, in that same way, a class like <code>BigDecimal</code> or <code>Rational</code> or <code>Imaginary</code> can also provide those operations, even though they operate on different data types. The classic example is the <code>Shape</code> class and all the classes that can inherit from it (square, circle, dodecahedron, irregular polygon, splat and so on). With polymorphism, each of these classes will have different underlying data. A point shape needs only two co-ordinates (assuming it's in a two-dimensional space of course). A circle needs a center and radius. A square or rectangle needs two co-ordinates for the top left and bottom right corners and (possibly) a rotation. An irregular polygon needs a series of lines. By making the class responsible for its code as well as its data, you can achieve polymorphism. In this example, every class would have its own <code>Draw()</code> function and the client code could simply do: to get the correct behavior for any shape. This is in contrast to the old way of doing things in which the code was separate from the data, and you would have had functions such as <code>drawSquare()</code> and <code>drawCircle()</code>. Object orientation, polymorphism and inheritance are all closely-related concepts and they're vital to know. There have been many \"silver bullets\" during my long career which basically just fizzled out but the OO paradigm has turned out to be a good one. Learn it, understand it, love it - you'll be glad you did :-) (a) I originally wrote that as a joke but it turned out to be correct and, therefore, not that funny. The momomer styrene happens to be made from carbon and hydrogen, <code>C<sub>8</sub>H<sub>8</sub></code>, and polystyrene is made from groups of that, <code>(C<sub>8</sub>H<sub>8</sub>)<sub>n</sub></code>. Perhaps I should have stated that a polyp was many occurrences of the letter <code>p</code> although, now that I've had to explain the joke, even that doesn't seem funny either. Sometimes, you should just quit while you're behind :-)", "output": "So polymorphism is the ability (in programming) to present the same interface for differing underlying forms (data types). With polymorphism, each of these classes will have different underlying data. By making the class responsible for its code as well as its data, you can achieve polymorphism.", "answer": "If you think about the Greek roots of the term, it should become obvious. Poly = many: polygon = many-sided, polystyrene = many styrenes (a), polyglot = many languages, and so on. Morph = change or form: morphology = study of biological form, Morpheus = the Greek god of dreams able to take any form. So polymorphism is the ability (in programming) to present the same interface for differing underlying forms (data types). For example, in many languages, integers and floats are implicitly polymorphic since you can add, subtract, multiply and so on, irrespective of the fact that the types are different. They're rarely considered as objects in the usual term. But, in that same way, a class like <code>BigDecimal</code> or <code>Rational</code> or <code>Imaginary</code> can also provide those operations, even though they operate on different data types. The classic example is the <code>Shape</code> class and all the classes that can inherit from it (square, circle, dodecahedron, irregular polygon, splat and so on). With polymorphism, each of these classes will have different underlying data. A point shape needs only two co-ordinates (assuming it's in a two-dimensional space of course). A circle needs a center and radius. A square or rectangle needs two co-ordinates for the top left and bottom right corners and (possibly) a rotation. An irregular polygon needs a series of lines. By making the class responsible for its code as well as its data, you can achieve polymorphism. In this example, every class would have its own <code>Draw()</code> function and the client code could simply do: to get the correct behavior for any shape. This is in contrast to the old way of doing things in which the code was separate from the data, and you would have had functions such as <code>drawSquare()</code> and <code>drawCircle()</code>. Object orientation, polymorphism and inheritance are all closely-related concepts and they're vital to know. There have been many \"silver bullets\" during my long career which basically just fizzled out but the OO paradigm has turned out to be a good one. Learn it, understand it, love it - you'll be glad you did :-) (a) I originally wrote that as a joke but it turned out to be correct and, therefore, not that funny. The momomer styrene happens to be made from carbon and hydrogen, <code>C<sub>8</sub>H<sub>8</sub></code>, and polystyrene is made from groups of that, <code>(C<sub>8</sub>H<sub>8</sub>)<sub>n</sub></code>. Perhaps I should have stated that a polyp was many occurrences of the letter <code>p</code> although, now that I've had to explain the joke, even that doesn't seem funny either. Sometimes, you should just quit while you're behind :-)", "summary": "So polymorphism is the ability (in programming) to present the same interface for differing underlying forms (data types). With polymorphism, each of these classes will have different underlying data. By making the class responsible for its code as well as its data, you can achieve polymorphism."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Browsers aren't allowed to access the local file system unless you're accessing a local html page. You have to upload the image somewhere. If it's in the same directory as the html file, then you can use <code>&lt;img src=\"localfile.jpg\"/&gt;</code>", "output": "You have to upload the image somewhere. If it's in the same directory as the html file, then you can use <code>&lt;img src=\"localfile.jpg\"/&gt;</code>", "answer": "Browsers aren't allowed to access the local file system unless you're accessing a local html page. You have to upload the image somewhere. If it's in the same directory as the html file, then you can use <code>&lt;img src=\"localfile.jpg\"/&gt;</code>", "summary": "You have to upload the image somewhere. If it's in the same directory as the html file, then you can use <code>&lt;img src=\"localfile.jpg\"/&gt;</code>"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n At a theoretical level, they are no different semantically. You can implement a mutex using semaphores or vice versa (see here for an example). In practice, the implementation is different and they offer slightly different services. The practical difference (in terms of the system services surrounding them) is that the implementation of a mutex is aimed at being a more lightweight synchronisation mechanism. In oracle-speak, mutexes are known as latches and semaphores are known as waits. At the lowest level, they use some sort of atomic test and set mechanism. This reads the current value of a memory location, computes some sort of conditional and writes out a value at that location in a single instruction that cannot be interrupted. This means that you can acquire a mutex and test to see if anyone else had it before you. A typical mutex implementation has a process or thread executing the test-and-set instruction and evaluating whether anything else had set the mutex. A key point here is that there is no interaction with the scheduler, so we have no idea (and don't care) who has set the lock. Then we either give up our time slice and attempt it again when the task is re-scheduled or execute a spin-lock. A spin lock is an algorithm like: When we have finished executing our protected code (known as a critical section) we just set the mutex value to zero or whatever means 'clear.' If multiple tasks are attempting to acquire the mutex they the next task that happens to be scheduled after the mutex is released will get access to the resource. Typically you would use mutexes to control a synchronised resource where exclusive access is only needed for very short periods of time, normally to make an update to a shared data structure. A semaphore is a synchronised data structure (typically using a mutex) that has a count and some system call wrappers that interact with the scheduler in a bit more depth than the mutex libraries would. Semaphores are incremented and decremented and used to block tasks until something else is ready. See Producer/Consumer Problem for a simple example of this. Semaphores are initialised to some value - a binary semaphore is just a special case where the semaphore is initialised to 1. Posting to a semaphore has the effect of waking up a waiting process. A basic semaphore algorithm looks like: In the case of a binary semaphore the main practical difference between the two is the nature of the system services surrounding the actual data structure. EDIT: As evan has rightly pointed out, spinlocks will slow down a single processor machine. You would only use a spinlock on a multi-processor box because on a single processor the process holding the mutex will never reset it while another task is running. Spinlocks are only useful on multi-processor architectures.", "output": "The practical difference (in terms of the system services surrounding them) is that the implementation of a mutex is aimed at being a more lightweight synchronisation mechanism. A typical mutex implementation has a process or thread executing the test-and-set instruction and evaluating whether anything else had set the mutex. A semaphore is a synchronised data structure (typically using a mutex) that has a count and some system call wrappers that interact with the scheduler in a bit more depth than the mutex libraries would.", "answer": "At a theoretical level, they are no different semantically. You can implement a mutex using semaphores or vice versa (see here for an example). In practice, the implementation is different and they offer slightly different services. The practical difference (in terms of the system services surrounding them) is that the implementation of a mutex is aimed at being a more lightweight synchronisation mechanism. In oracle-speak, mutexes are known as latches and semaphores are known as waits. At the lowest level, they use some sort of atomic test and set mechanism. This reads the current value of a memory location, computes some sort of conditional and writes out a value at that location in a single instruction that cannot be interrupted. This means that you can acquire a mutex and test to see if anyone else had it before you. A typical mutex implementation has a process or thread executing the test-and-set instruction and evaluating whether anything else had set the mutex. A key point here is that there is no interaction with the scheduler, so we have no idea (and don't care) who has set the lock. Then we either give up our time slice and attempt it again when the task is re-scheduled or execute a spin-lock. A spin lock is an algorithm like: When we have finished executing our protected code (known as a critical section) we just set the mutex value to zero or whatever means 'clear.' If multiple tasks are attempting to acquire the mutex they the next task that happens to be scheduled after the mutex is released will get access to the resource. Typically you would use mutexes to control a synchronised resource where exclusive access is only needed for very short periods of time, normally to make an update to a shared data structure. A semaphore is a synchronised data structure (typically using a mutex) that has a count and some system call wrappers that interact with the scheduler in a bit more depth than the mutex libraries would. Semaphores are incremented and decremented and used to block tasks until something else is ready. See Producer/Consumer Problem for a simple example of this. Semaphores are initialised to some value - a binary semaphore is just a special case where the semaphore is initialised to 1. Posting to a semaphore has the effect of waking up a waiting process. A basic semaphore algorithm looks like: In the case of a binary semaphore the main practical difference between the two is the nature of the system services surrounding the actual data structure. EDIT: As evan has rightly pointed out, spinlocks will slow down a single processor machine. You would only use a spinlock on a multi-processor box because on a single processor the process holding the mutex will never reset it while another task is running. Spinlocks are only useful on multi-processor architectures.", "summary": "The practical difference (in terms of the system services surrounding them) is that the implementation of a mutex is aimed at being a more lightweight synchronisation mechanism. A typical mutex implementation has a process or thread executing the test-and-set instruction and evaluating whether anything else had set the mutex. A semaphore is a synchronised data structure (typically using a mutex) that has a count and some system call wrappers that interact with the scheduler in a bit more depth than the mutex libraries would."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n If it's a <code>setter</code> method and <code>null</code> is being passed to it, I think it would make more sense to throw an <code>IllegalArgumentException</code>. A <code>NullPointerException</code> seems to make more sense in the case where you're attempting to actually use the <code>null</code>. So, if you're using it and it's <code>null</code>, <code>NullPointer</code>. If it's being passed in and it's <code>null</code>, <code>IllegalArgument</code>.", "output": "So, if you're using it and it's <code>null</code>, <code>NullPointer</code>. If it's being passed in and it's <code>null</code>, <code>IllegalArgument</code>.", "answer": "If it's a <code>setter</code> method and <code>null</code> is being passed to it, I think it would make more sense to throw an <code>IllegalArgumentException</code>. A <code>NullPointerException</code> seems to make more sense in the case where you're attempting to actually use the <code>null</code>. So, if you're using it and it's <code>null</code>, <code>NullPointer</code>. If it's being passed in and it's <code>null</code>, <code>IllegalArgument</code>.", "summary": "So, if you're using it and it's <code>null</code>, <code>NullPointer</code>. If it's being passed in and it's <code>null</code>, <code>IllegalArgument</code>."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n It should be <code>getResource(\"/install.xml\");</code> The resource names are relative to where the getClass() class resides, e.g. if your test is <code>org/example/foo/MyTest.class</code> then <code>getResource(\"install.xml\")</code> will look in <code>org/example/foo/install.xml</code>. If your <code>install.xml</code> is in <code>src/test/resources</code>, it's in the root of the classpath, hence you need to prepend the resource name with <code>/</code>. Also, if it works only sometimes, then it might be because Eclipse has cleaned the output directory (e.g. <code>target/test-classes</code>) and the resource is simply missing from the runtime classpath. Verify that using the Navigator view of Eclipse instead of the Package explorer. If the files is missing, run the <code>mvn package</code> goal.", "output": "It should be <code>getResource(\"/install.xml\");</code>", "answer": "It should be <code>getResource(\"/install.xml\");</code> The resource names are relative to where the getClass() class resides, e.g. if your test is <code>org/example/foo/MyTest.class</code> then <code>getResource(\"install.xml\")</code> will look in <code>org/example/foo/install.xml</code>. If your <code>install.xml</code> is in <code>src/test/resources</code>, it's in the root of the classpath, hence you need to prepend the resource name with <code>/</code>. Also, if it works only sometimes, then it might be because Eclipse has cleaned the output directory (e.g. <code>target/test-classes</code>) and the resource is simply missing from the runtime classpath. Verify that using the Navigator view of Eclipse instead of the Package explorer. If the files is missing, run the <code>mvn package</code> goal.", "summary": "It should be <code>getResource(\"/install.xml\");</code>"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n <code>C:</code> is not a recognized URI scheme. Try <code>file://c|/...</code> instead.", "output": "Try <code>file://c|/...</code> instead.", "answer": "<code>C:</code> is not a recognized URI scheme. Try <code>file://c|/...</code> instead.", "summary": "Try <code>file://c|/...</code> instead."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n For all of you <code>SelftrackingEntities</code> Users , if you have followed the Microsoft Walk-through and separated the Object context class into the wcf service project (by linking to the context .tt) so this answer is for you : part of the shown answers in this post that includes code like : WILL NOT WORK FOR YOU  !! the reason is that <code>YourObjectContextType.Assembly</code> now resides in a different Assembley (inside the wcf project assembly) , So you should replace <code>YourObjectContextType.Assembly.FullName</code>  with --> have fun.", "output": "So you should replace <code>YourObjectContextType.Assembly.FullName</code>  with -->", "answer": "For all of you <code>SelftrackingEntities</code> Users , if you have followed the Microsoft Walk-through and separated the Object context class into the wcf service project (by linking to the context .tt) so this answer is for you : part of the shown answers in this post that includes code like : WILL NOT WORK FOR YOU  !! the reason is that <code>YourObjectContextType.Assembly</code> now resides in a different Assembley (inside the wcf project assembly) , So you should replace <code>YourObjectContextType.Assembly.FullName</code>  with --> have fun.", "summary": "So you should replace <code>YourObjectContextType.Assembly.FullName</code>  with -->"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n You might want to look at the <code>uniq</code> and <code>sort</code> applications. ./yourscript.ksh | sort | uniq BIGBLOCK (FYI, yes, the sort is necessary in this command line, <code>uniq</code> only strips duplicate lines that are immediately after each other) <strong>EDIT:</strong> Contrary to what has been posted by Aaron Digulla in relation to <code>uniq</code>'s commandline options: Given the following input: classjarjarjarbinbinjava BIGBLOCK <code>uniq</code> will output all lines exactly once: classjarbinjava BIGBLOCK <code>uniq -d</code> will output all lines that appear more than once, and it will print them once: jarbin BIGBLOCK <code>uniq -u</code> will output all lines that appear exactly once, and it will print them once: classjava BIGBLOCK", "output": "You might want to look at the <code>uniq</code> and <code>sort</code> applications. Given the following input: classjarjarjarbinbinjava BIGBLOCK <code>uniq</code> will output all lines exactly once: classjarbinjava BIGBLOCK <code>uniq -d</code> will output all lines that appear more than once, and it will print them once: jarbin BIGBLOCK <code>uniq -u</code> will output all lines that appear exactly once, and it will print them once: classjava BIGBLOCK", "answer": "You might want to look at the <code>uniq</code> and <code>sort</code> applications. ./yourscript.ksh | sort | uniq BIGBLOCK (FYI, yes, the sort is necessary in this command line, <code>uniq</code> only strips duplicate lines that are immediately after each other) <strong>EDIT:</strong> Contrary to what has been posted by Aaron Digulla in relation to <code>uniq</code>'s commandline options: Given the following input: classjarjarjarbinbinjava BIGBLOCK <code>uniq</code> will output all lines exactly once: classjarbinjava BIGBLOCK <code>uniq -d</code> will output all lines that appear more than once, and it will print them once: jarbin BIGBLOCK <code>uniq -u</code> will output all lines that appear exactly once, and it will print them once: classjava BIGBLOCK", "summary": "You might want to look at the <code>uniq</code> and <code>sort</code> applications. Given the following input: classjarjarjarbinbinjava BIGBLOCK <code>uniq</code> will output all lines exactly once: classjarbinjava BIGBLOCK <code>uniq -d</code> will output all lines that appear more than once, and it will print them once: jarbin BIGBLOCK <code>uniq -u</code> will output all lines that appear exactly once, and it will print them once: classjava BIGBLOCK"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n It blurs the separation of concerns. Supposed that you have a singleton, you can call this instance from anywhere inside your class. Your class is no longer as pure as it should be. Your class will now no longer operate on its members and the members that it receives explicitly. This will create confusion, because the users of the class don't know what is the sufficient information the class needs. The whole idea of encapsulation is to hide the how of a method from the users, but if a singleton is used inside the method, one will have to know the state of the singleton in order to use the method correctly. This is anti-OOP.", "output": "The whole idea of encapsulation is to hide the how of a method from the users, but if a singleton is used inside the method, one will have to know the state of the singleton in order to use the method correctly. This is anti-OOP.", "answer": "It blurs the separation of concerns. Supposed that you have a singleton, you can call this instance from anywhere inside your class. Your class is no longer as pure as it should be. Your class will now no longer operate on its members and the members that it receives explicitly. This will create confusion, because the users of the class don't know what is the sufficient information the class needs. The whole idea of encapsulation is to hide the how of a method from the users, but if a singleton is used inside the method, one will have to know the state of the singleton in order to use the method correctly. This is anti-OOP.", "summary": "The whole idea of encapsulation is to hide the how of a method from the users, but if a singleton is used inside the method, one will have to know the state of the singleton in order to use the method correctly. This is anti-OOP."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n I would say there is a third way: Maybe this is influenced a bit by my recent heavy usage of Javascript and Actionscript 3, but this way your class doesn't need to implement a pretty vague interface like <code>Runnable</code>.", "output": "Maybe this is influenced a bit by my recent heavy usage of Javascript and Actionscript 3, but this way your class doesn't need to implement a pretty vague interface like <code>Runnable</code>.", "answer": "I would say there is a third way: Maybe this is influenced a bit by my recent heavy usage of Javascript and Actionscript 3, but this way your class doesn't need to implement a pretty vague interface like <code>Runnable</code>.", "summary": "Maybe this is influenced a bit by my recent heavy usage of Javascript and Actionscript 3, but this way your class doesn't need to implement a pretty vague interface like <code>Runnable</code>."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n This can also be controlled with the apache configuration. Check the httpd.conf and/or .htaccess for something like the following: BIGBLOCK", "output": "Check the httpd.conf and/or .htaccess for something like the following: BIGBLOCK", "answer": "This can also be controlled with the apache configuration. Check the httpd.conf and/or .htaccess for something like the following: BIGBLOCK", "summary": "Check the httpd.conf and/or .htaccess for something like the following: BIGBLOCK"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n I fully agree to other answers, saying not to rely on the execution of finalize. In addition to try-catch-finally blocks, you may use Runtime#addShutdownHook (introduced in Java 1.6) to perform final cleanups in your program. That isn't the same as destructors are, but one may implement a shutdown hook having listener objects registered on which cleanup methods (close persistent database connections, remove file locks, and so on) can be invoked - things that would normally be done in destructors. Again - this is not a replacement for constructors but in some cases, you can approach the wanted functionality with this. The advantage of this is having deconstruction behaviorloosely coupled from the rest of your program.", "output": "In addition to try-catch-finally blocks, you may use Runtime#addShutdownHook (introduced in Java 1.6) to perform final cleanups in your program.", "answer": "I fully agree to other answers, saying not to rely on the execution of finalize. In addition to try-catch-finally blocks, you may use Runtime#addShutdownHook (introduced in Java 1.6) to perform final cleanups in your program. That isn't the same as destructors are, but one may implement a shutdown hook having listener objects registered on which cleanup methods (close persistent database connections, remove file locks, and so on) can be invoked - things that would normally be done in destructors. Again - this is not a replacement for constructors but in some cases, you can approach the wanted functionality with this. The advantage of this is having deconstruction behaviorloosely coupled from the rest of your program.", "summary": "In addition to try-catch-finally blocks, you may use Runtime#addShutdownHook (introduced in Java 1.6) to perform final cleanups in your program."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n heh, one line version", "output": "heh, one line version", "answer": "heh, one line version", "summary": "heh, one line version"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n It can be caused by a classpath contamination. Check that you <code>/WEB-INF/lib</code> doesn't contain something like <code>jsp-api-*.jar</code>.", "output": "Check that you <code>/WEB-INF/lib</code> doesn't contain something like <code>jsp-api-*.jar</code>.", "answer": "It can be caused by a classpath contamination. Check that you <code>/WEB-INF/lib</code> doesn't contain something like <code>jsp-api-*.jar</code>.", "summary": "Check that you <code>/WEB-INF/lib</code> doesn't contain something like <code>jsp-api-*.jar</code>."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Basically you are positioning the cursor before the first row and then requesting data. You need to move the cursor to the first row. It is common to do this in an if statement or loop.", "output": "Basically you are positioning the cursor before the first row and then requesting data. You need to move the cursor to the first row.", "answer": "Basically you are positioning the cursor before the first row and then requesting data. You need to move the cursor to the first row. It is common to do this in an if statement or loop.", "summary": "Basically you are positioning the cursor before the first row and then requesting data. You need to move the cursor to the first row."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n I prefer something really easy to call. So I use something that looks a little complicated, but is easy to use. I usually just copy-and-paste the code below into my scripts. An explanation follows the code. BIGBLOCK I usually put a call to the cleanup function in side the error_exit function, but this varies from script to script so I left it out. The traps catch the common terminating signals and make sure everything gets cleaned up. The alias is what does the real magic. I like to check everything for failure. So in general I call programs in an \"if !\" type statement. By subtracting 1 from the line number the alias will tell me where the failure occurred. It is also dead simple to call, and pretty much idiot proof. Below is an example (just replace /bin/false with whatever you are going to call). BIGBLOCK", "output": "An explanation follows the code. BIGBLOCK The traps catch the common terminating signals and make sure everything gets cleaned up.", "answer": "I prefer something really easy to call. So I use something that looks a little complicated, but is easy to use. I usually just copy-and-paste the code below into my scripts. An explanation follows the code. BIGBLOCK I usually put a call to the cleanup function in side the error_exit function, but this varies from script to script so I left it out. The traps catch the common terminating signals and make sure everything gets cleaned up. The alias is what does the real magic. I like to check everything for failure. So in general I call programs in an \"if !\" type statement. By subtracting 1 from the line number the alias will tell me where the failure occurred. It is also dead simple to call, and pretty much idiot proof. Below is an example (just replace /bin/false with whatever you are going to call). BIGBLOCK", "summary": "An explanation follows the code. BIGBLOCK The traps catch the common terminating signals and make sure everything gets cleaned up."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n <code>\\r</code> can do the work here for you.", "output": "<code>\\r</code> can do the work here for you.", "answer": "<code>\\r</code> can do the work here for you.", "summary": "<code>\\r</code> can do the work here for you."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Every thing is fine. i just placed call permissions tag before application tag in manifest file and now every thing is working fine.", "output": "i just placed call permissions tag before application tag in manifest file", "answer": "Every thing is fine. i just placed call permissions tag before application tag in manifest file and now every thing is working fine.", "summary": "i just placed call permissions tag before application tag in manifest file"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n You can run a single test class, but not a single method within a test class. You use the simple name of the class not the fully-qualified name of the class. So, if you have a test in \"org.sonatype.test.MyTest\" and that is the only test you want to run, your command line would look like this: BIGBLOCK", "output": "You can run a single test class, but not a single method within a test class. So, if you have a test in \"org.sonatype.test.MyTest\" and that is the only test you want to run, your command line would look like this: BIGBLOCK", "answer": "You can run a single test class, but not a single method within a test class. You use the simple name of the class not the fully-qualified name of the class. So, if you have a test in \"org.sonatype.test.MyTest\" and that is the only test you want to run, your command line would look like this: BIGBLOCK", "summary": "You can run a single test class, but not a single method within a test class. So, if you have a test in \"org.sonatype.test.MyTest\" and that is the only test you want to run, your command line would look like this: BIGBLOCK"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Consider two class-typed variables: Now you are able to call any member function of <code>Boo</code> on <code>b0</code>, but only <code>const</code>-qualified member functions on <code>b1</code>.", "output": "Now you are able to call any member function of <code>Boo</code> on <code>b0</code>, but only <code>const</code>-qualified member functions on <code>b1</code>.", "answer": "Consider two class-typed variables: Now you are able to call any member function of <code>Boo</code> on <code>b0</code>, but only <code>const</code>-qualified member functions on <code>b1</code>.", "summary": "Now you are able to call any member function of <code>Boo</code> on <code>b0</code>, but only <code>const</code>-qualified member functions on <code>b1</code>."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Baseline Expectations http://img128.imageshack.us/img128/1553/24383stripme5.gif Taken from Dilbert.com, Sept 12 2008", "output": "Baseline Expectations", "answer": "Baseline Expectations http://img128.imageshack.us/img128/1553/24383stripme5.gif Taken from Dilbert.com, Sept 12 2008", "summary": "Baseline Expectations"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n There are several ways to do this. You can use <code>ref</code> parameters: This passes a reference to the function thereby allowing the function to modify the object in the calling code's stack. While this is not technically a \"returned\" value it is a way to have a function do something similar. In the code above the function would return an <code>int</code> and (potentially) modify <code>bar</code>. Another similar approach is to use an <code>out</code> parameter. An <code>out</code> parameter is identical to a <code>ref</code> parameter with an additional, compiler enforced rule. This rule is that if you pass an <code>out</code> parameter into a function, that function is required to set its value prior to returning. Besides that rule, an <code>out</code> parameter works just like a <code>ref</code> parameter. The final approach (and the best in most cases) is to create a type that encapsulates both values and allow the function to return that: This final approach is simpler and easier to read and understand.", "output": "You can use <code>ref</code> parameters: Another similar approach is to use an <code>out</code> parameter. The final approach (and the best in most cases) is to create a type that encapsulates both values and allow the function to return that:", "answer": "There are several ways to do this. You can use <code>ref</code> parameters: This passes a reference to the function thereby allowing the function to modify the object in the calling code's stack. While this is not technically a \"returned\" value it is a way to have a function do something similar. In the code above the function would return an <code>int</code> and (potentially) modify <code>bar</code>. Another similar approach is to use an <code>out</code> parameter. An <code>out</code> parameter is identical to a <code>ref</code> parameter with an additional, compiler enforced rule. This rule is that if you pass an <code>out</code> parameter into a function, that function is required to set its value prior to returning. Besides that rule, an <code>out</code> parameter works just like a <code>ref</code> parameter. The final approach (and the best in most cases) is to create a type that encapsulates both values and allow the function to return that: This final approach is simpler and easier to read and understand.", "summary": "You can use <code>ref</code> parameters: Another similar approach is to use an <code>out</code> parameter. The final approach (and the best in most cases) is to create a type that encapsulates both values and allow the function to return that:"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n A quick google indicates that pwdencrypt() is not deterministic, and your statement select pwdencrypt('AAAA') returns a different value on my installation! See also this article http://www.theregister.co.uk/2002/07/08/cracking_ms_sql_server_passwords/", "output": "A quick google indicates that pwdencrypt() is not deterministic, and your statement select pwdencrypt('AAAA') returns a different value on my installation!", "answer": "A quick google indicates that pwdencrypt() is not deterministic, and your statement select pwdencrypt('AAAA') returns a different value on my installation! See also this article http://www.theregister.co.uk/2002/07/08/cracking_ms_sql_server_passwords/", "summary": "A quick google indicates that pwdencrypt() is not deterministic, and your statement select pwdencrypt('AAAA') returns a different value on my installation!"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n More about string can be found in String Class and String Tutorials", "output": "More about string can be found in String Class and String Tutorials", "answer": "More about string can be found in String Class and String Tutorials", "summary": "More about string can be found in String Class and String Tutorials"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Besides the possible security issues if you are executing user-submitted code, most of the time there's a better way that doesn't involve re-parsing the code every time it's executed. Anonymous functions or object properties can replace most uses of eval and are much safer and faster.", "output": "Anonymous functions or object properties can replace most uses of eval and are much safer and faster.", "answer": "Besides the possible security issues if you are executing user-submitted code, most of the time there's a better way that doesn't involve re-parsing the code every time it's executed. Anonymous functions or object properties can replace most uses of eval and are much safer and faster.", "summary": "Anonymous functions or object properties can replace most uses of eval and are much safer and faster."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Do a <code>SELECT</code> with a <code>GROUP BY</code> clause. Let's say name is the column you want to find duplicates in: This will return a result with the name value in the first column, and a count of how many times that value appears in the second.", "output": "Do a <code>SELECT</code> with a <code>GROUP BY</code> clause.", "answer": "Do a <code>SELECT</code> with a <code>GROUP BY</code> clause. Let's say name is the column you want to find duplicates in: This will return a result with the name value in the first column, and a count of how many times that value appears in the second.", "summary": "Do a <code>SELECT</code> with a <code>GROUP BY</code> clause."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n If you are generating XML files programatically, you may want to look at the XMLBeans library. Using a command line tool, XMLBeans will automatically generate and package up a set of Java objects based on an XSD. You can then use these objects to build an XML document based on this schema. It has built-in support for schema validation, and can convert Java objects to an XML document and vice-versa. Castor and JAXB are other Java libraries that serve a similar purpose to XMLBeans.", "output": "If you are generating XML files programatically, you may want to look at the XMLBeans library. Using a command line tool, XMLBeans will automatically generate and package up a set of Java objects based on an XSD. Castor and JAXB are other Java libraries that serve a similar purpose to XMLBeans.", "answer": "If you are generating XML files programatically, you may want to look at the XMLBeans library. Using a command line tool, XMLBeans will automatically generate and package up a set of Java objects based on an XSD. You can then use these objects to build an XML document based on this schema. It has built-in support for schema validation, and can convert Java objects to an XML document and vice-versa. Castor and JAXB are other Java libraries that serve a similar purpose to XMLBeans.", "summary": "If you are generating XML files programatically, you may want to look at the XMLBeans library. Using a command line tool, XMLBeans will automatically generate and package up a set of Java objects based on an XSD. Castor and JAXB are other Java libraries that serve a similar purpose to XMLBeans."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Passing data in the request You could either embed it as a hidden field in your form, or add it your forms action URL or Note this also illustrates the use of htmlentities and urlencode when passing data around. Passing data in the session If the data doesn't need to be passed to the client side, then sessions may be more appropriate. Simply call session_start() at the start of each page, and you can get and set data into the $_SESSION array. Security Since you state your value is actually a filename, you need to be aware of the security ramifications. If the filename has arrived from the client side, assume the user has tampered with the value. Check it for validity! What happens when the user passes the path to an important system file, or a file under their control? Can your script be used to \"probe\" the server for files that do or do not exist? As you are clearly just getting started here, its worth reminding that this goes for any data which arrives in $_GET, $_POST or $_COOKIE - assume your worst enemy crafted the contents of those arrays, and code accordingly!", "output": "Passing data in the request You could either embed it as a hidden field in your form, or add it your forms action URL Note this also illustrates the use of htmlentities and urlencode when passing data around. Passing data in the session Simply call session_start() at the start of each page, and you can get and set data into the $_SESSION array. Check it for validity! As you are clearly just getting started here, its worth reminding that this goes for any data which arrives in $_GET, $_POST or $_COOKIE - assume your worst enemy crafted the contents of those arrays, and code accordingly!", "answer": "Passing data in the request You could either embed it as a hidden field in your form, or add it your forms action URL or Note this also illustrates the use of htmlentities and urlencode when passing data around. Passing data in the session If the data doesn't need to be passed to the client side, then sessions may be more appropriate. Simply call session_start() at the start of each page, and you can get and set data into the $_SESSION array. Security Since you state your value is actually a filename, you need to be aware of the security ramifications. If the filename has arrived from the client side, assume the user has tampered with the value. Check it for validity! What happens when the user passes the path to an important system file, or a file under their control? Can your script be used to \"probe\" the server for files that do or do not exist? As you are clearly just getting started here, its worth reminding that this goes for any data which arrives in $_GET, $_POST or $_COOKIE - assume your worst enemy crafted the contents of those arrays, and code accordingly!", "summary": "Passing data in the request You could either embed it as a hidden field in your form, or add it your forms action URL Note this also illustrates the use of htmlentities and urlencode when passing data around. Passing data in the session Simply call session_start() at the start of each page, and you can get and set data into the $_SESSION array. Check it for validity! As you are clearly just getting started here, its worth reminding that this goes for any data which arrives in $_GET, $_POST or $_COOKIE - assume your worst enemy crafted the contents of those arrays, and code accordingly!"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n I tried your code: It threw an exception at this line: Maybe you are also facing the same kind of problem. Instead of casting to DataRowView, try making the following changes: Because items in CheckedListBox are of object type.", "output": "Instead of casting to DataRowView, try making the following changes:", "answer": "I tried your code: It threw an exception at this line: Maybe you are also facing the same kind of problem. Instead of casting to DataRowView, try making the following changes: Because items in CheckedListBox are of object type.", "summary": "Instead of casting to DataRowView, try making the following changes:"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n With a clustered index the rows are stored physically on the disk in the same order as the index. Therefore, there can be only one clustered index. With a non clustered index there is a second list that has pointers to the physical rows. You can have many non clustered indexes, although each new index will increase the time it takes to write new records. It is generally faster to read from a clustered index if you want to get back all the columns. You do not have to go first to the index and then to the table. Writing to a table with a clustered index can be slower, if there is a need to rearrange the data.", "output": "With a clustered index the rows are stored physically on the disk in the same order as the index. Therefore, there can be only one clustered index. With a non clustered index there is a second list that has pointers to the physical rows. You can have many non clustered indexes, although each new index will increase the time it takes to write new records. It is generally faster to read from a clustered index if you want to get back all the columns.", "answer": "With a clustered index the rows are stored physically on the disk in the same order as the index. Therefore, there can be only one clustered index. With a non clustered index there is a second list that has pointers to the physical rows. You can have many non clustered indexes, although each new index will increase the time it takes to write new records. It is generally faster to read from a clustered index if you want to get back all the columns. You do not have to go first to the index and then to the table. Writing to a table with a clustered index can be slower, if there is a need to rearrange the data.", "summary": "With a clustered index the rows are stored physically on the disk in the same order as the index. Therefore, there can be only one clustered index. With a non clustered index there is a second list that has pointers to the physical rows. You can have many non clustered indexes, although each new index will increase the time it takes to write new records. It is generally faster to read from a clustered index if you want to get back all the columns."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n If 'they' are using a self-signed certificate it is up to them to take the steps required to make their server usable. Specifically that means providing their certificate to you offline in a trustworthy way. So get them to do that. You then import that into your truststore using the keytool as described in the JSSE Reference Guide. Don't even think about the insecure TrustManager posted here. <strong>EDIT</strong> For the benefit of the <em>seventeen</em> (!) downvoters, and numerous commenters below, who clearly have not actually read what I have written here, this is <strong><em>not</em></strong> a jeremiad against self-signed certificates. There is nothing wrong with self-signed certificates <em>when implemented correctly.</em> <strong>But,</strong> the correct way to implement them is to have the certificate delivered <em>securely via an offline process,</em> rather than via the unauthenticated channel they are going to be used to authenticate. Surely this is obvious? It is certainly obvious to every security-aware organization I have ever worked for, from banks with thousands of branches to my own companies. The client-side code-base 'solution' of trusting <em>all</em> certificates, including self-signed certificates signed by absolutely anybody, or any arbitary body setting itself up as a CA, is <em>ipso facto</em> not secure. It is just playing at security. It is pointless. You are having a private, tamperproof, reply-proof, injection-proof conversation with ... somebody. Anybody. A man in the middle. An impersonator. Anybody. You may as well just use plaintext.", "output": "If 'they' are using a self-signed certificate it is up to them to take the steps required to make their server usable. You then import that into your truststore using the keytool as described in the JSSE Reference Guide.", "answer": "If 'they' are using a self-signed certificate it is up to them to take the steps required to make their server usable. Specifically that means providing their certificate to you offline in a trustworthy way. So get them to do that. You then import that into your truststore using the keytool as described in the JSSE Reference Guide. Don't even think about the insecure TrustManager posted here. <strong>EDIT</strong> For the benefit of the <em>seventeen</em> (!) downvoters, and numerous commenters below, who clearly have not actually read what I have written here, this is <strong><em>not</em></strong> a jeremiad against self-signed certificates. There is nothing wrong with self-signed certificates <em>when implemented correctly.</em> <strong>But,</strong> the correct way to implement them is to have the certificate delivered <em>securely via an offline process,</em> rather than via the unauthenticated channel they are going to be used to authenticate. Surely this is obvious? It is certainly obvious to every security-aware organization I have ever worked for, from banks with thousands of branches to my own companies. The client-side code-base 'solution' of trusting <em>all</em> certificates, including self-signed certificates signed by absolutely anybody, or any arbitary body setting itself up as a CA, is <em>ipso facto</em> not secure. It is just playing at security. It is pointless. You are having a private, tamperproof, reply-proof, injection-proof conversation with ... somebody. Anybody. A man in the middle. An impersonator. Anybody. You may as well just use plaintext.", "summary": "If 'they' are using a self-signed certificate it is up to them to take the steps required to make their server usable. You then import that into your truststore using the keytool as described in the JSSE Reference Guide."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n BIGBLOCK Does it for me, it is a valid C++ syntax to convert a string to a double. You can do it with the stringstream or boost::lexical_cast but those come with a performance penalty. Ahaha you have a Qt project ... BIGBLOCK Extra note: If the input data is a <code>const char*</code>, <code>QByteArray::toDouble</code> will be faster.", "output": "BIGBLOCK Does it for me, it is a valid C++ syntax to convert a string to a double.", "answer": "BIGBLOCK Does it for me, it is a valid C++ syntax to convert a string to a double. You can do it with the stringstream or boost::lexical_cast but those come with a performance penalty. Ahaha you have a Qt project ... BIGBLOCK Extra note: If the input data is a <code>const char*</code>, <code>QByteArray::toDouble</code> will be faster.", "summary": "BIGBLOCK Does it for me, it is a valid C++ syntax to convert a string to a double."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Grab an executable from info-zip. Info-ZIP supports hardware from microcomputers all the way up to Cray supercomputers, running on almost all versions of Unix, VMS, OS/2, Windows 9x/NT/etc. (a.k.a. Win32), Windows 3.x, Windows CE, MS-DOS, AmigaDOS, Atari TOS, Acorn RISC OS, BeOS, Mac OS, SMS/QDOS, MVS and OS/390 OE, VM/CMS, FlexOS, Tandem NSK and Human68K (Japanese). There is also some (old) support for LynxOS, TOPS-20, AOS/VS and Novell NLMs. Shared libraries (DLLs) are available for Unix, OS/2, Win32 and Win16, and graphical interfaces are available for Win32, Win16, WinCE and Mac OS.", "output": "Grab an executable from info-zip.", "answer": "Grab an executable from info-zip. Info-ZIP supports hardware from microcomputers all the way up to Cray supercomputers, running on almost all versions of Unix, VMS, OS/2, Windows 9x/NT/etc. (a.k.a. Win32), Windows 3.x, Windows CE, MS-DOS, AmigaDOS, Atari TOS, Acorn RISC OS, BeOS, Mac OS, SMS/QDOS, MVS and OS/390 OE, VM/CMS, FlexOS, Tandem NSK and Human68K (Japanese). There is also some (old) support for LynxOS, TOPS-20, AOS/VS and Novell NLMs. Shared libraries (DLLs) are available for Unix, OS/2, Win32 and Win16, and graphical interfaces are available for Win32, Win16, WinCE and Mac OS.", "summary": "Grab an executable from info-zip."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Use this: To validate an empty field. You don't need to add 2 validators !", "output": "You don't need to add 2 validators !", "answer": "Use this: To validate an empty field. You don't need to add 2 validators !", "summary": "You don't need to add 2 validators !"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n If they were declared as fields of the class then they would be really initialized with 0. You're a bit confused because if you write: Then this code will print \"0\". It's because a special constructor will be called when you create new instance of Clazz. At first <code>super ()</code> will be called, then field <code>a</code> will be initialized implicitly, and then line <code>b = 0</code> will be executed.", "output": "If they were declared as fields of the class then they would be really initialized with 0. It's because a special constructor will be called when you create new instance of Clazz.", "answer": "If they were declared as fields of the class then they would be really initialized with 0. You're a bit confused because if you write: Then this code will print \"0\". It's because a special constructor will be called when you create new instance of Clazz. At first <code>super ()</code> will be called, then field <code>a</code> will be initialized implicitly, and then line <code>b = 0</code> will be executed.", "summary": "If they were declared as fields of the class then they would be really initialized with 0. It's because a special constructor will be called when you create new instance of Clazz."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n While your question indicates it's for \"general OO\", it really seems to be focusing on .NET use of these terms. In .NET (similar for Java): <li>interfaces can have no state or implementation <li>a class that implements an interface must provide an implementation of all the methods of that interface <li>abstract classes may contain state (data members) and/or implementation (methods) <li>abstract classes can be inherited without implementing the abstract methods (though such a derived class is abstract itself) <li>interfaces may be multiple-inherited, abstract classes may not (this is probably the key concrete reason for interfaces to exist separately from abtract classes - they permit an implementation of multiple inheritance that removes many of the problems of general MI). As general OO terms, the differences are not necessarily well-defined. For example, there are C++ programmers who may hold similar rigid definitions (interfaces are a strict subset of abstract classes that cannot contain implementation), while some may say that an abstract class with some default implementations is still an interface or that a non-abstract class can still define an interface. Indeed, there is a C++ idiom called the Non-Virtual Interface (NVI) where  the public methods are non-virtual methods that 'thunk' to private virtual methods: <li>http://www.gotw.ca/publications/mill18.htm <li>http://en.wikibooks.org/wiki/More_C%2B%2B_Idioms/Non-Virtual_Interface", "output": "<li>interfaces can have no state or implementation <li>a class that implements an interface must provide an implementation of all the methods of that interface <li>abstract classes may contain state (data members) and/or implementation (methods) <li>abstract classes can be inherited without implementing the abstract methods (though such a derived class is abstract itself) <li>interfaces may be multiple-inherited, abstract classes may not (this is probably the key concrete reason for interfaces to exist separately from abtract classes - they permit an implementation of multiple inheritance that removes many of the problems of general MI). As general OO terms, the differences are not necessarily well-defined.", "answer": "While your question indicates it's for \"general OO\", it really seems to be focusing on .NET use of these terms. In .NET (similar for Java): <li>interfaces can have no state or implementation <li>a class that implements an interface must provide an implementation of all the methods of that interface <li>abstract classes may contain state (data members) and/or implementation (methods) <li>abstract classes can be inherited without implementing the abstract methods (though such a derived class is abstract itself) <li>interfaces may be multiple-inherited, abstract classes may not (this is probably the key concrete reason for interfaces to exist separately from abtract classes - they permit an implementation of multiple inheritance that removes many of the problems of general MI). As general OO terms, the differences are not necessarily well-defined. For example, there are C++ programmers who may hold similar rigid definitions (interfaces are a strict subset of abstract classes that cannot contain implementation), while some may say that an abstract class with some default implementations is still an interface or that a non-abstract class can still define an interface. Indeed, there is a C++ idiom called the Non-Virtual Interface (NVI) where  the public methods are non-virtual methods that 'thunk' to private virtual methods: <li>http://www.gotw.ca/publications/mill18.htm <li>http://en.wikibooks.org/wiki/More_C%2B%2B_Idioms/Non-Virtual_Interface", "summary": "<li>interfaces can have no state or implementation <li>a class that implements an interface must provide an implementation of all the methods of that interface <li>abstract classes may contain state (data members) and/or implementation (methods) <li>abstract classes can be inherited without implementing the abstract methods (though such a derived class is abstract itself) <li>interfaces may be multiple-inherited, abstract classes may not (this is probably the key concrete reason for interfaces to exist separately from abtract classes - they permit an implementation of multiple inheritance that removes many of the problems of general MI). As general OO terms, the differences are not necessarily well-defined."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n In short a web server is a server that serves web pages to users via http. An application server is a server that hosts the business logic for a system. It often hosts both long running/batch processes and/or a interop services not meant for human consumption (REST/JSON services, SOAP, RPC, etc).", "output": "In short a web server is a server that serves web pages to users via http. An application server is a server that hosts the business logic for a system.", "answer": "In short a web server is a server that serves web pages to users via http. An application server is a server that hosts the business logic for a system. It often hosts both long running/batch processes and/or a interop services not meant for human consumption (REST/JSON services, SOAP, RPC, etc).", "summary": "In short a web server is a server that serves web pages to users via http. An application server is a server that hosts the business logic for a system."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n As slashnick pointed out, you can use the \"for in\" construct to iterate over an object for its attribute names. However you'll be iterating over all attribute names in the object's prototype chain. If you want to iterate <strong>only</strong> over the object's own attributes, you can make use of the Object#hasOwnProperty() method. Thus having the following.", "output": "As slashnick pointed out, you can use the \"for in\" construct to iterate over an object for its attribute names. If you want to iterate <strong>only</strong> over the object's own attributes, you can make use of the Object#hasOwnProperty() method.", "answer": "As slashnick pointed out, you can use the \"for in\" construct to iterate over an object for its attribute names. However you'll be iterating over all attribute names in the object's prototype chain. If you want to iterate <strong>only</strong> over the object's own attributes, you can make use of the Object#hasOwnProperty() method. Thus having the following.", "summary": "As slashnick pointed out, you can use the \"for in\" construct to iterate over an object for its attribute names. If you want to iterate <strong>only</strong> over the object's own attributes, you can make use of the Object#hasOwnProperty() method."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n SingleOrDefault:  You're saying that \"At most\" there is one item matching the query or defaultFirstOrDefault:  You're saying that there is \"At least\" one item matching the query or default Say that out loud next time you need to choose and you shall likely choose wisely. :)", "output": "SingleOrDefault:  You're saying that \"At most\" there is one item matching the query or defaultFirstOrDefault:  You're saying that there is \"At least\" one item matching the query or default", "answer": "SingleOrDefault:  You're saying that \"At most\" there is one item matching the query or defaultFirstOrDefault:  You're saying that there is \"At least\" one item matching the query or default Say that out loud next time you need to choose and you shall likely choose wisely. :)", "summary": "SingleOrDefault:  You're saying that \"At most\" there is one item matching the query or defaultFirstOrDefault:  You're saying that there is \"At least\" one item matching the query or default"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n if your value is a pure text (like 'test') you could use the text() method as well. like this: BIGBLOCK anyway, about the problem you are sharing, I think you might be calling the JavaScript code before the HTML code for the DIV is being sent to the browser. make sure you are calling the jQuery line in a &lt;script&gt; tag after the &lt;div&gt;, or in a statement like this: BIGBLOCK this way the script executes after the HTML of the div is parsed by the browser.", "output": "if your value is a pure text (like 'test') you could use the text() method as well. make sure you are calling the jQuery line in a &lt;script&gt; tag after the &lt;div&gt;, or in a statement like this: BIGBLOCK", "answer": "if your value is a pure text (like 'test') you could use the text() method as well. like this: BIGBLOCK anyway, about the problem you are sharing, I think you might be calling the JavaScript code before the HTML code for the DIV is being sent to the browser. make sure you are calling the jQuery line in a &lt;script&gt; tag after the &lt;div&gt;, or in a statement like this: BIGBLOCK this way the script executes after the HTML of the div is parsed by the browser.", "summary": "if your value is a pure text (like 'test') you could use the text() method as well. make sure you are calling the jQuery line in a &lt;script&gt; tag after the &lt;div&gt;, or in a statement like this: BIGBLOCK"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Shell scripts are run inside a subshell, and each subshell has its own concept of what the current directory is. The <code>cd</code> succeeds, but as soon as the subshell exits, you're back in the interactive shell and nothing ever changed there. One way to get around this is to use an alias instead:", "output": "Shell scripts are run inside a subshell, and each subshell has its own concept of what the current directory is. The <code>cd</code> succeeds, but as soon as the subshell exits, you're back in the interactive shell and nothing ever changed there.", "answer": "Shell scripts are run inside a subshell, and each subshell has its own concept of what the current directory is. The <code>cd</code> succeeds, but as soon as the subshell exits, you're back in the interactive shell and nothing ever changed there. One way to get around this is to use an alias instead:", "summary": "Shell scripts are run inside a subshell, and each subshell has its own concept of what the current directory is. The <code>cd</code> succeeds, but as soon as the subshell exits, you're back in the interactive shell and nothing ever changed there."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Best thing to do would be to overload operator&lt;&lt; yourself, so that QString can be passed as a type to any library expecting an output-able type. BIGBLOCK", "output": "Best thing to do would be to overload operator&lt;&lt; yourself, so that QString can be passed as a type to any library expecting an output-able type.", "answer": "Best thing to do would be to overload operator&lt;&lt; yourself, so that QString can be passed as a type to any library expecting an output-able type. BIGBLOCK", "summary": "Best thing to do would be to overload operator&lt;&lt; yourself, so that QString can be passed as a type to any library expecting an output-able type."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n It ought to be possible to pack the 'cannot be a perfect square if the last X digits are N' much more efficiently than that! I'll use java 32 bit ints, and produce enough data to check the last 16 bits of the number - that's 2048 hexadecimal int values. ... Ok. Either I have run into some number theory that is a little beyond me, or there is a bug in my code. In any case, here is the code: BIGBLOCK and here are the results: (ed: elided for poor performance in prettify.js; view revision history to see.)", "output": "It ought to be possible to pack the 'cannot be a perfect square if the last X digits are N' much more efficiently than that! In any case, here is the code: BIGBLOCK", "answer": "It ought to be possible to pack the 'cannot be a perfect square if the last X digits are N' much more efficiently than that! I'll use java 32 bit ints, and produce enough data to check the last 16 bits of the number - that's 2048 hexadecimal int values. ... Ok. Either I have run into some number theory that is a little beyond me, or there is a bug in my code. In any case, here is the code: BIGBLOCK and here are the results: (ed: elided for poor performance in prettify.js; view revision history to see.)", "summary": "It ought to be possible to pack the 'cannot be a perfect square if the last X digits are N' much more efficiently than that! In any case, here is the code: BIGBLOCK"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Instead of : <code>Context appContext = this.getApplicationContext();</code> you should use a pointer to the activity you're in (probably <code>this</code>). I got bitten by this today too, the annoying part is the <code>getApplicationContext()</code> is verbatim from developer.android.com :(", "output": "you should use a pointer to the activity you're in (probably <code>this</code>).", "answer": "Instead of : <code>Context appContext = this.getApplicationContext();</code> you should use a pointer to the activity you're in (probably <code>this</code>). I got bitten by this today too, the annoying part is the <code>getApplicationContext()</code> is verbatim from developer.android.com :(", "summary": "you should use a pointer to the activity you're in (probably <code>this</code>)."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Avoid using C-Style casts. C-style casts are a mix of const and reinterpret cast, and it's difficult to find-and-replace in your code. A C++ application programmer should avoid C-style cast.", "output": "Avoid using C-Style casts.", "answer": "Avoid using C-Style casts. C-style casts are a mix of const and reinterpret cast, and it's difficult to find-and-replace in your code. A C++ application programmer should avoid C-style cast.", "summary": "Avoid using C-Style casts."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n As specified here I guess you need to add a <code>messageConverter</code> for  <code>MappingJacksonHttpMessageConverter</code>", "output": "As specified here I guess you need to add a <code>messageConverter</code> for  <code>MappingJacksonHttpMessageConverter</code>", "answer": "As specified here I guess you need to add a <code>messageConverter</code> for  <code>MappingJacksonHttpMessageConverter</code>", "summary": "As specified here I guess you need to add a <code>messageConverter</code> for  <code>MappingJacksonHttpMessageConverter</code>"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n HTML 5 video does go fullscreen in the latest nightly build of Safari, though I'm not sure how it is technically accomplished.", "output": "HTML 5 video does go fullscreen in the latest nightly build of Safari, though I'm not sure how it is technically accomplished.", "answer": "HTML 5 video does go fullscreen in the latest nightly build of Safari, though I'm not sure how it is technically accomplished.", "summary": "HTML 5 video does go fullscreen in the latest nightly build of Safari, though I'm not sure how it is technically accomplished."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n I tend to use <code>/Library/Java/Home</code>. The way the preferences pane works this should be up to date with your preferred version.", "output": "I tend to use <code>/Library/Java/Home</code>.", "answer": "I tend to use <code>/Library/Java/Home</code>. The way the preferences pane works this should be up to date with your preferred version.", "summary": "I tend to use <code>/Library/Java/Home</code>."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n No, but you could return an array containing your values: Then you can access them like so: If you want to put \"labels\" on each of the returned values (easier to maintain), you can return an object: And to access them:", "output": "No, but you could return an array containing your values:", "answer": "No, but you could return an array containing your values: Then you can access them like so: If you want to put \"labels\" on each of the returned values (easier to maintain), you can return an object: And to access them:", "summary": "No, but you could return an array containing your values:"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Yes, with a lexical cast. Use a stringstream and the &lt;&lt; operator, or use Boost, they've already implemented it. Your own version could look like: BIGBLOCK", "output": "Yes, with a lexical cast. Use a stringstream and the &lt;&lt; operator, or use Boost, they've already implemented it.", "answer": "Yes, with a lexical cast. Use a stringstream and the &lt;&lt; operator, or use Boost, they've already implemented it. Your own version could look like: BIGBLOCK", "summary": "Yes, with a lexical cast. Use a stringstream and the &lt;&lt; operator, or use Boost, they've already implemented it."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n With <code>LD_PRELOAD</code> you can give libraries precedence. For example you can write a library which implement <code>malloc</code> and <code>free</code>. And by loading these with <code>LD_PRELOAD</code> your <code>malloc</code> and <code>free</code> will be executed rather than the standard ones.", "output": "With <code>LD_PRELOAD</code> you can give libraries precedence. And by loading these with <code>LD_PRELOAD</code> your <code>malloc</code> and <code>free</code> will be executed rather than the standard ones.", "answer": "With <code>LD_PRELOAD</code> you can give libraries precedence. For example you can write a library which implement <code>malloc</code> and <code>free</code>. And by loading these with <code>LD_PRELOAD</code> your <code>malloc</code> and <code>free</code> will be executed rather than the standard ones.", "summary": "With <code>LD_PRELOAD</code> you can give libraries precedence. And by loading these with <code>LD_PRELOAD</code> your <code>malloc</code> and <code>free</code> will be executed rather than the standard ones."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n <strong>Polymorphism</strong> is the ability of a class instance to behave as if it were an instance of another class in its inheritance tree, most often one of its ancestor classes. For example, in Java all classes inherit from Object. Therefore, you can create a variable of type Object and assign to it an instance of any class. An <strong>override</strong> is a type of function which occurs in a class which inherits from another class. An override function \"replaces\" a function inherited from the base class, but does so in such a way that it is called even when an instance of its class is pretending to be a different type through polymorphism. Referring to the previous example, you could define your own class and override the toString() function. Because this function is inherited from Object, it will still be available if you copy an instance of this class into an Object-type variable. Normally, if you call toString() on your class while it is pretending to be an Object, the version of toString which will actually fire is the one defined on Object itself. However, because the function is an override, the definition of toString() from your class is used even when the class instance's true type is hidden behind polymorphism. <strong>Overloading</strong> is the action of defining multiple methods with the same name, but with different parameters. It is unrelated to either overriding or polymorphism.", "output": "<strong>Polymorphism</strong> is the ability of a class instance to behave as if it were an instance of another class in its inheritance tree, most often one of its ancestor classes. An <strong>override</strong> is a type of function which occurs in a class which inherits from another class. An override function \"replaces\" a function inherited from the base class, but does so in such a way that it is called even when an instance of its class is pretending to be a different type through polymorphism.", "answer": "<strong>Polymorphism</strong> is the ability of a class instance to behave as if it were an instance of another class in its inheritance tree, most often one of its ancestor classes. For example, in Java all classes inherit from Object. Therefore, you can create a variable of type Object and assign to it an instance of any class. An <strong>override</strong> is a type of function which occurs in a class which inherits from another class. An override function \"replaces\" a function inherited from the base class, but does so in such a way that it is called even when an instance of its class is pretending to be a different type through polymorphism. Referring to the previous example, you could define your own class and override the toString() function. Because this function is inherited from Object, it will still be available if you copy an instance of this class into an Object-type variable. Normally, if you call toString() on your class while it is pretending to be an Object, the version of toString which will actually fire is the one defined on Object itself. However, because the function is an override, the definition of toString() from your class is used even when the class instance's true type is hidden behind polymorphism. <strong>Overloading</strong> is the action of defining multiple methods with the same name, but with different parameters. It is unrelated to either overriding or polymorphism.", "summary": "<strong>Polymorphism</strong> is the ability of a class instance to behave as if it were an instance of another class in its inheritance tree, most often one of its ancestor classes. An <strong>override</strong> is a type of function which occurs in a class which inherits from another class. An override function \"replaces\" a function inherited from the base class, but does so in such a way that it is called even when an instance of its class is pretending to be a different type through polymorphism."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n I believe you can only initialize the dialog one time. The example above is trying to initialize the dialog every time #terms is clicked. This will cause problems. Instead, the initialization should occur outside of the click event. Your example should probably look something like this: BIGBLOCK I'm thinking that once you clear that up, it should fix the 'open from link' issue you described.", "output": "I believe you can only initialize the dialog one time. Your example should probably look something like this: BIGBLOCK", "answer": "I believe you can only initialize the dialog one time. The example above is trying to initialize the dialog every time #terms is clicked. This will cause problems. Instead, the initialization should occur outside of the click event. Your example should probably look something like this: BIGBLOCK I'm thinking that once you clear that up, it should fix the 'open from link' issue you described.", "summary": "I believe you can only initialize the dialog one time. Your example should probably look something like this: BIGBLOCK"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n JSON is JavaScript Object Notation. It is a much-more compact way of transmitting sets of data across network connections as compared to XML. I suggest JSON be used in any AJAX-like applications where XML would otherwise be the \"recommended\" option. The verbosity of XML will add to download time and increased bandwidth consumption ($$$). You can accomplish the same effect with JSON and its mark-up is almost exclusively dedicated to the data itself and not the underlying structure.", "output": "JSON is JavaScript Object Notation. It is a much-more compact way of transmitting sets of data across network connections as compared to XML.", "answer": "JSON is JavaScript Object Notation. It is a much-more compact way of transmitting sets of data across network connections as compared to XML. I suggest JSON be used in any AJAX-like applications where XML would otherwise be the \"recommended\" option. The verbosity of XML will add to download time and increased bandwidth consumption ($$$). You can accomplish the same effect with JSON and its mark-up is almost exclusively dedicated to the data itself and not the underlying structure.", "summary": "JSON is JavaScript Object Notation. It is a much-more compact way of transmitting sets of data across network connections as compared to XML."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n I had a similar error. I had recreated the project (long story), and pulled everything over from the old project. I hadn't realized that my model had been in a directory called 'Model' before, and was now in a directory called 'Models'. Once I changed the connection in my Web.Config from this: to this: Everything worked (changed <code>Model</code> to <code>Models</code>). Note that I had to change this three places in this string.", "output": "Once I changed the connection in my Web.Config from this: to this:", "answer": "I had a similar error. I had recreated the project (long story), and pulled everything over from the old project. I hadn't realized that my model had been in a directory called 'Model' before, and was now in a directory called 'Models'. Once I changed the connection in my Web.Config from this: to this: Everything worked (changed <code>Model</code> to <code>Models</code>). Note that I had to change this three places in this string.", "summary": "Once I changed the connection in my Web.Config from this: to this:"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n <strong>tl;dr: implements Runnable is better. However, the caveat is important</strong> In general, I would recommend using something like <code>Runnable</code> rather than <code>Thread</code> because it allows you to keep your work only loosely coupled with your choice of concurrency. For example, if you use a <code>Runnable</code> and decide later on that this doesn't in fact require it's own <code>Thread</code>, you can just call threadA.run(). <strong>Caveat:</strong> Around here, I strongly discourage the use of raw Threads. I much prefer the use of Callables and FutureTasks (From the javadoc: \"A cancellable asynchronous computation\"). The integration of timeouts, proper cancelling and the thread pooling of the modern concurrency support are all much more useful to me than piles of raw Threads. <strong>Follow-up:</strong> there is a <code>FutureTask</code> constructor that allows you to use Runnables (if that's what you are most comfortable with) and still get the benefit of the modern concurrency tools. To quote the javadoc: If you don't need a particular result, consider using constructions of the form: So, if we replace their <code>runnable</code> with your <code>threadA</code>, we get the following: Another option that allows you to stay closer to Runnables is a ThreadPoolExecutor. You can use the execute method to pass in a Runnable to execute \"the given task sometime in the future.\" If you'd like to try using a thread pool, the code fragment above would become something like the following (using the Executors.newCachedThreadPool() factory method):", "output": "<strong>tl;dr: implements Runnable is better. In general, I would recommend using something like <code>Runnable</code> rather than <code>Thread</code> because it allows you to keep your work only loosely coupled with your choice of concurrency. <strong>Caveat:</strong> Around here, I strongly discourage the use of raw Threads. Another option that allows you to stay closer to Runnables is a ThreadPoolExecutor.", "answer": "<strong>tl;dr: implements Runnable is better. However, the caveat is important</strong> In general, I would recommend using something like <code>Runnable</code> rather than <code>Thread</code> because it allows you to keep your work only loosely coupled with your choice of concurrency. For example, if you use a <code>Runnable</code> and decide later on that this doesn't in fact require it's own <code>Thread</code>, you can just call threadA.run(). <strong>Caveat:</strong> Around here, I strongly discourage the use of raw Threads. I much prefer the use of Callables and FutureTasks (From the javadoc: \"A cancellable asynchronous computation\"). The integration of timeouts, proper cancelling and the thread pooling of the modern concurrency support are all much more useful to me than piles of raw Threads. <strong>Follow-up:</strong> there is a <code>FutureTask</code> constructor that allows you to use Runnables (if that's what you are most comfortable with) and still get the benefit of the modern concurrency tools. To quote the javadoc: If you don't need a particular result, consider using constructions of the form: So, if we replace their <code>runnable</code> with your <code>threadA</code>, we get the following: Another option that allows you to stay closer to Runnables is a ThreadPoolExecutor. You can use the execute method to pass in a Runnable to execute \"the given task sometime in the future.\" If you'd like to try using a thread pool, the code fragment above would become something like the following (using the Executors.newCachedThreadPool() factory method):", "summary": "<strong>tl;dr: implements Runnable is better. In general, I would recommend using something like <code>Runnable</code> rather than <code>Thread</code> because it allows you to keep your work only loosely coupled with your choice of concurrency. <strong>Caveat:</strong> Around here, I strongly discourage the use of raw Threads. Another option that allows you to stay closer to Runnables is a ThreadPoolExecutor."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n The Magical XCode Organizer isn't that magical about symbolicating my app. I got no symbols at all for the crash reports that I got back from Apple from a failed app submission. I tried using the command-line, putting the crash report in the same folder as the .app file (that I submitted to the store) and the .dSYM file: BIGBLOCK This only provided symbols for my app and not the core foundation code, but it was better than the number dump that Organizer is giving me and was enough for me to find and fix the crash that my app had. If anyone knows how to extend this to get Foundation symbols it would be appreciated.", "output": "The Magical XCode Organizer isn't that magical about symbolicating my app. I tried using the command-line, putting the crash report in the same folder as the .app file (that I submitted to the store) and the .dSYM file: This only provided symbols for my app and not the core foundation code, but it was better than the number dump that Organizer is giving me and was enough for me to find and fix the crash that my app had.", "answer": "The Magical XCode Organizer isn't that magical about symbolicating my app. I got no symbols at all for the crash reports that I got back from Apple from a failed app submission. I tried using the command-line, putting the crash report in the same folder as the .app file (that I submitted to the store) and the .dSYM file: BIGBLOCK This only provided symbols for my app and not the core foundation code, but it was better than the number dump that Organizer is giving me and was enough for me to find and fix the crash that my app had. If anyone knows how to extend this to get Foundation symbols it would be appreciated.", "summary": "The Magical XCode Organizer isn't that magical about symbolicating my app. I tried using the command-line, putting the crash report in the same folder as the .app file (that I submitted to the store) and the .dSYM file: This only provided symbols for my app and not the core foundation code, but it was better than the number dump that Organizer is giving me and was enough for me to find and fix the crash that my app had."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n That is because %llu doesn't work properly under Windows and %d can't handle 64 bit integers. I suggest using PRIu64 instead and you'll find it's portable to Linux as well. Try this instead: Output", "output": "I suggest using PRIu64 instead and you'll find it's portable to Linux as well.", "answer": "That is because %llu doesn't work properly under Windows and %d can't handle 64 bit integers. I suggest using PRIu64 instead and you'll find it's portable to Linux as well. Try this instead: Output", "summary": "I suggest using PRIu64 instead and you'll find it's portable to Linux as well."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n You're most likely using this on a local file over the <code>file://</code> URI scheme, which cannot have cookies set. Put it on a local server so you can use <code>http://localhost</code>.", "output": "You're most likely using this on a local file over the <code>file://</code> URI scheme, which cannot have cookies set. Put it on a local server so you can use <code>http://localhost</code>.", "answer": "You're most likely using this on a local file over the <code>file://</code> URI scheme, which cannot have cookies set. Put it on a local server so you can use <code>http://localhost</code>.", "summary": "You're most likely using this on a local file over the <code>file://</code> URI scheme, which cannot have cookies set. Put it on a local server so you can use <code>http://localhost</code>."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n If you don't want to deal with WP API, then Adam's answer is really the best one. If you were willing to deal with the API I would suggest hooking into the \"template-redirect\" hook, which would allow you to point a particular URL or page to an arbitrary PHP file while still having access to the WP.", "output": "If you were willing to deal with the API I would suggest hooking into the \"template-redirect\" hook, which would allow you to point a particular URL or page to an arbitrary PHP file while still having access to the WP.", "answer": "If you don't want to deal with WP API, then Adam's answer is really the best one. If you were willing to deal with the API I would suggest hooking into the \"template-redirect\" hook, which would allow you to point a particular URL or page to an arbitrary PHP file while still having access to the WP.", "summary": "If you were willing to deal with the API I would suggest hooking into the \"template-redirect\" hook, which would allow you to point a particular URL or page to an arbitrary PHP file while still having access to the WP."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n There is an (somewhat) official option: jQuery.validator.format. Comes with jQuery Validation Plugin 1.6 (at least).Quite similar to the <code>String.Format</code> found in .NET. <strong>Edit</strong> Fixed broken link.", "output": "There is an (somewhat) official option: jQuery.validator.format.", "answer": "There is an (somewhat) official option: jQuery.validator.format. Comes with jQuery Validation Plugin 1.6 (at least).Quite similar to the <code>String.Format</code> found in .NET. <strong>Edit</strong> Fixed broken link.", "summary": "There is an (somewhat) official option: jQuery.validator.format."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n In management studio: Don't do this on a live environment, but to ensure you shrink your dev db as much as you can: Right-click the database, choose <code>Properties</code>, then <code>Options</code>. Make sure \"Recovery model\" is set to \"Simple\", not \"Full\" Click OK Right-click the database again, choose <code>Tasks</code> -> <code>Shrink</code> -> <code>Files</code> Change file type to \"Log\" Click OK. Alternatively, the SQL to do it: Ref: http://msdn.microsoft.com/en-us/library/ms189493.aspx", "output": "Right-click the database, choose <code>Properties</code>, then <code>Options</code>. Make sure \"Recovery model\" is set to \"Simple\", not \"Full\" Click OK Right-click the database again, choose <code>Tasks</code> -> <code>Shrink</code> -> <code>Files</code> Change file type to \"Log\" Click OK.", "answer": "In management studio: Don't do this on a live environment, but to ensure you shrink your dev db as much as you can: Right-click the database, choose <code>Properties</code>, then <code>Options</code>. Make sure \"Recovery model\" is set to \"Simple\", not \"Full\" Click OK Right-click the database again, choose <code>Tasks</code> -> <code>Shrink</code> -> <code>Files</code> Change file type to \"Log\" Click OK. Alternatively, the SQL to do it: Ref: http://msdn.microsoft.com/en-us/library/ms189493.aspx", "summary": "Right-click the database, choose <code>Properties</code>, then <code>Options</code>. Make sure \"Recovery model\" is set to \"Simple\", not \"Full\" Click OK Right-click the database again, choose <code>Tasks</code> -> <code>Shrink</code> -> <code>Files</code> Change file type to \"Log\" Click OK."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n PowerShell Community Extensions (PSCX) provides the <code>Get-FileTail</code> cmdlet. It looks like a suitable solution for the task. Note: I did not try it with extremely large files but the description says it efficiently tails the contents and it is designed for large log files. BIGBLOCK", "output": "PowerShell Community Extensions (PSCX) provides the <code>Get-FileTail</code> cmdlet. BIGBLOCK", "answer": "PowerShell Community Extensions (PSCX) provides the <code>Get-FileTail</code> cmdlet. It looks like a suitable solution for the task. Note: I did not try it with extremely large files but the description says it efficiently tails the contents and it is designed for large log files. BIGBLOCK", "summary": "PowerShell Community Extensions (PSCX) provides the <code>Get-FileTail</code> cmdlet. BIGBLOCK"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n eval isn't always evil. There are times where it's perfectly appropriate. However, eval is currently and historically massively over-used by people who don't know what they're doing. That includes people writing JavaScript tutorials, unfortunately, and in some cases this can indeed have security consequences - or, more often, simple bugs. So the more we can do to throw a question mark over eval, the better. Any time you use eval you need to sanity-check what you're doing, because chances are you could be doing it a better, safer, cleaner way. To give an all-too-typical example, to set the colour of an element with an id stored in the variable 'potato': BIGBLOCK If the authors of the kind of code above had a clue about the basics of how JavaScript objects work, they'd have realised that square brackets can be used instead of literal dot-names, obviating the need for eval: BIGBLOCK ...which is much easier to read as well as less potentially buggy. (But then, someone who /really/ knew what they were doing would say: BIGBLOCK which is more reliable than the dodgy old trick of accessing DOM elements straight out of the document object.)", "output": "So the more we can do to throw a question mark over eval, the better. To give an all-too-typical example, to set the colour of an element with an id stored in the variable 'potato': BIGBLOCK If the authors of the kind of code above had a clue about the basics of how JavaScript objects work, they'd have realised that square brackets can be used instead of literal dot-names, obviating the need for eval: BIGBLOCK ...which is much easier to read as well as less potentially buggy. (But then, someone who /really/ knew what they were doing would say: BIGBLOCK", "answer": "eval isn't always evil. There are times where it's perfectly appropriate. However, eval is currently and historically massively over-used by people who don't know what they're doing. That includes people writing JavaScript tutorials, unfortunately, and in some cases this can indeed have security consequences - or, more often, simple bugs. So the more we can do to throw a question mark over eval, the better. Any time you use eval you need to sanity-check what you're doing, because chances are you could be doing it a better, safer, cleaner way. To give an all-too-typical example, to set the colour of an element with an id stored in the variable 'potato': BIGBLOCK If the authors of the kind of code above had a clue about the basics of how JavaScript objects work, they'd have realised that square brackets can be used instead of literal dot-names, obviating the need for eval: BIGBLOCK ...which is much easier to read as well as less potentially buggy. (But then, someone who /really/ knew what they were doing would say: BIGBLOCK which is more reliable than the dodgy old trick of accessing DOM elements straight out of the document object.)", "summary": "So the more we can do to throw a question mark over eval, the better. To give an all-too-typical example, to set the colour of an element with an id stored in the variable 'potato': BIGBLOCK If the authors of the kind of code above had a clue about the basics of how JavaScript objects work, they'd have realised that square brackets can be used instead of literal dot-names, obviating the need for eval: BIGBLOCK ...which is much easier to read as well as less potentially buggy. (But then, someone who /really/ knew what they were doing would say: BIGBLOCK"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n A simple solution would be doing something like this: BIGBLOCK Then you can just do a find on myfile.sql for the URL you want.", "output": "A simple solution would be doing something like this: BIGBLOCK", "answer": "A simple solution would be doing something like this: BIGBLOCK Then you can just do a find on myfile.sql for the URL you want.", "summary": "A simple solution would be doing something like this: BIGBLOCK"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n You can't use shorthand notation to set configuration values outside of PHP.ini. I assume it's falling back to 2MB as the compiled default when confronted with a bad value. On the other hand, I don't think <code>upload_max_filesize</code> could be set using <code>ini_set()</code>. The \"official\" list states that it is <code>PHP_INI_PERDIR</code> .", "output": "You can't use shorthand notation to set configuration values outside of PHP.ini. On the other hand, I don't think <code>upload_max_filesize</code> could be set using <code>ini_set()</code>.", "answer": "You can't use shorthand notation to set configuration values outside of PHP.ini. I assume it's falling back to 2MB as the compiled default when confronted with a bad value. On the other hand, I don't think <code>upload_max_filesize</code> could be set using <code>ini_set()</code>. The \"official\" list states that it is <code>PHP_INI_PERDIR</code> .", "summary": "You can't use shorthand notation to set configuration values outside of PHP.ini. On the other hand, I don't think <code>upload_max_filesize</code> could be set using <code>ini_set()</code>."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n If you are using the table interface you can type in NULL (all caps) otherwise you can run an update statement where you could:", "output": "If you are using the table interface you can type in NULL (all caps) otherwise you can run an update statement where you could:", "answer": "If you are using the table interface you can type in NULL (all caps) otherwise you can run an update statement where you could:", "summary": "If you are using the table interface you can type in NULL (all caps) otherwise you can run an update statement where you could:"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n The \"proper conversion\" between <code>byte[]</code> and <code>String</code> is to explicitly state the encoding you want to use. If you start with a <code>byte[]</code> and it does not in fact contain text data, there is no \"proper conversion\". <code>String</code>s are for text, <code>byte[]</code> is for binary data, and the only really sensible thing to do is to avoid converting between them unless you absolutely have to. If you really must use a <code>String</code> to hold binary data then the safest way is to use Base64 encoding.", "output": "<code>String</code>s are for text, <code>byte[]</code> is for binary data, and the only really sensible thing to do is to avoid converting between them unless you absolutely have to. If you really must use a <code>String</code> to hold binary data then the safest way is to use Base64 encoding.", "answer": "The \"proper conversion\" between <code>byte[]</code> and <code>String</code> is to explicitly state the encoding you want to use. If you start with a <code>byte[]</code> and it does not in fact contain text data, there is no \"proper conversion\". <code>String</code>s are for text, <code>byte[]</code> is for binary data, and the only really sensible thing to do is to avoid converting between them unless you absolutely have to. If you really must use a <code>String</code> to hold binary data then the safest way is to use Base64 encoding.", "summary": "<code>String</code>s are for text, <code>byte[]</code> is for binary data, and the only really sensible thing to do is to avoid converting between them unless you absolutely have to. If you really must use a <code>String</code> to hold binary data then the safest way is to use Base64 encoding."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Change this: To this: Change this: To this: You need to use CAST. Learn all about CAST and CONVERT here, because data types are important!", "output": "You need to use CAST.", "answer": "Change this: To this: Change this: To this: You need to use CAST. Learn all about CAST and CONVERT here, because data types are important!", "summary": "You need to use CAST."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n You should generally use urllib2, since this makes things a bit easier at times by accepting Request objects and will also raise a URLException on protocol errors. With Google App Engine though, you can't use either. You have to use the URL Fetch API that Google provides in its sandboxed Python environment.", "output": "You should generally use urllib2, since this makes things a bit easier at times by accepting Request objects and will also raise a URLException on protocol errors. With Google App Engine though, you can't use either.", "answer": "You should generally use urllib2, since this makes things a bit easier at times by accepting Request objects and will also raise a URLException on protocol errors. With Google App Engine though, you can't use either. You have to use the URL Fetch API that Google provides in its sandboxed Python environment.", "summary": "You should generally use urllib2, since this makes things a bit easier at times by accepting Request objects and will also raise a URLException on protocol errors. With Google App Engine though, you can't use either."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Use WatiN if you need to see the impact of JS on the page [and you're prepared to start a browser]", "output": "Use WatiN if you need to see the impact of JS on the page [and you're prepared to start a browser]", "answer": "Use WatiN if you need to see the impact of JS on the page [and you're prepared to start a browser]", "summary": "Use WatiN if you need to see the impact of JS on the page [and you're prepared to start a browser]"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Here's how to do it using Xerces2. A tutorial for this, here (req. signup). Original attribution: blatantly copied from here: BIGBLOCK", "output": "Original attribution: blatantly copied from here: BIGBLOCK", "answer": "Here's how to do it using Xerces2. A tutorial for this, here (req. signup). Original attribution: blatantly copied from here: BIGBLOCK", "summary": "Original attribution: blatantly copied from here: BIGBLOCK"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n I set the below xml to the background of the Image View as Drawable. It works. BIGBLOCK And then add <code>android:background=\"@drawable/yourXmlFileName\"</code> to your <code>ImageView</code>", "output": "I set the below xml to the background of the Image View as Drawable. BIGBLOCK And then add <code>android:background=\"@drawable/yourXmlFileName\"</code> to your <code>ImageView</code>", "answer": "I set the below xml to the background of the Image View as Drawable. It works. BIGBLOCK And then add <code>android:background=\"@drawable/yourXmlFileName\"</code> to your <code>ImageView</code>", "summary": "I set the below xml to the background of the Image View as Drawable. BIGBLOCK And then add <code>android:background=\"@drawable/yourXmlFileName\"</code> to your <code>ImageView</code>"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Ditto on the getApplicationContext thing. The documents on the android site says to use it, but it doesn't work...grrrrr :-P Just do: \"this\" is usually your Activity from which you start the dialog.", "output": "Just do:", "answer": "Ditto on the getApplicationContext thing. The documents on the android site says to use it, but it doesn't work...grrrrr :-P Just do: \"this\" is usually your Activity from which you start the dialog.", "summary": "Just do:"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Here's how to use generics to get an array of precisely the type youÃ©ÂÂ¥Ã¦ÂªÂe looking for while preserving type safety (as opposed to the other answers, which will either give you back an <code>Object</code> array or result in warnings at compile time): That compiles without warnings, and as you can see in <code>main</code>, for whatever type you declare an instance of <code>GenSet</code> as, you can assign <code>a</code> to an array of that type, and you can assign an element from <code>a</code> to a variable of that type, meaning that the array and the values in the array are of the correct type. It works by using class literals as runtime type tokens, as discussed in the Java Tutorials. Class literals are treated by the compiler as instances of <code>java.lang.Class</code>. To use one, simply follow the name of a class with <code>.class</code>. So, <code>String.class</code> acts as a <code>Class</code> object representing the class <code>String</code>. This also works for interfaces, enums, any-dimensional arrays (e.g. <code>String[].class</code>), primitives (e.g. <code>int.class</code>), and the keyword <code>void</code> (i.e. <code>void.class</code>). <code>Class</code> itself is generic (declared as <code>Class&lt;T&gt;</code>, where <code>T</code> stands for the type that the <code>Class</code> object is representing), meaning that the type of <code>String.class</code> is <code>Class&lt;String&gt;</code>. So, whenever you call the constructor for <code>GenSet</code>, you pass in a class literal for the first argument representing an array of the <code>GenSet</code> instance's declared type (e.g. <code>String[].class</code> for <code>GenSet&lt;String&gt;</code>). Note that you won't be able to get an array of primitives, since primitives can't be used for type variables. Inside the constructor, calling the method <code>cast</code> returns the passed <code>Object</code> argument cast to the class represented by the <code>Class</code> object on which the method was called. Calling the static method <code>newInstance</code> in <code>java.lang.reflect.Array</code> returns as an <code>Object</code> an array of the type represented by the <code>Class</code> object passed as the first argument and of the length specified by the <code>int</code> passed as the second argument. Calling the method <code>getComponentType</code> returns a <code>Class</code> object representing the component type of the array represented by the <code>Class</code> object on which the method was called (e.g. <code>String.class</code> for <code>String[].class</code>, <code>null</code> if the <code>Class</code> object doesn't represent an array). That last sentence isn't entirely accurate. Calling <code>String[].class.getComponentType()</code> returns a <code>Class</code> object representing the class <code>String</code>, but its type is <code>Class&lt;?&gt;</code>, not <code>Class&lt;String&gt;</code>, which is why you can't do something like the following. Same goes for every method in <code>Class</code> that returns a <code>Class</code> object. Regarding Joachim Sauer's comment on this answer (I don't have enough reputation to comment on it myself), the example using the cast to <code>T[]</code> will result in a warning because the compiler can't guarantee type safety in that case. Edit regarding Ingo's comments:", "output": "Here's how to use generics to get an array of precisely the type youÃ©ÂÂ¥Ã¦ÂªÂe looking for while preserving type safety (as opposed to the other answers, which will either give you back an <code>Object</code> array or result in warnings at compile time): It works by using class literals as runtime type tokens, as discussed in the Java Tutorials. To use one, simply follow the name of a class with <code>.class</code>. This also works for interfaces, enums, any-dimensional arrays (e.g. Note that you won't be able to get an array of primitives, since primitives can't be used for type variables. Calling the static method <code>newInstance</code> in <code>java.lang.reflect.Array</code> returns as an <code>Object</code> an array of the type represented by the <code>Class</code> object passed as the first argument and of the length specified by the <code>int</code> passed as the second argument. Calling the method <code>getComponentType</code> returns a <code>Class</code> object representing the component type of the array represented by the <code>Class</code> object on which the method was called (e.g. Calling <code>String[].class.getComponentType()</code> returns a <code>Class</code> object representing the class <code>String</code>, but its type is <code>Class&lt;?&gt;</code>, not <code>Class&lt;String&gt;</code>, which is why you can't do something like the following.", "answer": "Here's how to use generics to get an array of precisely the type youÃ©ÂÂ¥Ã¦ÂªÂe looking for while preserving type safety (as opposed to the other answers, which will either give you back an <code>Object</code> array or result in warnings at compile time): That compiles without warnings, and as you can see in <code>main</code>, for whatever type you declare an instance of <code>GenSet</code> as, you can assign <code>a</code> to an array of that type, and you can assign an element from <code>a</code> to a variable of that type, meaning that the array and the values in the array are of the correct type. It works by using class literals as runtime type tokens, as discussed in the Java Tutorials. Class literals are treated by the compiler as instances of <code>java.lang.Class</code>. To use one, simply follow the name of a class with <code>.class</code>. So, <code>String.class</code> acts as a <code>Class</code> object representing the class <code>String</code>. This also works for interfaces, enums, any-dimensional arrays (e.g. <code>String[].class</code>), primitives (e.g. <code>int.class</code>), and the keyword <code>void</code> (i.e. <code>void.class</code>). <code>Class</code> itself is generic (declared as <code>Class&lt;T&gt;</code>, where <code>T</code> stands for the type that the <code>Class</code> object is representing), meaning that the type of <code>String.class</code> is <code>Class&lt;String&gt;</code>. So, whenever you call the constructor for <code>GenSet</code>, you pass in a class literal for the first argument representing an array of the <code>GenSet</code> instance's declared type (e.g. <code>String[].class</code> for <code>GenSet&lt;String&gt;</code>). Note that you won't be able to get an array of primitives, since primitives can't be used for type variables. Inside the constructor, calling the method <code>cast</code> returns the passed <code>Object</code> argument cast to the class represented by the <code>Class</code> object on which the method was called. Calling the static method <code>newInstance</code> in <code>java.lang.reflect.Array</code> returns as an <code>Object</code> an array of the type represented by the <code>Class</code> object passed as the first argument and of the length specified by the <code>int</code> passed as the second argument. Calling the method <code>getComponentType</code> returns a <code>Class</code> object representing the component type of the array represented by the <code>Class</code> object on which the method was called (e.g. <code>String.class</code> for <code>String[].class</code>, <code>null</code> if the <code>Class</code> object doesn't represent an array). That last sentence isn't entirely accurate. Calling <code>String[].class.getComponentType()</code> returns a <code>Class</code> object representing the class <code>String</code>, but its type is <code>Class&lt;?&gt;</code>, not <code>Class&lt;String&gt;</code>, which is why you can't do something like the following. Same goes for every method in <code>Class</code> that returns a <code>Class</code> object. Regarding Joachim Sauer's comment on this answer (I don't have enough reputation to comment on it myself), the example using the cast to <code>T[]</code> will result in a warning because the compiler can't guarantee type safety in that case. Edit regarding Ingo's comments:", "summary": "Here's how to use generics to get an array of precisely the type youÃ©ÂÂ¥Ã¦ÂªÂe looking for while preserving type safety (as opposed to the other answers, which will either give you back an <code>Object</code> array or result in warnings at compile time): It works by using class literals as runtime type tokens, as discussed in the Java Tutorials. To use one, simply follow the name of a class with <code>.class</code>. This also works for interfaces, enums, any-dimensional arrays (e.g. Note that you won't be able to get an array of primitives, since primitives can't be used for type variables. Calling the static method <code>newInstance</code> in <code>java.lang.reflect.Array</code> returns as an <code>Object</code> an array of the type represented by the <code>Class</code> object passed as the first argument and of the length specified by the <code>int</code> passed as the second argument. Calling the method <code>getComponentType</code> returns a <code>Class</code> object representing the component type of the array represented by the <code>Class</code> object on which the method was called (e.g. Calling <code>String[].class.getComponentType()</code> returns a <code>Class</code> object representing the class <code>String</code>, but its type is <code>Class&lt;?&gt;</code>, not <code>Class&lt;String&gt;</code>, which is why you can't do something like the following."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n your programs syntax, or for that matter many other things such as natural languages can be parsed using binary tree (though not necessarily).", "output": "your programs syntax, or for that matter many other things such as natural languages can be parsed using binary tree (though not necessarily).", "answer": "your programs syntax, or for that matter many other things such as natural languages can be parsed using binary tree (though not necessarily).", "summary": "your programs syntax, or for that matter many other things such as natural languages can be parsed using binary tree (though not necessarily)."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n You either return a class instance or use out parameters. Here's an example of out parameters: Call it like this:", "output": "You either return a class instance or use out parameters.", "answer": "You either return a class instance or use out parameters. Here's an example of out parameters: Call it like this:", "summary": "You either return a class instance or use out parameters."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n If your ultimate aim is to get debugging messages to the console, you can use qDebug(). You can use like, <code>qDebug()&lt;&lt;string;</code> which will print the contents to the <em>console</em>. This way is better than converting it into <code>std::string</code> just for the sake of debugging messages.", "output": "If your ultimate aim is to get debugging messages to the console, you can use qDebug().", "answer": "If your ultimate aim is to get debugging messages to the console, you can use qDebug(). You can use like, <code>qDebug()&lt;&lt;string;</code> which will print the contents to the <em>console</em>. This way is better than converting it into <code>std::string</code> just for the sake of debugging messages.", "summary": "If your ultimate aim is to get debugging messages to the console, you can use qDebug()."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n I always just look at <code>SHOW CREATE TABLE mydatabase.mytable</code>. For the database, it appears you need to look at <code>SELECT DEFAULT_CHARACTER_SET_NAME FROM information_schema.SCHEMATA</code>.", "output": "I always just look at <code>SHOW CREATE TABLE mydatabase.mytable</code>.", "answer": "I always just look at <code>SHOW CREATE TABLE mydatabase.mytable</code>. For the database, it appears you need to look at <code>SELECT DEFAULT_CHARACTER_SET_NAME FROM information_schema.SCHEMATA</code>.", "summary": "I always just look at <code>SHOW CREATE TABLE mydatabase.mytable</code>."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Any time you cannot have iterators invalidated.", "output": "Any time you cannot have iterators invalidated.", "answer": "Any time you cannot have iterators invalidated.", "summary": "Any time you cannot have iterators invalidated."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Here is the simplified solution: BIGBLOCK <strong>Result:</strong> BIGBLOCK The <code>strtotime</code> documentation reads: Dates in the <strong><em>m/d/y</em></strong> or <strong><em>d-m-y</em></strong> formats are disambiguated by looking at the separator between the various components: if the separator is a slash (<strong>/</strong>), then the American <strong><em>m/d/y</em></strong> is assumed; whereas if the separator is a dash (<strong>-</strong>) or a dot (<strong>.</strong>), then the European <strong><em>d-m-y</em></strong> format is assumed.", "output": "BIGBLOCK Dates in the <strong><em>m/d/y</em></strong> or <strong><em>d-m-y</em></strong> formats are disambiguated by looking at the separator between the various components: if the separator is a slash (<strong>/</strong>), then the American <strong><em>m/d/y</em></strong> is assumed; whereas if the separator is a dash (<strong>-</strong>) or a dot (<strong>.</strong>), then the European <strong><em>d-m-y</em></strong> format is assumed.", "answer": "Here is the simplified solution: BIGBLOCK <strong>Result:</strong> BIGBLOCK The <code>strtotime</code> documentation reads: Dates in the <strong><em>m/d/y</em></strong> or <strong><em>d-m-y</em></strong> formats are disambiguated by looking at the separator between the various components: if the separator is a slash (<strong>/</strong>), then the American <strong><em>m/d/y</em></strong> is assumed; whereas if the separator is a dash (<strong>-</strong>) or a dot (<strong>.</strong>), then the European <strong><em>d-m-y</em></strong> format is assumed.", "summary": "BIGBLOCK Dates in the <strong><em>m/d/y</em></strong> or <strong><em>d-m-y</em></strong> formats are disambiguated by looking at the separator between the various components: if the separator is a slash (<strong>/</strong>), then the American <strong><em>m/d/y</em></strong> is assumed; whereas if the separator is a dash (<strong>-</strong>) or a dot (<strong>.</strong>), then the European <strong><em>d-m-y</em></strong> format is assumed."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Similar to this question. In essence it means that the method <code>Bar</code> will not modify non mutable member variables of <code>Foo</code>.", "output": "In essence it means that the method <code>Bar</code> will not modify non mutable member variables of <code>Foo</code>.", "answer": "Similar to this question. In essence it means that the method <code>Bar</code> will not modify non mutable member variables of <code>Foo</code>.", "summary": "In essence it means that the method <code>Bar</code> will not modify non mutable member variables of <code>Foo</code>."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Git is a platform, Mercurial is Ã©ÂÂ¥Ã¦Â¸ÂustÃ©Â?an application. Git is a versioned filesystem platform that happens to ship with a DVCS app in the box, but as normal for platform apps, it is more complex and has rougher edges than focused apps do. But this also means gitÃ©ÂÂ¥Ã¦ÂªÂ VCS is immensely flexible, and there is a huge depth of non-source-control things you can do with git. That is the essence of the difference. Git is best understood from the ground up Ã©Â?from the repository format up. Scott ChaconÃ©ÂÂ¥Ã¦ÂªÂ Git Talk is an excellent primer for this. If you try to use git without knowing whatÃ©ÂÂ¥Ã¦ÂªÂ happening under the hood, youÃ©ÂÂ¥Ã¦ÂªÂl end up confused at some point (unless you stick to only very basic functionality). This may sound stupid when all you want is a DVCS for your daily programming routine, but the genius of git is that the repository format is actually very simple and you <em>can</em> understand gitÃ©ÂÂ¥Ã¦ÂªÂ entire operation quite easily. For some more technicality-oriented comparisons, the best articles I have personally seen are Dustin SallingsÃ©Â? <li>The Differences Between Mercurial and Git <li>Reddit thread where git-experienced Dustin answers his own git neophyte questions He has actually used both DVCSs extensively and understands them both well Ã©Â?and ended up preferring git.", "output": "Git is a platform, Mercurial is Ã©ÂÂ¥Ã¦Â¸ÂustÃ©Â?an application. Git is a versioned filesystem platform that happens to ship with a DVCS app in the box, but as normal for platform apps, it is more complex and has rougher edges than focused apps do. But this also means gitÃ©ÂÂ¥Ã¦ÂªÂ VCS is immensely flexible, and there is a huge depth of non-source-control things you can do with git. If you try to use git without knowing whatÃ©ÂÂ¥Ã¦ÂªÂ happening under the hood, youÃ©ÂÂ¥Ã¦ÂªÂl end up confused at some point (unless you stick to only very basic functionality).", "answer": "Git is a platform, Mercurial is Ã©ÂÂ¥Ã¦Â¸ÂustÃ©Â?an application. Git is a versioned filesystem platform that happens to ship with a DVCS app in the box, but as normal for platform apps, it is more complex and has rougher edges than focused apps do. But this also means gitÃ©ÂÂ¥Ã¦ÂªÂ VCS is immensely flexible, and there is a huge depth of non-source-control things you can do with git. That is the essence of the difference. Git is best understood from the ground up Ã©Â?from the repository format up. Scott ChaconÃ©ÂÂ¥Ã¦ÂªÂ Git Talk is an excellent primer for this. If you try to use git without knowing whatÃ©ÂÂ¥Ã¦ÂªÂ happening under the hood, youÃ©ÂÂ¥Ã¦ÂªÂl end up confused at some point (unless you stick to only very basic functionality). This may sound stupid when all you want is a DVCS for your daily programming routine, but the genius of git is that the repository format is actually very simple and you <em>can</em> understand gitÃ©ÂÂ¥Ã¦ÂªÂ entire operation quite easily. For some more technicality-oriented comparisons, the best articles I have personally seen are Dustin SallingsÃ©Â? <li>The Differences Between Mercurial and Git <li>Reddit thread where git-experienced Dustin answers his own git neophyte questions He has actually used both DVCSs extensively and understands them both well Ã©Â?and ended up preferring git.", "summary": "Git is a platform, Mercurial is Ã©ÂÂ¥Ã¦Â¸ÂustÃ©Â?an application. Git is a versioned filesystem platform that happens to ship with a DVCS app in the box, but as normal for platform apps, it is more complex and has rougher edges than focused apps do. But this also means gitÃ©ÂÂ¥Ã¦ÂªÂ VCS is immensely flexible, and there is a huge depth of non-source-control things you can do with git. If you try to use git without knowing whatÃ©ÂÂ¥Ã¦ÂªÂ happening under the hood, youÃ©ÂÂ¥Ã¦ÂªÂl end up confused at some point (unless you stick to only very basic functionality)."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Misko Hevery, from Google, has some interesting articles on exactly this topic... Singletons are Pathological Liars has a unit testing example that illustrates how singletons can make it difficult to figure out dependency chains and start or test an application. It is a fairly extreme example of abuse, but the point that he makes is still valid: Singletons are nothing more than global state. Global state makes it so your objects can secretly get hold of things which are not declared in their APIs, and, as a result, Singletons make your APIs into pathological liars. Where have all the Singletons Gone makes the point that dependency injection has made it easy to get instances to constructors that require them, which alleviates the underlying need behind the bad, global Singletons decried in the first article.", "output": "Singletons are nothing more than global state. Global state makes it so your objects can secretly get hold of things which are not declared in their APIs, and, as a result, Singletons make your APIs into pathological liars.", "answer": "Misko Hevery, from Google, has some interesting articles on exactly this topic... Singletons are Pathological Liars has a unit testing example that illustrates how singletons can make it difficult to figure out dependency chains and start or test an application. It is a fairly extreme example of abuse, but the point that he makes is still valid: Singletons are nothing more than global state. Global state makes it so your objects can secretly get hold of things which are not declared in their APIs, and, as a result, Singletons make your APIs into pathological liars. Where have all the Singletons Gone makes the point that dependency injection has made it easy to get instances to constructors that require them, which alleviates the underlying need behind the bad, global Singletons decried in the first article.", "summary": "Singletons are nothing more than global state. Global state makes it so your objects can secretly get hold of things which are not declared in their APIs, and, as a result, Singletons make your APIs into pathological liars."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n And to add to this answer, make sure the image itself has a transparent background.", "output": "And to add to this answer, make sure the image itself has a transparent background.", "answer": "And to add to this answer, make sure the image itself has a transparent background.", "summary": "And to add to this answer, make sure the image itself has a transparent background."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Coerces <code>oObject</code> to boolean. If it was falsey (e.g. 0, <code>null</code>, <code>undefined</code>, etc. ), it will be <code>false</code>, otherwise, <code>true</code>. So <code>! !</code> is not an operator, it's just the <code>!</code> operator twice. Real World Example \"Test IE version\": If you __________________________ÃÂ¢________________________________ but if you __________________________ÃÂ¢________________________________", "output": "Coerces <code>oObject</code> to boolean. If it was falsey (e.g. 0, <code>null</code>, <code>undefined</code>, etc. ), it will be <code>false</code>, otherwise, <code>true</code>.", "answer": "Coerces <code>oObject</code> to boolean. If it was falsey (e.g. 0, <code>null</code>, <code>undefined</code>, etc. ), it will be <code>false</code>, otherwise, <code>true</code>. So <code>! !</code> is not an operator, it's just the <code>!</code> operator twice. Real World Example \"Test IE version\": If you __________________________ÃÂ¢________________________________ but if you __________________________ÃÂ¢________________________________", "summary": "Coerces <code>oObject</code> to boolean. If it was falsey (e.g. 0, <code>null</code>, <code>undefined</code>, etc. ), it will be <code>false</code>, otherwise, <code>true</code>."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n There are many LINQ equivalents for Java, see here for a comparison. For a typesafe Quaere/LINQ style framework, consider using Querydsl. Querydsl supports JPA/Hibernate, JDO, SQL and Java Collections. I am the maintainer of Querydsl, so this answer is biased.", "output": "There are many LINQ equivalents for Java, see here for a comparison. For a typesafe Quaere/LINQ style framework, consider using Querydsl.", "answer": "There are many LINQ equivalents for Java, see here for a comparison. For a typesafe Quaere/LINQ style framework, consider using Querydsl. Querydsl supports JPA/Hibernate, JDO, SQL and Java Collections. I am the maintainer of Querydsl, so this answer is biased.", "summary": "There are many LINQ equivalents for Java, see here for a comparison. For a typesafe Quaere/LINQ style framework, consider using Querydsl."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Suppose you want to see the difference between commits 012345 and abcdef. The following should do what you want:", "output": "The following should do what you want:", "answer": "Suppose you want to see the difference between commits 012345 and abcdef. The following should do what you want:", "summary": "The following should do what you want:"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n <code>lambda</code> is just a fancy way of saying <code>function</code>. Other than its name, there is nothing obscure, intimidating or cryptic about it. When you read the following line, replace <code>lambda</code> by <code>function</code> in your mind: It just defines a function of <code>x</code>. Some other languages, like <code>R</code>, say it explicitly: You see? It's one of the most natural things to do in programming.", "output": "<code>lambda</code> is just a fancy way of saying <code>function</code>. Other than its name, there is nothing obscure, intimidating or cryptic about it.", "answer": "<code>lambda</code> is just a fancy way of saying <code>function</code>. Other than its name, there is nothing obscure, intimidating or cryptic about it. When you read the following line, replace <code>lambda</code> by <code>function</code> in your mind: It just defines a function of <code>x</code>. Some other languages, like <code>R</code>, say it explicitly: You see? It's one of the most natural things to do in programming.", "summary": "<code>lambda</code> is just a fancy way of saying <code>function</code>. Other than its name, there is nothing obscure, intimidating or cryptic about it."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Please define brightness. If you're looking for how close to white the color is you can use Euclidean Distance from (255, 255, 255)", "output": "If you're looking for how close to white the color is you can use Euclidean Distance from (255, 255, 255)", "answer": "Please define brightness. If you're looking for how close to white the color is you can use Euclidean Distance from (255, 255, 255)", "summary": "If you're looking for how close to white the color is you can use Euclidean Distance from (255, 255, 255)"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n I think the best description about \"Mercurial vs. Git\" is: \"Git is Wesley Snipes. Mercurial is Denzel Washington\"", "output": "\"Git is Wesley Snipes. Mercurial is Denzel Washington\"", "answer": "I think the best description about \"Mercurial vs. Git\" is: \"Git is Wesley Snipes. Mercurial is Denzel Washington\"", "summary": "\"Git is Wesley Snipes. Mercurial is Denzel Washington\""}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Normally, there's no need to set fields to null. I'd always recommend disposing unmanaged resources however. From experience I'd also advise you to do the following: <li>Unsubscribe from events if you no longer need them. <li>Set any field holding a delegate or an expression to null if it's no longer needed. I've come across some very hard to find issues that were the direct result of not following the advice above. A good place to do this is in Dispose(), but sooner is usually better. In general, if a reference exists to an object the garbage collector (GC) may take a couple of generations longer to figure out that an object is no longer in use. All the while the object remains in memory. That may not be a problem until you find that your app is using a lot more memory than you'd expect. When that happens, hook up a memory profiler to see what objects are not being cleaned up. Setting fields referencing other objects to null and clearing collections on disposal can really help the GC figure out what objects it can remove from memory. The GC will reclaim the used memory faster making your app a lot less memory hungry and faster.", "output": "From experience I'd also advise you to do the following: <li>Unsubscribe from events if you no longer need them. <li>Set any field holding a delegate or an expression to null if it's no longer needed. A good place to do this is in Dispose(), but sooner is usually better. Setting fields referencing other objects to null and clearing collections on disposal can really help the GC figure out what objects it can remove from memory.", "answer": "Normally, there's no need to set fields to null. I'd always recommend disposing unmanaged resources however. From experience I'd also advise you to do the following: <li>Unsubscribe from events if you no longer need them. <li>Set any field holding a delegate or an expression to null if it's no longer needed. I've come across some very hard to find issues that were the direct result of not following the advice above. A good place to do this is in Dispose(), but sooner is usually better. In general, if a reference exists to an object the garbage collector (GC) may take a couple of generations longer to figure out that an object is no longer in use. All the while the object remains in memory. That may not be a problem until you find that your app is using a lot more memory than you'd expect. When that happens, hook up a memory profiler to see what objects are not being cleaned up. Setting fields referencing other objects to null and clearing collections on disposal can really help the GC figure out what objects it can remove from memory. The GC will reclaim the used memory faster making your app a lot less memory hungry and faster.", "summary": "From experience I'd also advise you to do the following: <li>Unsubscribe from events if you no longer need them. <li>Set any field holding a delegate or an expression to null if it's no longer needed. A good place to do this is in Dispose(), but sooner is usually better. Setting fields referencing other objects to null and clearing collections on disposal can really help the GC figure out what objects it can remove from memory."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n You can't do this with <code>Html.ActionLink</code>. You should use <code>Url.RouteUrl</code> and use the URL to construct the element you want.", "output": "You should use <code>Url.RouteUrl</code> and use the URL to construct the element you want.", "answer": "You can't do this with <code>Html.ActionLink</code>. You should use <code>Url.RouteUrl</code> and use the URL to construct the element you want.", "summary": "You should use <code>Url.RouteUrl</code> and use the URL to construct the element you want."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Give the window a 'specs' parameter with width/height. See here for all the possible options. When you specify a width/height, it will open it in a new window instead of a tab.", "output": "Give the window a 'specs' parameter with width/height.", "answer": "Give the window a 'specs' parameter with width/height. See here for all the possible options. When you specify a width/height, it will open it in a new window instead of a tab.", "summary": "Give the window a 'specs' parameter with width/height."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n <li>Binary trees are used in Huffman coding, which are used as a compression code. <li>Binary trees are used in Binary search trees, which are useful for maintaining records of data without much extra space.", "output": "<li>Binary trees are used in Huffman coding, which are used as a compression code. <li>Binary trees are used in Binary search trees, which are useful for maintaining records of data without much extra space.", "answer": "<li>Binary trees are used in Huffman coding, which are used as a compression code. <li>Binary trees are used in Binary search trees, which are useful for maintaining records of data without much extra space.", "summary": "<li>Binary trees are used in Huffman coding, which are used as a compression code. <li>Binary trees are used in Binary search trees, which are useful for maintaining records of data without much extra space."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Another alternative is the <code>typeof</code> operator: Yet another alternative is to use a logging library, such as my own log4javascript.", "output": "Another alternative is the <code>typeof</code> operator: Yet another alternative is to use a logging library, such as my own log4javascript.", "answer": "Another alternative is the <code>typeof</code> operator: Yet another alternative is to use a logging library, such as my own log4javascript.", "summary": "Another alternative is the <code>typeof</code> operator: Yet another alternative is to use a logging library, such as my own log4javascript."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n In C# 6 and above you can simply use the syntax: Note that to have a <code>readonly</code> property simply omit the set, as so: You can also assign <code>readonly</code> auto-properties from the constructor. Prior to this I responded as below. I'd avoid adding a default to the constructor; leave that for dynamic assignments and avoid having two points at which the variable is assigned (i.e. the type default and in the constructor). Typically I'd simply write a normal property in such cases. One other option is to do what ASP.Net does and define defaults via an attribute: http://msdn.microsoft.com/en-us/library/system.componentmodel.defaultvalueattribute.aspx", "output": "In C# 6 and above you can simply use the syntax: You can also assign <code>readonly</code> auto-properties from the constructor. I'd avoid adding a default to the constructor; leave that for dynamic assignments and avoid having two points at which the variable is assigned (i.e.", "answer": "In C# 6 and above you can simply use the syntax: Note that to have a <code>readonly</code> property simply omit the set, as so: You can also assign <code>readonly</code> auto-properties from the constructor. Prior to this I responded as below. I'd avoid adding a default to the constructor; leave that for dynamic assignments and avoid having two points at which the variable is assigned (i.e. the type default and in the constructor). Typically I'd simply write a normal property in such cases. One other option is to do what ASP.Net does and define defaults via an attribute: http://msdn.microsoft.com/en-us/library/system.componentmodel.defaultvalueattribute.aspx", "summary": "In C# 6 and above you can simply use the syntax: You can also assign <code>readonly</code> auto-properties from the constructor. I'd avoid adding a default to the constructor; leave that for dynamic assignments and avoid having two points at which the variable is assigned (i.e."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Objects never go out of scope in C# as they do in C++. They are dealt with by the Garbage Collector automatically when they are not used anymore. This is a more complicated approach than C++ where the scope of a variable is entirely deterministic. CLR garbage collector actively goes through all objects that have been created and works out if they are being used. An object can go \"out of scope\" in one function but if its value is returned, then GC would look at whether or not the calling function holds onto the return value. Setting object references to <code>null</code> is unnecessary as garbage collection works by working out which objects are being referenced by other objects. In practice, you don't have to worry about destruction, it just works and it's great :) <code>Dispose</code> must be called on all objects that implement <code>IDisposable</code> when you are finished working with them. Normally you would use a <code>using</code> block with those objects like so: BIGBLOCK <strong>EDIT</strong> On variable scope. Craig has asked whether the variable scope has any effect on the object lifetime. To properly explain that aspect of CLR, I'll need to explain a few concepts from C++ and C#. Actual variable scope In both languages the variable can only be used in the same scope as it was defined - class, function or a statement block enclosed by braces. The subtle difference, however, is that in C#, variables cannot be redefined in a nested block. In C++, this is perfectly legal: BIGBLOCK In C#, however you get a a compiler error: BIGBLOCK This makes sense if you look at generated MSIL - all the variables used by the function are defined at the start of the function. Take a look at this function: BIGBLOCK Below is the generated IL. Note that iVal2, which is defined inside the if block is actually defined at function level. Effectively this means that C# only has class and function level scope as far as variable lifetime is concerned. BIGBLOCK C++ scope and object lifetime Whenever a C++ variable, allocated on the stack, goes out of scope it gets destructed. Remember that in C++ you can create objects on the stack or on the heap. When you create them on the stack, once execution leaves the scope, they get popped off the stack and gets destroyed. BIGBLOCK When C++ objects are created on the heap, they must be explicitly destroyed, otherwise it is a memory leak. No such problem with stack variables though. C# Object Lifetime In CLR, objects (i.e. reference types) are <strong>always</strong> created on the managed heap. This is further reinforced by object creation syntax. Consider this code snippet. BIGBLOCK In C++ this would create an instance on <code>MyClass</code> on the stack and call its default constructor. In C# it would create a reference to class <code>MyClass</code> that doesn't point to anything. The only way to create an instance of a class is by using <code>new</code> operator: BIGBLOCK In a way, C# objects are a lot like objects that are created using <code>new</code> syntax in C++ - they are created on the heap but unlike C++ objects, they are managed by the runtime, so you don't have to worry about destructing them. Since the objects are <strong>always</strong> on the heap the fact that object references (i.e. pointers) go out of scope becomes moot. There are more factors involved in determining if an object is to be collected than simply presence of references to the object. C# Object references Jon Skeet compared object references in Java to pieces of string that are attached to the balloon, which is the object. Same analogy applies to C# object references. They simply point to a location of the heap that contains the object. Thus, setting it to null has no immediate effect on the object lifetime, the balloon continues to exist, until the GC \"pops\" it. Continuing down the balloon analogy, it would seem logical that once the balloon has no strings attached to it, it can be destroyed. In fact this is exactly how reference counted objects work in non-managed languages. Except this approach doesn't work for circular references very well. Imagine two balloons that are attached together by a string but neither balloon has a string to anything else. Under simple ref counting rules, they both continue to exist, even though the whole balloon group is \"orphaned\". .NET objects are a lot like helium balloons under a roof. When the roof opens (GC runs) - the unused balloons float away, even though there might be groups of balloons that are tethered together. .NET GC uses a combination of generational GC and mark and sweep. Generational approach involves the runtime favouring to inspect objects that have been allocated most recently, as they are more likely to be unused and mark and sweep involves runtime going through the whole object graph and working out if there are object groups that are unused. This adequately deals with circular dependency problem. Also, .NET GC runs on another thread(so called finalizer thread) as it has quite a bit to do and doing that on the main thread would interrupt your program.", "output": "Objects never go out of scope in C# as they do in C++. CLR garbage collector actively goes through all objects that have been created and works out if they are being used. In practice, you don't have to worry about destruction, it just works and it's great :) <strong>EDIT</strong> On variable scope. To properly explain that aspect of CLR, I'll need to explain a few concepts from C++ and C#. In both languages the variable can only be used in the same scope as it was defined - class, function or a statement block enclosed by braces. The subtle difference, however, is that in C#, variables cannot be redefined in a nested block. In C++, this is perfectly legal: BIGBLOCK In C#, however you get a a compiler error: BIGBLOCK Effectively this means that C# only has class and function level scope as far as variable lifetime is concerned. Whenever a C++ variable, allocated on the stack, goes out of scope it gets destructed. In CLR, objects (i.e. reference types) are <strong>always</strong> created on the managed heap. In a way, C# objects are a lot like objects that are created using <code>new</code> syntax in C++ - they are created on the heap but unlike C++ objects, they are managed by the runtime, so you don't have to worry about destructing them. Jon Skeet compared object references in Java to pieces of string that are attached to the balloon, which is the object. Same analogy applies to C# object references. They simply point to a location of the heap that contains the object. Continuing down the balloon analogy, it would seem logical that once the balloon has no strings attached to it, it can be destroyed. In fact this is exactly how reference counted objects work in non-managed languages. Except this approach doesn't work for circular references very well. Imagine two balloons that are attached together by a string but neither balloon has a string to anything else. Under simple ref counting rules, they both continue to exist, even though the whole balloon group is \"orphaned\".", "answer": "Objects never go out of scope in C# as they do in C++. They are dealt with by the Garbage Collector automatically when they are not used anymore. This is a more complicated approach than C++ where the scope of a variable is entirely deterministic. CLR garbage collector actively goes through all objects that have been created and works out if they are being used. An object can go \"out of scope\" in one function but if its value is returned, then GC would look at whether or not the calling function holds onto the return value. Setting object references to <code>null</code> is unnecessary as garbage collection works by working out which objects are being referenced by other objects. In practice, you don't have to worry about destruction, it just works and it's great :) <code>Dispose</code> must be called on all objects that implement <code>IDisposable</code> when you are finished working with them. Normally you would use a <code>using</code> block with those objects like so: BIGBLOCK <strong>EDIT</strong> On variable scope. Craig has asked whether the variable scope has any effect on the object lifetime. To properly explain that aspect of CLR, I'll need to explain a few concepts from C++ and C#. Actual variable scope In both languages the variable can only be used in the same scope as it was defined - class, function or a statement block enclosed by braces. The subtle difference, however, is that in C#, variables cannot be redefined in a nested block. In C++, this is perfectly legal: BIGBLOCK In C#, however you get a a compiler error: BIGBLOCK This makes sense if you look at generated MSIL - all the variables used by the function are defined at the start of the function. Take a look at this function: BIGBLOCK Below is the generated IL. Note that iVal2, which is defined inside the if block is actually defined at function level. Effectively this means that C# only has class and function level scope as far as variable lifetime is concerned. BIGBLOCK C++ scope and object lifetime Whenever a C++ variable, allocated on the stack, goes out of scope it gets destructed. Remember that in C++ you can create objects on the stack or on the heap. When you create them on the stack, once execution leaves the scope, they get popped off the stack and gets destroyed. BIGBLOCK When C++ objects are created on the heap, they must be explicitly destroyed, otherwise it is a memory leak. No such problem with stack variables though. C# Object Lifetime In CLR, objects (i.e. reference types) are <strong>always</strong> created on the managed heap. This is further reinforced by object creation syntax. Consider this code snippet. BIGBLOCK In C++ this would create an instance on <code>MyClass</code> on the stack and call its default constructor. In C# it would create a reference to class <code>MyClass</code> that doesn't point to anything. The only way to create an instance of a class is by using <code>new</code> operator: BIGBLOCK In a way, C# objects are a lot like objects that are created using <code>new</code> syntax in C++ - they are created on the heap but unlike C++ objects, they are managed by the runtime, so you don't have to worry about destructing them. Since the objects are <strong>always</strong> on the heap the fact that object references (i.e. pointers) go out of scope becomes moot. There are more factors involved in determining if an object is to be collected than simply presence of references to the object. C# Object references Jon Skeet compared object references in Java to pieces of string that are attached to the balloon, which is the object. Same analogy applies to C# object references. They simply point to a location of the heap that contains the object. Thus, setting it to null has no immediate effect on the object lifetime, the balloon continues to exist, until the GC \"pops\" it. Continuing down the balloon analogy, it would seem logical that once the balloon has no strings attached to it, it can be destroyed. In fact this is exactly how reference counted objects work in non-managed languages. Except this approach doesn't work for circular references very well. Imagine two balloons that are attached together by a string but neither balloon has a string to anything else. Under simple ref counting rules, they both continue to exist, even though the whole balloon group is \"orphaned\". .NET objects are a lot like helium balloons under a roof. When the roof opens (GC runs) - the unused balloons float away, even though there might be groups of balloons that are tethered together. .NET GC uses a combination of generational GC and mark and sweep. Generational approach involves the runtime favouring to inspect objects that have been allocated most recently, as they are more likely to be unused and mark and sweep involves runtime going through the whole object graph and working out if there are object groups that are unused. This adequately deals with circular dependency problem. Also, .NET GC runs on another thread(so called finalizer thread) as it has quite a bit to do and doing that on the main thread would interrupt your program.", "summary": "Objects never go out of scope in C# as they do in C++. CLR garbage collector actively goes through all objects that have been created and works out if they are being used. In practice, you don't have to worry about destruction, it just works and it's great :) <strong>EDIT</strong> On variable scope. To properly explain that aspect of CLR, I'll need to explain a few concepts from C++ and C#. In both languages the variable can only be used in the same scope as it was defined - class, function or a statement block enclosed by braces. The subtle difference, however, is that in C#, variables cannot be redefined in a nested block. In C++, this is perfectly legal: BIGBLOCK In C#, however you get a a compiler error: BIGBLOCK Effectively this means that C# only has class and function level scope as far as variable lifetime is concerned. Whenever a C++ variable, allocated on the stack, goes out of scope it gets destructed. In CLR, objects (i.e. reference types) are <strong>always</strong> created on the managed heap. In a way, C# objects are a lot like objects that are created using <code>new</code> syntax in C++ - they are created on the heap but unlike C++ objects, they are managed by the runtime, so you don't have to worry about destructing them. Jon Skeet compared object references in Java to pieces of string that are attached to the balloon, which is the object. Same analogy applies to C# object references. They simply point to a location of the heap that contains the object. Continuing down the balloon analogy, it would seem logical that once the balloon has no strings attached to it, it can be destroyed. In fact this is exactly how reference counted objects work in non-managed languages. Except this approach doesn't work for circular references very well. Imagine two balloons that are attached together by a string but neither balloon has a string to anything else. Under simple ref counting rules, they both continue to exist, even though the whole balloon group is \"orphaned\"."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n attr_accessor is just a method. (The link should provide more insight with how it works - look at the pairs of methods generated, and a tutorial should show you how to use it.) The trick is that <code>class</code> is not a definition in Ruby (it is \"just a definition\" in languages like C++ and Java), but it is an expression that evaluates. It is during this evaluation when the <code>attr_accessor</code> method is invoked which in turn modifies the current class - remember the implicit receiver: <code>self.attr_accessor</code>, where <code>self</code> is the \"open\" class object at this point. The need for <code>attr_accessor</code> and friends, is, well: Ruby, like Smalltalk, does not allow instance variables to be accessed outside of methods1 for that object. That is, instance variables cannot be accessed in the <code>x.y</code> form as is common in say, Java or even Python. In Ruby <code>y</code> is always taken as a message to send (or \"method to call\"). Thus the <code>attr_*</code> methods create wrappers which proxy the instance <code>@variable</code> access through dynamically created methods. Boilerplate sucks Hope this clarifies some of the little details. Happy coding. 1 This isn't strictly true and there are some \"techniques\" around this, but there is no syntax support for \"public instance variable\" access.", "output": "attr_accessor is just a method.", "answer": "attr_accessor is just a method. (The link should provide more insight with how it works - look at the pairs of methods generated, and a tutorial should show you how to use it.) The trick is that <code>class</code> is not a definition in Ruby (it is \"just a definition\" in languages like C++ and Java), but it is an expression that evaluates. It is during this evaluation when the <code>attr_accessor</code> method is invoked which in turn modifies the current class - remember the implicit receiver: <code>self.attr_accessor</code>, where <code>self</code> is the \"open\" class object at this point. The need for <code>attr_accessor</code> and friends, is, well: Ruby, like Smalltalk, does not allow instance variables to be accessed outside of methods1 for that object. That is, instance variables cannot be accessed in the <code>x.y</code> form as is common in say, Java or even Python. In Ruby <code>y</code> is always taken as a message to send (or \"method to call\"). Thus the <code>attr_*</code> methods create wrappers which proxy the instance <code>@variable</code> access through dynamically created methods. Boilerplate sucks Hope this clarifies some of the little details. Happy coding. 1 This isn't strictly true and there are some \"techniques\" around this, but there is no syntax support for \"public instance variable\" access.", "summary": "attr_accessor is just a method."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Try something like: BIGBLOCK Here is the page about that in the jQuery documentation", "output": "Try something like: BIGBLOCK", "answer": "Try something like: BIGBLOCK Here is the page about that in the jQuery documentation", "summary": "Try something like: BIGBLOCK"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n <code>=</code>, the indent command can take motions. So, <code>gg</code> to get the start of the file, <code>=</code> to indent, <code>G</code> to the end of the file, <code>gg=G</code>.", "output": "So, <code>gg</code> to get the start of the file, <code>=</code> to indent, <code>G</code> to the end of the file, <code>gg=G</code>.", "answer": "<code>=</code>, the indent command can take motions. So, <code>gg</code> to get the start of the file, <code>=</code> to indent, <code>G</code> to the end of the file, <code>gg=G</code>.", "summary": "So, <code>gg</code> to get the start of the file, <code>=</code> to indent, <code>G</code> to the end of the file, <code>gg=G</code>."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n BIGBLOCK There were few things missing in ChrisAD answer. After connecting to mysql it's crucial to select database and also <code>die()</code> statement allows you to see errors if they occur. Be carefull it works only if you have 1 record in the database, because otherwise you need to add <code>WHERE id=xx</code> or something similar to get <strong>only</strong> one row and not more. Also you can access your id like <code>$row['id']</code>", "output": "BIGBLOCK After connecting to mysql it's crucial to select database and also <code>die()</code> statement allows you to see errors if they occur. Also you can access your id like <code>$row['id']</code>", "answer": "BIGBLOCK There were few things missing in ChrisAD answer. After connecting to mysql it's crucial to select database and also <code>die()</code> statement allows you to see errors if they occur. Be carefull it works only if you have 1 record in the database, because otherwise you need to add <code>WHERE id=xx</code> or something similar to get <strong>only</strong> one row and not more. Also you can access your id like <code>$row['id']</code>", "summary": "BIGBLOCK After connecting to mysql it's crucial to select database and also <code>die()</code> statement allows you to see errors if they occur. Also you can access your id like <code>$row['id']</code>"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n <strong>'method'</strong> is the object-oriented word for <strong>'function'</strong>. That's pretty much all there is to it (ie., no real difference). Unfortunately, I think a lot of the answers here are perpetuating or advancing the idea that there's some complex, meaningful difference. Really - there isn't all that much to it, just different words for the same thing. [late addition] In fact, as Brian Neal pointed out in a comment to this question, the C++ standard never uses the term 'method' when refering to member functions. Some people may take that as an indication that C++ isn't really an object-oriented language; however, I prefer to take it as an indication that a pretty smart group of people didn't think there was a particularly strong reason to use a different term.", "output": "<strong>'method'</strong> is the object-oriented word for <strong>'function'</strong>.", "answer": "<strong>'method'</strong> is the object-oriented word for <strong>'function'</strong>. That's pretty much all there is to it (ie., no real difference). Unfortunately, I think a lot of the answers here are perpetuating or advancing the idea that there's some complex, meaningful difference. Really - there isn't all that much to it, just different words for the same thing. [late addition] In fact, as Brian Neal pointed out in a comment to this question, the C++ standard never uses the term 'method' when refering to member functions. Some people may take that as an indication that C++ isn't really an object-oriented language; however, I prefer to take it as an indication that a pretty smart group of people didn't think there was a particularly strong reason to use a different term.", "summary": "<strong>'method'</strong> is the object-oriented word for <strong>'function'</strong>."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Well, I understand that   Node's goal is to provide an easy way   to build scalable network programs.   Node is similar in design to and influenced by systems like Ruby's Event Machine or Python's Twisted.   Evented I/O for V8 javascript. For me that means that you were correct in all three assumptions. The library sure looks promising!", "output": "For me that means that you were correct in all three assumptions.", "answer": "Well, I understand that   Node's goal is to provide an easy way   to build scalable network programs.   Node is similar in design to and influenced by systems like Ruby's Event Machine or Python's Twisted.   Evented I/O for V8 javascript. For me that means that you were correct in all three assumptions. The library sure looks promising!", "summary": "For me that means that you were correct in all three assumptions."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n In Perl, the following evaluate to false in conditionals: BIGBLOCK The rest are true. There are no barewords for <code>true</code> or <code>false</code>.", "output": "In Perl, the following evaluate to false in conditionals: BIGBLOCK The rest are true. There are no barewords for <code>true</code> or <code>false</code>.", "answer": "In Perl, the following evaluate to false in conditionals: BIGBLOCK The rest are true. There are no barewords for <code>true</code> or <code>false</code>.", "summary": "In Perl, the following evaluate to false in conditionals: BIGBLOCK The rest are true. There are no barewords for <code>true</code> or <code>false</code>."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Find the TTF in finder and \"Get Info\". Under the heading \"Full name:\" it gave me a name which I then used with <code>fontWithName</code> (I just copied and pasted the exact name, in this case no '.ttf' extension was necessary).", "output": "Find the TTF in finder and \"Get Info\".", "answer": "Find the TTF in finder and \"Get Info\". Under the heading \"Full name:\" it gave me a name which I then used with <code>fontWithName</code> (I just copied and pasted the exact name, in this case no '.ttf' extension was necessary).", "summary": "Find the TTF in finder and \"Get Info\"."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n From what you have in Jason's comments try: BIGBLOCK <strong>Edit-</strong> To append to text look at below BIGBLOCK", "output": "From what you have in Jason's comments try: BIGBLOCK <strong>Edit-</strong> To append to text look at below BIGBLOCK", "answer": "From what you have in Jason's comments try: BIGBLOCK <strong>Edit-</strong> To append to text look at below BIGBLOCK", "summary": "From what you have in Jason's comments try: BIGBLOCK <strong>Edit-</strong> To append to text look at below BIGBLOCK"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n You can specify CSS styles based on viewport orientation:Target the browser with body[orient=\"landscape\"] or body[orient=\"portrait\"] http://www.evotech.net/blog/2007/07/web-development-for-the-iphone/ However... Apple's approach to this issue is to allow the developer to change the CSS based on the orientation change but not to prevent re-orientation completely. I found a similar question elsewhere: http://ask.metafilter.com/99784/How-can-I-lock-iPhone-orientation-in-Mobile-Safari", "output": "You can specify CSS styles based on viewport orientation:Target the browser with body[orient=\"landscape\"] or body[orient=\"portrait\"] However... Apple's approach to this issue is to allow the developer to change the CSS based on the orientation change but not to prevent re-orientation completely.", "answer": "You can specify CSS styles based on viewport orientation:Target the browser with body[orient=\"landscape\"] or body[orient=\"portrait\"] http://www.evotech.net/blog/2007/07/web-development-for-the-iphone/ However... Apple's approach to this issue is to allow the developer to change the CSS based on the orientation change but not to prevent re-orientation completely. I found a similar question elsewhere: http://ask.metafilter.com/99784/How-can-I-lock-iPhone-orientation-in-Mobile-Safari", "summary": "You can specify CSS styles based on viewport orientation:Target the browser with body[orient=\"landscape\"] or body[orient=\"portrait\"] However... Apple's approach to this issue is to allow the developer to change the CSS based on the orientation change but not to prevent re-orientation completely."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n As david mentions, DIVs <em>do</em> wrap words by default. If you are referring to really long strings of text without spaces, what I do is process the string server-side and insert empty spans: BIGBLOCK It's not exact as there are issues with font-sizing and such. The span option works if the container is variable in size. If it's a fixed width container, you could just go ahead and insert line breaks.", "output": "As david mentions, DIVs <em>do</em> wrap words by default. If you are referring to really long strings of text without spaces, what I do is process the string server-side and insert empty spans: BIGBLOCK If it's a fixed width container, you could just go ahead and insert line breaks.", "answer": "As david mentions, DIVs <em>do</em> wrap words by default. If you are referring to really long strings of text without spaces, what I do is process the string server-side and insert empty spans: BIGBLOCK It's not exact as there are issues with font-sizing and such. The span option works if the container is variable in size. If it's a fixed width container, you could just go ahead and insert line breaks.", "summary": "As david mentions, DIVs <em>do</em> wrap words by default. If you are referring to really long strings of text without spaces, what I do is process the string server-side and insert empty spans: BIGBLOCK If it's a fixed width container, you could just go ahead and insert line breaks."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n <strong>Main messages :)</strong> De-cyphered: The Zen of Python, by Tim Peters Beautiful is better than ugly. Explicit is better than implicit. Simple is better than complex. Complex is better than complicated. Flat is better than nested. Sparse is better than dense. Readability counts. Special cases aren't special enough to break the rules. Although practicality beats purity. Errors should never pass silently. Unless explicitly silenced. In the face of ambiguity, refuse the temptation to guess. There should be one-- and preferably only one --obvious way to do it. Although that way may not be obvious at first unless you're Dutch. Now is better than never. Although never is often better than <em>right</em> now. If the implementation is hard to explain, it's a bad idea. If the implementation is easy to explain, it may be a good idea. Namespaces are one honking great idea -- let's do more of those!", "output": "The Zen of Python, by Tim Peters", "answer": "<strong>Main messages :)</strong> De-cyphered: The Zen of Python, by Tim Peters Beautiful is better than ugly. Explicit is better than implicit. Simple is better than complex. Complex is better than complicated. Flat is better than nested. Sparse is better than dense. Readability counts. Special cases aren't special enough to break the rules. Although practicality beats purity. Errors should never pass silently. Unless explicitly silenced. In the face of ambiguity, refuse the temptation to guess. There should be one-- and preferably only one --obvious way to do it. Although that way may not be obvious at first unless you're Dutch. Now is better than never. Although never is often better than <em>right</em> now. If the implementation is hard to explain, it's a bad idea. If the implementation is easy to explain, it may be a good idea. Namespaces are one honking great idea -- let's do more of those!", "summary": "The Zen of Python, by Tim Peters"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n The equivalent of <code>null</code> in VB is <code>Nothing</code> so your check wants to be: BIGBLOCK Or possibly, if you are actually wanting to check for a SQL null value: BIGBLOCK", "output": "The equivalent of <code>null</code> in VB is <code>Nothing</code> so your check wants to be: BIGBLOCK Or possibly, if you are actually wanting to check for a SQL null value: BIGBLOCK", "answer": "The equivalent of <code>null</code> in VB is <code>Nothing</code> so your check wants to be: BIGBLOCK Or possibly, if you are actually wanting to check for a SQL null value: BIGBLOCK", "summary": "The equivalent of <code>null</code> in VB is <code>Nothing</code> so your check wants to be: BIGBLOCK Or possibly, if you are actually wanting to check for a SQL null value: BIGBLOCK"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n The Html Agility Pack has been mentioned before - if you are going for speed, you might also want to check out the Majestic-12 HTML parser. Its handling is rather clunky, but it delivers a really fast parsing experience.", "output": "The Html Agility Pack has been mentioned before - if you are going for speed, you might also want to check out the Majestic-12 HTML parser.", "answer": "The Html Agility Pack has been mentioned before - if you are going for speed, you might also want to check out the Majestic-12 HTML parser. Its handling is rather clunky, but it delivers a really fast parsing experience.", "summary": "The Html Agility Pack has been mentioned before - if you are going for speed, you might also want to check out the Majestic-12 HTML parser."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n In C# 5 and earlier, to give auto implemented properties a default value, you have to do it in a constructor. The ability to have auto property initializers is included since C# 6.0. The syntax is:", "output": "In C# 5 and earlier, to give auto implemented properties a default value, you have to do it in a constructor.", "answer": "In C# 5 and earlier, to give auto implemented properties a default value, you have to do it in a constructor. The ability to have auto property initializers is included since C# 6.0. The syntax is:", "summary": "In C# 5 and earlier, to give auto implemented properties a default value, you have to do it in a constructor."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n The <code>finalize()</code> function is the destructor. However, it should not be normally used because it is invoked after the GC and you can't tell when that will happen (if ever). Moreover, it takes more than one GC to deallocate objects that have <code>finalize()</code>. You should try to clean up in the logical places in your code using the <code>try{...} finally{...}</code> statements!", "output": "The <code>finalize()</code> function is the destructor.", "answer": "The <code>finalize()</code> function is the destructor. However, it should not be normally used because it is invoked after the GC and you can't tell when that will happen (if ever). Moreover, it takes more than one GC to deallocate objects that have <code>finalize()</code>. You should try to clean up in the logical places in your code using the <code>try{...} finally{...}</code> statements!", "summary": "The <code>finalize()</code> function is the destructor."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n As I've always described it: A Library is a tool. A Framework is a way of life. A library you can use whatever tiny part helps you. A Framework you must commit your entire project to.", "output": "A Library is a tool. A Framework is a way of life. A library you can use whatever tiny part helps you. A Framework you must commit your entire project to.", "answer": "As I've always described it: A Library is a tool. A Framework is a way of life. A library you can use whatever tiny part helps you. A Framework you must commit your entire project to.", "summary": "A Library is a tool. A Framework is a way of life. A library you can use whatever tiny part helps you. A Framework you must commit your entire project to."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n It has to do with how the public members of the base class are exposed from the derived class. <li>public -> base class's public members will be public (usually the default)   <li>protected -> base class's public members will be protected    <li>private -> base class's public members will be private As litb points out, public inheritance is traditional inheritance that you'll see in most programming languages. That is it models an \"IS-A\" relationship. Private inheritance, something AFAIK peculiar to C++, is an \"IMPLEMENTED IN TERMS OF\" relationship. That is you want to <strong>use</strong> the public interface in the derived class, but don't want the user of the derived class to have access to that interface. Many argue that in this case you should aggregate the base class, that is instead of having the base class as a private base, make in a member of derived in order to reuse base class's functionality.", "output": "<li>public -> base class's public members will be public (usually the default)   <li>protected -> base class's public members will be protected    <li>private -> base class's public members will be private As litb points out, public inheritance is traditional inheritance that you'll see in most programming languages. Private inheritance, something AFAIK peculiar to C++, is an \"IMPLEMENTED IN TERMS OF\" relationship. That is you want to <strong>use</strong> the public interface in the derived class, but don't want the user of the derived class to have access to that interface.", "answer": "It has to do with how the public members of the base class are exposed from the derived class. <li>public -> base class's public members will be public (usually the default)   <li>protected -> base class's public members will be protected    <li>private -> base class's public members will be private As litb points out, public inheritance is traditional inheritance that you'll see in most programming languages. That is it models an \"IS-A\" relationship. Private inheritance, something AFAIK peculiar to C++, is an \"IMPLEMENTED IN TERMS OF\" relationship. That is you want to <strong>use</strong> the public interface in the derived class, but don't want the user of the derived class to have access to that interface. Many argue that in this case you should aggregate the base class, that is instead of having the base class as a private base, make in a member of derived in order to reuse base class's functionality.", "summary": "<li>public -> base class's public members will be public (usually the default)   <li>protected -> base class's public members will be protected    <li>private -> base class's public members will be private As litb points out, public inheritance is traditional inheritance that you'll see in most programming languages. Private inheritance, something AFAIK peculiar to C++, is an \"IMPLEMENTED IN TERMS OF\" relationship. That is you want to <strong>use</strong> the public interface in the derived class, but don't want the user of the derived class to have access to that interface."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n You have to check to ensure editTransactionRow is not null and pay_id is not null.", "output": "You have to check to ensure editTransactionRow is not null and pay_id is not null.", "answer": "You have to check to ensure editTransactionRow is not null and pay_id is not null.", "summary": "You have to check to ensure editTransactionRow is not null and pay_id is not null."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n You could also do: BIGBLOCK Although you'd run into issues if there are duplicate options.", "output": "You could also do: BIGBLOCK", "answer": "You could also do: BIGBLOCK Although you'd run into issues if there are duplicate options.", "summary": "You could also do: BIGBLOCK"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n I came across these links: http://mail.openjdk.java.net/pipermail/core-libs-dev/2009-May/001689.html http://www.nabble.com/Review-request-for-5049299-td23667680.html Seems to be a bug. Usage of a spawn() trick instead of the plain fork()/exec() is advised.", "output": "Seems to be a bug. Usage of a spawn() trick instead of the plain fork()/exec() is advised.", "answer": "I came across these links: http://mail.openjdk.java.net/pipermail/core-libs-dev/2009-May/001689.html http://www.nabble.com/Review-request-for-5049299-td23667680.html Seems to be a bug. Usage of a spawn() trick instead of the plain fork()/exec() is advised.", "summary": "Seems to be a bug. Usage of a spawn() trick instead of the plain fork()/exec() is advised."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n I found this code (written in C#) that does an excellent job of calculating the \"brightness\" of a color. In this scenario, the code is trying to determine whether to put white or black text over the color.", "output": "I found this code (written in C#) that does an excellent job of calculating the \"brightness\" of a color.", "answer": "I found this code (written in C#) that does an excellent job of calculating the \"brightness\" of a color. In this scenario, the code is trying to determine whether to put white or black text over the color.", "summary": "I found this code (written in C#) that does an excellent job of calculating the \"brightness\" of a color."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n The yield keyword actually does quite a lot here. The function returns an object that implements the IEnumerable interface. If a calling function starts foreach-ing over this object the function is called again until it \"yields\". This is syntactic sugar introduced in C# 2.0. In earlier versions you had to create your own IEnumerable and IEnumerator objects to do stuff like this. The easiest way understand code like this is to type in an example, set some breakpoints and see what happens. Try stepping through this for example: BIGBLOCK When you step through the example you'll find the first call to Integers() returns 1. The second call returns 2 and the line \"yield return 1\" is not executed again. Here is a real-life example BIGBLOCK", "output": "If a calling function starts foreach-ing over this object the function is called again until it \"yields\". The easiest way understand code like this is to type in an example, set some breakpoints and see what happens. Try stepping through this for example: BIGBLOCK Here is a real-life example BIGBLOCK", "answer": "The yield keyword actually does quite a lot here. The function returns an object that implements the IEnumerable interface. If a calling function starts foreach-ing over this object the function is called again until it \"yields\". This is syntactic sugar introduced in C# 2.0. In earlier versions you had to create your own IEnumerable and IEnumerator objects to do stuff like this. The easiest way understand code like this is to type in an example, set some breakpoints and see what happens. Try stepping through this for example: BIGBLOCK When you step through the example you'll find the first call to Integers() returns 1. The second call returns 2 and the line \"yield return 1\" is not executed again. Here is a real-life example BIGBLOCK", "summary": "If a calling function starts foreach-ing over this object the function is called again until it \"yields\". The easiest way understand code like this is to type in an example, set some breakpoints and see what happens. Try stepping through this for example: BIGBLOCK Here is a real-life example BIGBLOCK"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Have you tried right clicking on your project root, selecting \"properties\", and making sure that the CLASSPATH is correct? If I recall correctly, that's how you do it. Anything about the way Eclipse runs unit tests that requires you to add the junit JAR to the runtime CLASSPATH in a special way? I use IntelliJ, so I don't have these issues. I'd check Eclipse myself, but I prefer not having it on my desktop.", "output": "Have you tried right clicking on your project root, selecting \"properties\", and making sure that the CLASSPATH is correct? If I recall correctly, that's how you do it.", "answer": "Have you tried right clicking on your project root, selecting \"properties\", and making sure that the CLASSPATH is correct? If I recall correctly, that's how you do it. Anything about the way Eclipse runs unit tests that requires you to add the junit JAR to the runtime CLASSPATH in a special way? I use IntelliJ, so I don't have these issues. I'd check Eclipse myself, but I prefer not having it on my desktop.", "summary": "Have you tried right clicking on your project root, selecting \"properties\", and making sure that the CLASSPATH is correct? If I recall correctly, that's how you do it."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n I had a messed up virtual host config. Remember you need one virtual host without SSL for port 80, and another one with SSL for port 443. You cannot have both in one virtual host, as the webmin-generated config tried to do.", "output": "Remember you need one virtual host without SSL for port 80, and another one with SSL for port 443. You cannot have both in one virtual host, as the webmin-generated config tried to do.", "answer": "I had a messed up virtual host config. Remember you need one virtual host without SSL for port 80, and another one with SSL for port 443. You cannot have both in one virtual host, as the webmin-generated config tried to do.", "summary": "Remember you need one virtual host without SSL for port 80, and another one with SSL for port 443. You cannot have both in one virtual host, as the webmin-generated config tried to do."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n All of the <code>List</code> classes maintain the order of insertion. They use different implementations based on performance and other characteristics (e.g. <code>ArrayList</code> for speed of access of a specific index, <code>LinkedList</code> for simply maintaining order). Since there is no key, duplicates are allowed. The <code>Set</code> classes do not maintain insertion order. They may optionally impose a specific order (as with <code>SortedSet</code>), but typically have an implementation-defined order based on some hash function (as with <code>HashSet</code>). Since <code>Set</code>s are accessed by key, duplicates are not allowed.", "output": "All of the <code>List</code> classes maintain the order of insertion. Since there is no key, duplicates are allowed. The <code>Set</code> classes do not maintain insertion order. Since <code>Set</code>s are accessed by key, duplicates are not allowed.", "answer": "All of the <code>List</code> classes maintain the order of insertion. They use different implementations based on performance and other characteristics (e.g. <code>ArrayList</code> for speed of access of a specific index, <code>LinkedList</code> for simply maintaining order). Since there is no key, duplicates are allowed. The <code>Set</code> classes do not maintain insertion order. They may optionally impose a specific order (as with <code>SortedSet</code>), but typically have an implementation-defined order based on some hash function (as with <code>HashSet</code>). Since <code>Set</code>s are accessed by key, duplicates are not allowed.", "summary": "All of the <code>List</code> classes maintain the order of insertion. Since there is no key, duplicates are allowed. The <code>Set</code> classes do not maintain insertion order. Since <code>Set</code>s are accessed by key, duplicates are not allowed."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Use <code>push_back()</code>:", "output": "Use <code>push_back()</code>:", "answer": "Use <code>push_back()</code>:", "summary": "Use <code>push_back()</code>:"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Big O notation is a way of describing the upper bound of an algorithm in terms of space or running time. The n is the number of elements in the the problem (i.e size of an array, number of nodes in a tree, etc.) We are interested in describing the running time as n gets  big. When we say some algorithm is O(f(n)) we are saying that the running time (or space required) by that algorithm is always lower than some constant times f(n). To say that binary search has a running time of O(logn) is to say that there exists some constant c which you can multiply log(n) by that will always be larger than the running time of binary search. In this case you will always have some constant factor of log(n) comparisons. In other words where g(n) is the running time of your algorithm, we say that g(n) = O(f(n)) when g(n) &lt;= c*f(n) when n > k, where c and k are some constants.", "output": "Big O notation is a way of describing the upper bound of an algorithm in terms of space or running time. The n is the number of elements in the the problem (i.e size of an array, number of nodes in a tree, etc.) We are interested in describing the running time as n gets  big.", "answer": "Big O notation is a way of describing the upper bound of an algorithm in terms of space or running time. The n is the number of elements in the the problem (i.e size of an array, number of nodes in a tree, etc.) We are interested in describing the running time as n gets  big. When we say some algorithm is O(f(n)) we are saying that the running time (or space required) by that algorithm is always lower than some constant times f(n). To say that binary search has a running time of O(logn) is to say that there exists some constant c which you can multiply log(n) by that will always be larger than the running time of binary search. In this case you will always have some constant factor of log(n) comparisons. In other words where g(n) is the running time of your algorithm, we say that g(n) = O(f(n)) when g(n) &lt;= c*f(n) when n > k, where c and k are some constants.", "summary": "Big O notation is a way of describing the upper bound of an algorithm in terms of space or running time. The n is the number of elements in the the problem (i.e size of an array, number of nodes in a tree, etc.) We are interested in describing the running time as n gets  big."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n When you have a lot of insertion or deletion in the middle of the sequence. e.g. a memory manager.", "output": "When you have a lot of insertion or deletion in the middle of the sequence.", "answer": "When you have a lot of insertion or deletion in the middle of the sequence. e.g. a memory manager.", "summary": "When you have a lot of insertion or deletion in the middle of the sequence."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n One thing to keep in mind is that you can often use eval() to execute code in an otherwise restricted environment - social networking sites that block specific JavaScript functions can sometimes be fooled by breaking them up in an eval block - BIGBLOCK So if you're looking to run some JavaScript code where it might not otherwise be allowed (Myspace, I'm looking at you...) then eval() can be a useful trick. However, for all the reasons mentioned above, you shouldn't use it for your own code, where you have complete control - it's just not necessary, and better-off relegated to the 'tricky JavaScript hacks' shelf.", "output": "One thing to keep in mind is that you can often use eval() to execute code in an otherwise restricted environment - social networking sites that block specific JavaScript functions can sometimes be fooled by breaking them up in an eval block - BIGBLOCK However, for all the reasons mentioned above, you shouldn't use it for your own code, where you have complete control - it's just not necessary, and better-off relegated to the 'tricky JavaScript hacks' shelf.", "answer": "One thing to keep in mind is that you can often use eval() to execute code in an otherwise restricted environment - social networking sites that block specific JavaScript functions can sometimes be fooled by breaking them up in an eval block - BIGBLOCK So if you're looking to run some JavaScript code where it might not otherwise be allowed (Myspace, I'm looking at you...) then eval() can be a useful trick. However, for all the reasons mentioned above, you shouldn't use it for your own code, where you have complete control - it's just not necessary, and better-off relegated to the 'tricky JavaScript hacks' shelf.", "summary": "One thing to keep in mind is that you can often use eval() to execute code in an otherwise restricted environment - social networking sites that block specific JavaScript functions can sometimes be fooled by breaking them up in an eval block - BIGBLOCK However, for all the reasons mentioned above, you shouldn't use it for your own code, where you have complete control - it's just not necessary, and better-off relegated to the 'tricky JavaScript hacks' shelf."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n I've had to look at monster(runaway) log files (20+ GB). I used hexedit FREE version which can work with any size files. It is also open source. It is a Windows executable.", "output": "I used hexedit FREE version which can work with any size files. It is a Windows executable.", "answer": "I've had to look at monster(runaway) log files (20+ GB). I used hexedit FREE version which can work with any size files. It is also open source. It is a Windows executable.", "summary": "I used hexedit FREE version which can work with any size files. It is a Windows executable."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n <code>The type initializer for 'CSMessageUtility.CSDetails' threw an exception.</code> means that the static constructor on that class threw an Exception - so you need to look either in the static constructor of the CSDetails class, or in the initialisation of any static members of that class.", "output": "<code>The type initializer for 'CSMessageUtility.CSDetails' threw an exception.</code> means that the static constructor on that class threw an Exception - so you need to look either in the static constructor of the CSDetails class, or in the initialisation of any static members of that class.", "answer": "<code>The type initializer for 'CSMessageUtility.CSDetails' threw an exception.</code> means that the static constructor on that class threw an Exception - so you need to look either in the static constructor of the CSDetails class, or in the initialisation of any static members of that class.", "summary": "<code>The type initializer for 'CSMessageUtility.CSDetails' threw an exception.</code> means that the static constructor on that class threw an Exception - so you need to look either in the static constructor of the CSDetails class, or in the initialisation of any static members of that class."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Let's say a function is a block of code (usually with its own scope, and sometimes with its own closure) that may receive some arguments and may also return a result. A method is a function that is owned by an object (in some object oriented systems, it is more correct to say it is owned by a class). Being \"owned\" by a object/class means that you refer to the method through the object/class; for example, in Java if you want to invoke a method \"open()\" owned by an object \"door\" you need to write \"door.open()\". Usually methods also gain some extra attributes describing their behaviour within the object/class, for example: visibility (related to the object oriented concept of encapsulation) which defines from which objects (or classes) the method can be invoked. In many object oriented languages, all \"functions\" belong to some object (or class) and so in these languages there are no functions that are not methods.", "output": "Let's say a function is a block of code (usually with its own scope, and sometimes with its own closure) that may receive some arguments and may also return a result. A method is a function that is owned by an object (in some object oriented systems, it is more correct to say it is owned by a class).", "answer": "Let's say a function is a block of code (usually with its own scope, and sometimes with its own closure) that may receive some arguments and may also return a result. A method is a function that is owned by an object (in some object oriented systems, it is more correct to say it is owned by a class). Being \"owned\" by a object/class means that you refer to the method through the object/class; for example, in Java if you want to invoke a method \"open()\" owned by an object \"door\" you need to write \"door.open()\". Usually methods also gain some extra attributes describing their behaviour within the object/class, for example: visibility (related to the object oriented concept of encapsulation) which defines from which objects (or classes) the method can be invoked. In many object oriented languages, all \"functions\" belong to some object (or class) and so in these languages there are no functions that are not methods.", "summary": "Let's say a function is a block of code (usually with its own scope, and sometimes with its own closure) that may receive some arguments and may also return a result. A method is a function that is owned by an object (in some object oriented systems, it is more correct to say it is owned by a class)."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Check out Open Terminal Here. It may be the most similar to \"Open Command Window Here.\" I used <code>&gt;cdto</code> and this is very similar but this seems to be a little better at dealing with Spaces... but not perfect. What it has that is very nice is the ability to \"detect key-down events at the start of the application and used them to modify the behavior of the script\" allowing the script to open a new tab in the front most terminal window when invoked by holding down __________________________ÃÂ¢________________________________ key. Neat trick. Also note PCheese's answer; it is probably more useful for heavy terminal users!", "output": "Check out Open Terminal Here.", "answer": "Check out Open Terminal Here. It may be the most similar to \"Open Command Window Here.\" I used <code>&gt;cdto</code> and this is very similar but this seems to be a little better at dealing with Spaces... but not perfect. What it has that is very nice is the ability to \"detect key-down events at the start of the application and used them to modify the behavior of the script\" allowing the script to open a new tab in the front most terminal window when invoked by holding down __________________________ÃÂ¢________________________________ key. Neat trick. Also note PCheese's answer; it is probably more useful for heavy terminal users!", "summary": "Check out Open Terminal Here."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n If it doesn't need to be a macro, then just put <code>=A1*1.1</code> into (say) D7, then drag the formula fill handle across, then down.", "output": "If it doesn't need to be a macro, then just put <code>=A1*1.1</code> into (say) D7, then drag the formula fill handle across, then down.", "answer": "If it doesn't need to be a macro, then just put <code>=A1*1.1</code> into (say) D7, then drag the formula fill handle across, then down.", "summary": "If it doesn't need to be a macro, then just put <code>=A1*1.1</code> into (say) D7, then drag the formula fill handle across, then down."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n pip, an alternative to setuptools/easy_install, provides an \"uninstall\" command. Install pip according to the installation instructions: Then you can use <code>pip uninstall</code> to remove packages installed with <code>easy_install</code>", "output": "pip, an alternative to setuptools/easy_install, provides an \"uninstall\" command.", "answer": "pip, an alternative to setuptools/easy_install, provides an \"uninstall\" command. Install pip according to the installation instructions: Then you can use <code>pip uninstall</code> to remove packages installed with <code>easy_install</code>", "summary": "pip, an alternative to setuptools/easy_install, provides an \"uninstall\" command."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n The HSV colorspace should do the trick, see the <strong>wikipedia article</strong> depending on the language you're working in you may get a library conversion . H is hue which is a numerical value for the color (i.e. red, green...) S is the saturation of the color, i.e. how 'intense' it is V is the 'brightness' of the color.", "output": "The HSV colorspace should do the trick, see the <strong>wikipedia article</strong> depending on the language you're working in you may get a library conversion .", "answer": "The HSV colorspace should do the trick, see the <strong>wikipedia article</strong> depending on the language you're working in you may get a library conversion . H is hue which is a numerical value for the color (i.e. red, green...) S is the saturation of the color, i.e. how 'intense' it is V is the 'brightness' of the color.", "summary": "The HSV colorspace should do the trick, see the <strong>wikipedia article</strong> depending on the language you're working in you may get a library conversion ."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n A segmentation fault is caused by a request for a page that the process does not have listed in its descriptor table, or an invalid request for a page that it does have listed (e.g. a write request on a read-only page). A dangling pointer is a pointer that may or may not point to a valid page, but does point to an \"unexpected\" segment of memory.", "output": "A segmentation fault is caused by a request for a page that the process does not have listed in its descriptor table, or an invalid request for a page that it does have listed (e.g. a write request on a read-only page). A dangling pointer is a pointer that may or may not point to a valid page, but does point to an \"unexpected\" segment of memory.", "answer": "A segmentation fault is caused by a request for a page that the process does not have listed in its descriptor table, or an invalid request for a page that it does have listed (e.g. a write request on a read-only page). A dangling pointer is a pointer that may or may not point to a valid page, but does point to an \"unexpected\" segment of memory.", "summary": "A segmentation fault is caused by a request for a page that the process does not have listed in its descriptor table, or an invalid request for a page that it does have listed (e.g. a write request on a read-only page). A dangling pointer is a pointer that may or may not point to a valid page, but does point to an \"unexpected\" segment of memory."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Assert allows you to halt execution if a condition (assertion) is false. For instance (Pseudocode): BIGBLOCK If myBank is NULL, the function will stop execution, and an error produced. This is very good for making certain reusable code accept correct conditions, etc.", "output": "Assert allows you to halt execution if a condition (assertion) is false. This is very good for making certain reusable code accept correct conditions, etc.", "answer": "Assert allows you to halt execution if a condition (assertion) is false. For instance (Pseudocode): BIGBLOCK If myBank is NULL, the function will stop execution, and an error produced. This is very good for making certain reusable code accept correct conditions, etc.", "summary": "Assert allows you to halt execution if a condition (assertion) is false. This is very good for making certain reusable code accept correct conditions, etc."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n jQuery: BIGBLOCK I've found that this works even better because you don't have to worry about HTML escaping anything (which should be done in the above code, if the values weren't hard coded). It's also easier to read (from a JS perspective): BIGBLOCK", "output": "jQuery: BIGBLOCK It's also easier to read (from a JS perspective): BIGBLOCK", "answer": "jQuery: BIGBLOCK I've found that this works even better because you don't have to worry about HTML escaping anything (which should be done in the above code, if the values weren't hard coded). It's also easier to read (from a JS perspective): BIGBLOCK", "summary": "jQuery: BIGBLOCK It's also easier to read (from a JS perspective): BIGBLOCK"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Views evaluate the data in the tables underlying the view definition at the time the view is queried. It is a logical view of your tables, with no data stored anywhere else. The upside of a view is that it will always return the latest data to you. The downside of a view is that its performance depends on how good a select statement the view is based on. If the select statement used by the view joins many tables, or uses joins based on non-indexed columns, the view could perform poorly. Materialized views are similar to regular views, in that they are a logical view of your data (based on a select statement), however, the underlying query resultset has been saved to a table. The upside of this is that when you query a materialized view, you are querying a table, which may also be indexed. In addition, because all the joins have been resolved at materialized view refresh time, you pay the price of the join once (or as often as you refresh your materialized view), rather than each time you select from the materialized view. In addition, with query rewrite enabled, Oracle can optimize a query that selects from the source of your materialized view in such a way that it instead reads from your materialized view. In situations where you create materialized views as forms of aggregate tables, or as copies of frequently executed queries, this can greatly speed up the response time of your end user application. The downside though is that the data you get back from the materialized view is only as up to date as the last time the materialized view has been refreshed. Materialized views can be set to refresh manually, on a set schedule, or based on the database detecting a change in data from one of the underlying tables. Materialized views can be incrementally updated by combining them with materialized view logs, which act as change data capture sources on the underlying tables. Materialized views are most often used in data warehousing / business intelligence applications where querying large fact tables with thousands of millions of rows would result in query response times that resulted in an unusable application.", "output": "Views evaluate the data in the tables underlying the view definition at the time the view is queried. It is a logical view of your tables, with no data stored anywhere else. Materialized views are similar to regular views, in that they are a logical view of your data (based on a select statement), however, the underlying query resultset has been saved to a table. The upside of this is that when you query a materialized view, you are querying a table, which may also be indexed. The downside though is that the data you get back from the materialized view is only as up to date as the last time the materialized view has been refreshed. Materialized views are most often used in data warehousing / business intelligence applications where querying large fact tables with thousands of millions of rows would result in query response times that resulted in an unusable application.", "answer": "Views evaluate the data in the tables underlying the view definition at the time the view is queried. It is a logical view of your tables, with no data stored anywhere else. The upside of a view is that it will always return the latest data to you. The downside of a view is that its performance depends on how good a select statement the view is based on. If the select statement used by the view joins many tables, or uses joins based on non-indexed columns, the view could perform poorly. Materialized views are similar to regular views, in that they are a logical view of your data (based on a select statement), however, the underlying query resultset has been saved to a table. The upside of this is that when you query a materialized view, you are querying a table, which may also be indexed. In addition, because all the joins have been resolved at materialized view refresh time, you pay the price of the join once (or as often as you refresh your materialized view), rather than each time you select from the materialized view. In addition, with query rewrite enabled, Oracle can optimize a query that selects from the source of your materialized view in such a way that it instead reads from your materialized view. In situations where you create materialized views as forms of aggregate tables, or as copies of frequently executed queries, this can greatly speed up the response time of your end user application. The downside though is that the data you get back from the materialized view is only as up to date as the last time the materialized view has been refreshed. Materialized views can be set to refresh manually, on a set schedule, or based on the database detecting a change in data from one of the underlying tables. Materialized views can be incrementally updated by combining them with materialized view logs, which act as change data capture sources on the underlying tables. Materialized views are most often used in data warehousing / business intelligence applications where querying large fact tables with thousands of millions of rows would result in query response times that resulted in an unusable application.", "summary": "Views evaluate the data in the tables underlying the view definition at the time the view is queried. It is a logical view of your tables, with no data stored anywhere else. Materialized views are similar to regular views, in that they are a logical view of your data (based on a select statement), however, the underlying query resultset has been saved to a table. The upside of this is that when you query a materialized view, you are querying a table, which may also be indexed. The downside though is that the data you get back from the materialized view is only as up to date as the last time the materialized view has been refreshed. Materialized views are most often used in data warehousing / business intelligence applications where querying large fact tables with thousands of millions of rows would result in query response times that resulted in an unusable application."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n will show you the stored procedures. will show you the definition of a procedure. And will show you all the available options for the <code>show</code> command.", "output": "will show you the stored procedures. will show you the definition of a procedure.", "answer": "will show you the stored procedures. will show you the definition of a procedure. And will show you all the available options for the <code>show</code> command.", "summary": "will show you the stored procedures. will show you the definition of a procedure."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n For different values of k, the approach will be different so there won't be a generic answer in terms of k. For example, for k=1 one can take advantage of the sum of natural numbers, but for k = n/2, one has to use some kind of bitset. The same way for k=n-1, one can simply compare the only number in the bag with the rest.", "output": "For different values of k, the approach will be different so there won't be a generic answer in terms of k. For example, for k=1 one can take advantage of the sum of natural numbers, but for k = n/2, one has to use some kind of bitset.", "answer": "For different values of k, the approach will be different so there won't be a generic answer in terms of k. For example, for k=1 one can take advantage of the sum of natural numbers, but for k = n/2, one has to use some kind of bitset. The same way for k=n-1, one can simply compare the only number in the bag with the rest.", "summary": "For different values of k, the approach will be different so there won't be a generic answer in terms of k. For example, for k=1 one can take advantage of the sum of natural numbers, but for k = n/2, one has to use some kind of bitset."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n If the object implements <code>IDisposable</code>, then yes, you should dispose it. The object could be hanging on to native resources (file handles, OS objects) that might not be freed immediately otherwise. This can lead to resource starvation, file-locking issues, and other subtle bugs that could otherwise be avoided. See also Implementing a Dispose Method on MSDN.", "output": "If the object implements <code>IDisposable</code>, then yes, you should dispose it.", "answer": "If the object implements <code>IDisposable</code>, then yes, you should dispose it. The object could be hanging on to native resources (file handles, OS objects) that might not be freed immediately otherwise. This can lead to resource starvation, file-locking issues, and other subtle bugs that could otherwise be avoided. See also Implementing a Dispose Method on MSDN.", "summary": "If the object implements <code>IDisposable</code>, then yes, you should dispose it."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Any element can have a class or an id. A class is used to reference a certain type of display, for example you may have a css class for a div that represents the answer to this question. As there will be many answers, multiple divs would need the same styling and you would use a class. An id refers to only a single element, for example the related section at the right may have styling specific to it not reused elsewhere, it would use an id. Technically you can use classes for all of it, or split them up logically. You can not, however, reuse id's for multiple elements.", "output": "Any element can have a class or an id. A class is used to reference a certain type of display, for example you may have a css class for a div that represents the answer to this question. An id refers to only a single element, for example the related section at the right may have styling specific to it not reused elsewhere, it would use an id.", "answer": "Any element can have a class or an id. A class is used to reference a certain type of display, for example you may have a css class for a div that represents the answer to this question. As there will be many answers, multiple divs would need the same styling and you would use a class. An id refers to only a single element, for example the related section at the right may have styling specific to it not reused elsewhere, it would use an id. Technically you can use classes for all of it, or split them up logically. You can not, however, reuse id's for multiple elements.", "summary": "Any element can have a class or an id. A class is used to reference a certain type of display, for example you may have a css class for a div that represents the answer to this question. An id refers to only a single element, for example the related section at the right may have styling specific to it not reused elsewhere, it would use an id."}]