[{"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n You can always do this: This is one of the suggested ways of implementing a generic collection in <em>Effective Java; Item 26</em>. No type errors, no need to cast the array repeatedly. <em>However</em> this triggers a warning because it is potentially dangerous, and should be used with caution. As detailed in the comments, this <code>Object[]</code> is now masquerading as our <code>E[]</code> type, and can cause unexpected errors or <code>ClassCastException</code>s if used unsafely. As a rule of thumb, this behavior is safe as long as the cast array is used internally (e.g. to back a data structure), and not returned or exposed to client code. Should you need to return an array of a generic type to other code, the reflection <code>Array</code> class you mention is the right way to go. Worth mentioning that wherever possible, you'll have a much happier time working with <code>List</code>s rather than arrays if you're using generics. Certainly sometimes you don't have a choice, but using the collections framework is far more robust.", "output": "You can always do this: <em>However</em> this triggers a warning because it is potentially dangerous, and should be used with caution. Worth mentioning that wherever possible, you'll have a much happier time working with <code>List</code>s rather than arrays if you're using generics.", "answer": "You can always do this: This is one of the suggested ways of implementing a generic collection in <em>Effective Java; Item 26</em>. No type errors, no need to cast the array repeatedly. <em>However</em> this triggers a warning because it is potentially dangerous, and should be used with caution. As detailed in the comments, this <code>Object[]</code> is now masquerading as our <code>E[]</code> type, and can cause unexpected errors or <code>ClassCastException</code>s if used unsafely. As a rule of thumb, this behavior is safe as long as the cast array is used internally (e.g. to back a data structure), and not returned or exposed to client code. Should you need to return an array of a generic type to other code, the reflection <code>Array</code> class you mention is the right way to go. Worth mentioning that wherever possible, you'll have a much happier time working with <code>List</code>s rather than arrays if you're using generics. Certainly sometimes you don't have a choice, but using the collections framework is far more robust.", "summary": "You can always do this: <em>However</em> this triggers a warning because it is potentially dangerous, and should be used with caution. Worth mentioning that wherever possible, you'll have a much happier time working with <code>List</code>s rather than arrays if you're using generics."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Did you try <code>gitk</code> or <code>gitk --all</code> ? However it doesn't have a print/save img as function.", "output": "Did you try <code>gitk</code> or <code>gitk --all</code> ?", "answer": "Did you try <code>gitk</code> or <code>gitk --all</code> ? However it doesn't have a print/save img as function.", "summary": "Did you try <code>gitk</code> or <code>gitk --all</code> ?"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Use the <code>collate</code> clause in your query: I may not have the syntax exactly right (check BOL), but you can do this to change the collation on-the-fly for the query - you may need to add the clause for each join. edit: I realized this was not quite right - the collate clause goes after the field you need to change - in this example I changed the collation on the <code>tA.oldValue</code> field.", "output": "Use the <code>collate</code> clause in your query: I may not have the syntax exactly right (check BOL), but you can do this to change the collation on-the-fly for the query - you may need to add the clause for each join.", "answer": "Use the <code>collate</code> clause in your query: I may not have the syntax exactly right (check BOL), but you can do this to change the collation on-the-fly for the query - you may need to add the clause for each join. edit: I realized this was not quite right - the collate clause goes after the field you need to change - in this example I changed the collation on the <code>tA.oldValue</code> field.", "summary": "Use the <code>collate</code> clause in your query: I may not have the syntax exactly right (check BOL), but you can do this to change the collation on-the-fly for the query - you may need to add the clause for each join."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n here is an example when CROSS APPLY makes a huge difference with performance: Using CROSS APPLY to optimize joins on BETWEEN conditions Note that besides replacing inner joins you can also reuse code such as truncating dates without paying performance penalty for involing scalar UDFs, for example: Calculating third Wednesday of the month with inline UDFs", "output": "Using CROSS APPLY to optimize joins on BETWEEN conditions", "answer": "here is an example when CROSS APPLY makes a huge difference with performance: Using CROSS APPLY to optimize joins on BETWEEN conditions Note that besides replacing inner joins you can also reuse code such as truncating dates without paying performance penalty for involing scalar UDFs, for example: Calculating third Wednesday of the month with inline UDFs", "summary": "Using CROSS APPLY to optimize joins on BETWEEN conditions"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n <li>Some daemons (e.g. apache) do this by themselves by calling setuid() <li>You could use the setuid-file flag to run the process as a different user. <li>Of course, the solution you mentioned works as well. If you intend to write your own daemon, then I recommend calling setuid().This way, your process can <li>Make use of its root privileges (e.g. open log files, create pid files). <li>Drop its root privileges at a certain point during startup.", "output": "If you intend to write your own daemon, then I recommend calling setuid().This way, your process can <li>Make use of its root privileges (e.g. open log files, create pid files). <li>Drop its root privileges at a certain point during startup.", "answer": "<li>Some daemons (e.g. apache) do this by themselves by calling setuid() <li>You could use the setuid-file flag to run the process as a different user. <li>Of course, the solution you mentioned works as well. If you intend to write your own daemon, then I recommend calling setuid().This way, your process can <li>Make use of its root privileges (e.g. open log files, create pid files). <li>Drop its root privileges at a certain point during startup.", "summary": "If you intend to write your own daemon, then I recommend calling setuid().This way, your process can <li>Make use of its root privileges (e.g. open log files, create pid files). <li>Drop its root privileges at a certain point during startup."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n This means that a TCP RST was received and the connection is now closed. This occurs when a packet is sent from your end of the connection but the other end does not recognize the connection; it will send back a packet with the RST bit set in order to forcibly close the connection. This can happen if the other side crashes and then comes back up or if it calls <code>close()</code> on the socket while there is data from you in transit, and is an indication to you that some of the data that you previously sent may not have been received. It is up to you whether that is an error; if the information you were sending was only for the benefit of the remote client then it may not matter that any final data may have been lost. However you should close the socket and free up any other resources associated with the connection.", "output": "This means that a TCP RST was received and the connection is now closed. This occurs when a packet is sent from your end of the connection but the other end does not recognize the connection; it will send back a packet with the RST bit set in order to forcibly close the connection. This can happen if the other side crashes and then comes back up or if it calls <code>close()</code> on the socket while there is data from you in transit, and is an indication to you that some of the data that you previously sent may not have been received.", "answer": "This means that a TCP RST was received and the connection is now closed. This occurs when a packet is sent from your end of the connection but the other end does not recognize the connection; it will send back a packet with the RST bit set in order to forcibly close the connection. This can happen if the other side crashes and then comes back up or if it calls <code>close()</code> on the socket while there is data from you in transit, and is an indication to you that some of the data that you previously sent may not have been received. It is up to you whether that is an error; if the information you were sending was only for the benefit of the remote client then it may not matter that any final data may have been lost. However you should close the socket and free up any other resources associated with the connection.", "summary": "This means that a TCP RST was received and the connection is now closed. This occurs when a packet is sent from your end of the connection but the other end does not recognize the connection; it will send back a packet with the RST bit set in order to forcibly close the connection. This can happen if the other side crashes and then comes back up or if it calls <code>close()</code> on the socket while there is data from you in transit, and is an indication to you that some of the data that you previously sent may not have been received."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n I just found this but it seems a bit hackish, however they say tried it on *nix and I did on windows and it worked. This assumes you have an internet access, and that there is no local proxy.", "output": "I just found this but it seems a bit hackish, however they say tried it on *nix and I did on windows and it worked.", "answer": "I just found this but it seems a bit hackish, however they say tried it on *nix and I did on windows and it worked. This assumes you have an internet access, and that there is no local proxy.", "summary": "I just found this but it seems a bit hackish, however they say tried it on *nix and I did on windows and it worked."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n In terms of pattern interpretation, there's no difference between the following forms: <li><code>/pattern/</code> <li><code>new RegExp(\"pattern\")</code> If you want to replace a literal string using the <code>replace</code> method, I think you can just pass a string instead of a regexp to <code>replace</code>. Otherwise, you'd have to escape any regexp special characters in the pattern first - maybe like so: BIGBLOCK", "output": "If you want to replace a literal string using the <code>replace</code> method, I think you can just pass a string instead of a regexp to <code>replace</code>.", "answer": "In terms of pattern interpretation, there's no difference between the following forms: <li><code>/pattern/</code> <li><code>new RegExp(\"pattern\")</code> If you want to replace a literal string using the <code>replace</code> method, I think you can just pass a string instead of a regexp to <code>replace</code>. Otherwise, you'd have to escape any regexp special characters in the pattern first - maybe like so: BIGBLOCK", "summary": "If you want to replace a literal string using the <code>replace</code> method, I think you can just pass a string instead of a regexp to <code>replace</code>."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n What is Inversion of Control? If you follow these simple two steps, you have done inversion of control: Separate what-to-do part from when-to-do part. Ensure that when part knows as little as possible about what part; and vice versa. There are several techniques possible for each of these steps based on the technology/language you are using for your implementation. -- The inversion part of the Inversion of Control (IoC) is the confusing thing; because inversion is the relative term. The best way to understand IoC is to forget about that word! -- Examples Event Handling. Event Handlers (what-to-do part) -- Raising Events (when-to-do part) Interfaces. Component client (when-to-do part) -- Component Interface implementation (what-to-do part) xUnit fixure. Setup and TearDown (what-to-do part) -- xUnit frameworks calls to Setup at the beginning and TearDown at the end (when-to-do part) Template method design pattern. template method when-to-do part -- primitive subclass implementation what-to-do part DLL container methods in COM. DllMain, DllCanUnload, etc (what-to-do part) -- COM/OS (when-to-do part)", "output": "If you follow these simple two steps, you have done inversion of control:", "answer": "What is Inversion of Control? If you follow these simple two steps, you have done inversion of control: Separate what-to-do part from when-to-do part. Ensure that when part knows as little as possible about what part; and vice versa. There are several techniques possible for each of these steps based on the technology/language you are using for your implementation. -- The inversion part of the Inversion of Control (IoC) is the confusing thing; because inversion is the relative term. The best way to understand IoC is to forget about that word! -- Examples Event Handling. Event Handlers (what-to-do part) -- Raising Events (when-to-do part) Interfaces. Component client (when-to-do part) -- Component Interface implementation (what-to-do part) xUnit fixure. Setup and TearDown (what-to-do part) -- xUnit frameworks calls to Setup at the beginning and TearDown at the end (when-to-do part) Template method design pattern. template method when-to-do part -- primitive subclass implementation what-to-do part DLL container methods in COM. DllMain, DllCanUnload, etc (what-to-do part) -- COM/OS (when-to-do part)", "summary": "If you follow these simple two steps, you have done inversion of control:"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n <code>:set paste</code> is your friend I use putty and end up copying code between windows. Before I was turned on to <code>:set paste</code> (and <code>:set nopaste</code>) copy/paste gave me fits for that very reason.", "output": "<code>:set paste</code> is your friend I use putty and end up copying code between windows.", "answer": "<code>:set paste</code> is your friend I use putty and end up copying code between windows. Before I was turned on to <code>:set paste</code> (and <code>:set nopaste</code>) copy/paste gave me fits for that very reason.", "summary": "<code>:set paste</code> is your friend I use putty and end up copying code between windows."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n <code>raw_input()</code> was renamed to <code>input()</code> From http://docs.python.org/dev/py3k/whatsnew/3.0.html", "output": "<code>raw_input()</code> was renamed to <code>input()</code>", "answer": "<code>raw_input()</code> was renamed to <code>input()</code> From http://docs.python.org/dev/py3k/whatsnew/3.0.html", "summary": "<code>raw_input()</code> was renamed to <code>input()</code>"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n mmm... Static means that you can access that function without having an instance of the class. You can access directly from the class definition.", "output": "Static means that you can access that function without having an instance of the class. You can access directly from the class definition.", "answer": "mmm... Static means that you can access that function without having an instance of the class. You can access directly from the class definition.", "summary": "Static means that you can access that function without having an instance of the class. You can access directly from the class definition."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Try to use: BIGBLOCK on Clear button.", "output": "Try to use: BIGBLOCK on Clear button.", "answer": "Try to use: BIGBLOCK on Clear button.", "summary": "Try to use: BIGBLOCK on Clear button."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n You set the DisplayMemberPath and the SelectedValuePath to \"Name\", so I assume that you have a class PhoneBookEntry with a public property Name. Have you set the DataContext to your ConnectionViewModel object? I copied you code and made some minor modifications, and it seems to work fine. I can set the viewmodels PhoneBookEnty property and the selected item in the combobox changes, and I can change the selected item in the combobox and the view models PhoneBookEntry property is set correctly. Here is my XAML content: And here is my code-behind: Edit: Geoffs second example does not seem to work, which seems a bit odd to me. If I change the PhonebookEntries property on the ConnectionViewModel to be of type ReadOnlyCollection, the TwoWay binding of the SelectedValue property on the combobox works fine. Maybe there is an issue with the CollectionView? I noticed a warning in the output console: System.Windows.Data Warning: 50 : Using CollectionView directly is not fully supported. The basic features work, although with some inefficiencies, but advanced features may encounter known bugs. Consider using a derived class to avoid these problems. Edit2 (.NET 4.5): The content of the DropDownList can be based on ToString() and not of DisplayMemberPath, while DisplayMemberPath specifies the member for the selected and displayed item only.", "output": "Have you set the DataContext to your ConnectionViewModel object? I copied you code and made some minor modifications, and it seems to work fine.", "answer": "You set the DisplayMemberPath and the SelectedValuePath to \"Name\", so I assume that you have a class PhoneBookEntry with a public property Name. Have you set the DataContext to your ConnectionViewModel object? I copied you code and made some minor modifications, and it seems to work fine. I can set the viewmodels PhoneBookEnty property and the selected item in the combobox changes, and I can change the selected item in the combobox and the view models PhoneBookEntry property is set correctly. Here is my XAML content: And here is my code-behind: Edit: Geoffs second example does not seem to work, which seems a bit odd to me. If I change the PhonebookEntries property on the ConnectionViewModel to be of type ReadOnlyCollection, the TwoWay binding of the SelectedValue property on the combobox works fine. Maybe there is an issue with the CollectionView? I noticed a warning in the output console: System.Windows.Data Warning: 50 : Using CollectionView directly is not fully supported. The basic features work, although with some inefficiencies, but advanced features may encounter known bugs. Consider using a derived class to avoid these problems. Edit2 (.NET 4.5): The content of the DropDownList can be based on ToString() and not of DisplayMemberPath, while DisplayMemberPath specifies the member for the selected and displayed item only.", "summary": "Have you set the DataContext to your ConnectionViewModel object? I copied you code and made some minor modifications, and it seems to work fine."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Here is a good tutorial to get started with classes in Python.", "output": "Here is a good tutorial to get started with classes in Python.", "answer": "Here is a good tutorial to get started with classes in Python.", "summary": "Here is a good tutorial to get started with classes in Python."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n I believe pwdencrypt is using a hash so you cannot really reverse the hashed string - the algorithm is designed so it's impossible. If you are verifying the password that a user entered the usual technique is to hash it and then compare it to the hashed version in the database. This is how you could verify a usered entered table BIGBLOCK Replace userEnteredValue with (big surprise) the value that the user entered :)", "output": "I believe pwdencrypt is using a hash so you cannot really reverse the hashed string - the algorithm is designed so it's impossible. If you are verifying the password that a user entered the usual technique is to hash it and then compare it to the hashed version in the database. BIGBLOCK", "answer": "I believe pwdencrypt is using a hash so you cannot really reverse the hashed string - the algorithm is designed so it's impossible. If you are verifying the password that a user entered the usual technique is to hash it and then compare it to the hashed version in the database. This is how you could verify a usered entered table BIGBLOCK Replace userEnteredValue with (big surprise) the value that the user entered :)", "summary": "I believe pwdencrypt is using a hash so you cannot really reverse the hashed string - the algorithm is designed so it's impossible. If you are verifying the password that a user entered the usual technique is to hash it and then compare it to the hashed version in the database. BIGBLOCK"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n The list returned by <code>Arrays.asList()</code> might be immutable. Could you try", "output": "The list returned by <code>Arrays.asList()</code> might be immutable.", "answer": "The list returned by <code>Arrays.asList()</code> might be immutable. Could you try", "summary": "The list returned by <code>Arrays.asList()</code> might be immutable."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n You cannot open and read a directory, use the <code>isFile()</code> and <code>isDirectory()</code> methods to distinguish between files and folders. You can get the contents of folders using the <code>list()</code> and <code>listFiles()</code> methods (for filenames and <code>File</code>s respectively) you can also specify a filter that selects a subset of files listed.", "output": "You cannot open and read a directory, use the <code>isFile()</code> and <code>isDirectory()</code> methods to distinguish between files and folders. You can get the contents of folders using the <code>list()</code> and <code>listFiles()</code> methods (for filenames and <code>File</code>s respectively) you can also specify a filter that selects a subset of files listed.", "answer": "You cannot open and read a directory, use the <code>isFile()</code> and <code>isDirectory()</code> methods to distinguish between files and folders. You can get the contents of folders using the <code>list()</code> and <code>listFiles()</code> methods (for filenames and <code>File</code>s respectively) you can also specify a filter that selects a subset of files listed.", "summary": "You cannot open and read a directory, use the <code>isFile()</code> and <code>isDirectory()</code> methods to distinguish between files and folders. You can get the contents of folders using the <code>list()</code> and <code>listFiles()</code> methods (for filenames and <code>File</code>s respectively) you can also specify a filter that selects a subset of files listed."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n If you want to get a feel for FRP, you could start with the old Fran tutorial from 1998, which has animated illustrations. For papers, start with <em>Functional Reactive Animation</em> and then follow up on links on the publications link on my home page and the FRP link on the Haskell wiki. Personally, I like to think about what FRP <em>means</em> before addressing how it might be implemented. (Code without a specification is an answer without a question and thus \"not even wrong\". )So I don't describe FRP in representation/implementation terms as Thomas K does in another answer (graphs, nodes, edges, firing, execution, etc).There are many possible implementation styles, but no implementation says what FRP <em>is</em>. I do resonate with Laurence G's simple description that FRP is about \"datatypes that represent a value 'over time' \".Conventional imperative programming captures these dynamic values only indirectly, through state and mutations.The complete history (past, present, future) has no first class representation.Moreover, only <em>discretely evolving</em> values can be (indirectly) captured, since the imperative paradigm is temporally discrete.In contrast, FRP captures these evolving values <em>directly</em> and has no difficulty with <em>continuously</em> evolving values. FRP is also unusual in that it is concurrent without running afoul of the theoretical &amp; pragmatic rats' nest that plagues imperative concurrency.Semantically, FRP's concurrency is <em>fine-grained</em>, <em>determinate</em>, and <em>continuous</em>. (I'm talking about meaning, not implementation. An implementation may or may not involve concurrency or parallelism. )Semantic determinacy is very important for reasoning, both rigorous and informal.While concurrency adds enormous complexity to imperative programming (due to nondeterministic interleaving), it is effortless in FRP. So, what is FRP?You could have invented it yourself.Start with these ideas: <li>Dynamic/evolving values (i.e., values \"over time\") are first class values in themselves. You can define them and combine them, pass them into &amp; out of functions. I called these things \"behaviors\". <li>Behaviors are built up out of a few primitives, like constant (static) behaviors and time (like a clock), and then with sequential and parallel combination. <em>n</em> behaviors are combined by applying an n-ary function (on static values), \"point-wise\", i.e., continuously over time. <li>To account for discrete phenomena, have another type (family) of \"events\", each of which has a stream (finite or infinite) of occurrences. Each occurrence has an associated time and value. <li>To come up with the compositional vocabulary out of which all behaviors and events can be built, play with some examples. Keep deconstructing into pieces that are more general/simple. <li>So that you know you're on solid ground, give the whole model a compositional foundation, using the technique of denotational semantics, which just means that (a) each type has a corresponding simple &amp; precise mathematical type of \"meanings\", and (b) each primitive and operator has a simple &amp; precise meaning as a function of the meanings of the constituents.<em>Never, ever</em> mix implementation considerations into your exploration process. If this description is gibberish to you, consult (a) <em>Denotational design with type class morphisms</em>, (b) <em>Push-pull functional reactive programming</em> (ignoring the implementation bits), and (c) the <em>Denotational Semantics</em> Haskell wikibooks page. Beware that denotational semantics has two parts, from its two founders Christopher Strachey and Dana Scott: the easier &amp; more useful Strachey part and the harder and less useful (for software design) Scott part. If you stick with these principles, I expect you'll get something more-or-less in the spirit of FRP. Where did I get these principles? In software design, I always ask the same question: \"what does it mean? \".Denotational semantics gave me a precise framework for this question, and one that fits my aesthetics (unlike operational or axiomatic semantics, both of which leave me unsatisfied).So I asked myself what is behavior?I soon realized that the temporally discrete nature of imperative computation is an accommodation to a particular style of <em>machine</em>, rather than a natural description of behavior itself.The simplest precise description of behavior I can think of is simply \"function of (continuous) time\", so that's my model.Delightfully, this model handles continuous, deterministic concurrency with ease and grace. It's been quite a challenge to implement this model correctly and efficiently, but that's another story.", "output": "So, what is FRP?You could have invented it yourself.Start with these ideas: <li>Dynamic/evolving values (i.e., values \"over time\") are first class values in themselves. <li>Behaviors are built up out of a few primitives, like constant (static) behaviors and time (like a clock), and then with sequential and parallel combination. <li>To account for discrete phenomena, have another type (family) of \"events\", each of which has a stream (finite or infinite) of occurrences. <li>To come up with the compositional vocabulary out of which all behaviors and events can be built, play with some examples. <li>So that you know you're on solid ground, give the whole model a compositional foundation, using the technique of denotational semantics, which just means that (a) each type has a corresponding simple &amp; precise mathematical type of \"meanings\", and (b) each primitive and operator has a simple &amp; precise meaning as a function of the meanings of the constituents.<em>Never, ever</em> mix implementation considerations into your exploration process. If you stick with these principles, I expect you'll get something more-or-less in the spirit of FRP. It's been quite a challenge to implement this model correctly and efficiently, but that's another story.", "answer": "If you want to get a feel for FRP, you could start with the old Fran tutorial from 1998, which has animated illustrations. For papers, start with <em>Functional Reactive Animation</em> and then follow up on links on the publications link on my home page and the FRP link on the Haskell wiki. Personally, I like to think about what FRP <em>means</em> before addressing how it might be implemented. (Code without a specification is an answer without a question and thus \"not even wrong\". )So I don't describe FRP in representation/implementation terms as Thomas K does in another answer (graphs, nodes, edges, firing, execution, etc).There are many possible implementation styles, but no implementation says what FRP <em>is</em>. I do resonate with Laurence G's simple description that FRP is about \"datatypes that represent a value 'over time' \".Conventional imperative programming captures these dynamic values only indirectly, through state and mutations.The complete history (past, present, future) has no first class representation.Moreover, only <em>discretely evolving</em> values can be (indirectly) captured, since the imperative paradigm is temporally discrete.In contrast, FRP captures these evolving values <em>directly</em> and has no difficulty with <em>continuously</em> evolving values. FRP is also unusual in that it is concurrent without running afoul of the theoretical &amp; pragmatic rats' nest that plagues imperative concurrency.Semantically, FRP's concurrency is <em>fine-grained</em>, <em>determinate</em>, and <em>continuous</em>. (I'm talking about meaning, not implementation. An implementation may or may not involve concurrency or parallelism. )Semantic determinacy is very important for reasoning, both rigorous and informal.While concurrency adds enormous complexity to imperative programming (due to nondeterministic interleaving), it is effortless in FRP. So, what is FRP?You could have invented it yourself.Start with these ideas: <li>Dynamic/evolving values (i.e., values \"over time\") are first class values in themselves. You can define them and combine them, pass them into &amp; out of functions. I called these things \"behaviors\". <li>Behaviors are built up out of a few primitives, like constant (static) behaviors and time (like a clock), and then with sequential and parallel combination. <em>n</em> behaviors are combined by applying an n-ary function (on static values), \"point-wise\", i.e., continuously over time. <li>To account for discrete phenomena, have another type (family) of \"events\", each of which has a stream (finite or infinite) of occurrences. Each occurrence has an associated time and value. <li>To come up with the compositional vocabulary out of which all behaviors and events can be built, play with some examples. Keep deconstructing into pieces that are more general/simple. <li>So that you know you're on solid ground, give the whole model a compositional foundation, using the technique of denotational semantics, which just means that (a) each type has a corresponding simple &amp; precise mathematical type of \"meanings\", and (b) each primitive and operator has a simple &amp; precise meaning as a function of the meanings of the constituents.<em>Never, ever</em> mix implementation considerations into your exploration process. If this description is gibberish to you, consult (a) <em>Denotational design with type class morphisms</em>, (b) <em>Push-pull functional reactive programming</em> (ignoring the implementation bits), and (c) the <em>Denotational Semantics</em> Haskell wikibooks page. Beware that denotational semantics has two parts, from its two founders Christopher Strachey and Dana Scott: the easier &amp; more useful Strachey part and the harder and less useful (for software design) Scott part. If you stick with these principles, I expect you'll get something more-or-less in the spirit of FRP. Where did I get these principles? In software design, I always ask the same question: \"what does it mean? \".Denotational semantics gave me a precise framework for this question, and one that fits my aesthetics (unlike operational or axiomatic semantics, both of which leave me unsatisfied).So I asked myself what is behavior?I soon realized that the temporally discrete nature of imperative computation is an accommodation to a particular style of <em>machine</em>, rather than a natural description of behavior itself.The simplest precise description of behavior I can think of is simply \"function of (continuous) time\", so that's my model.Delightfully, this model handles continuous, deterministic concurrency with ease and grace. It's been quite a challenge to implement this model correctly and efficiently, but that's another story.", "summary": "So, what is FRP?You could have invented it yourself.Start with these ideas: <li>Dynamic/evolving values (i.e., values \"over time\") are first class values in themselves. <li>Behaviors are built up out of a few primitives, like constant (static) behaviors and time (like a clock), and then with sequential and parallel combination. <li>To account for discrete phenomena, have another type (family) of \"events\", each of which has a stream (finite or infinite) of occurrences. <li>To come up with the compositional vocabulary out of which all behaviors and events can be built, play with some examples. <li>So that you know you're on solid ground, give the whole model a compositional foundation, using the technique of denotational semantics, which just means that (a) each type has a corresponding simple &amp; precise mathematical type of \"meanings\", and (b) each primitive and operator has a simple &amp; precise meaning as a function of the meanings of the constituents.<em>Never, ever</em> mix implementation considerations into your exploration process. If you stick with these principles, I expect you'll get something more-or-less in the spirit of FRP. It's been quite a challenge to implement this model correctly and efficiently, but that's another story."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n I believe it's because it can execute any JavaScript function from a string. Using it makes it easier for people to inject rogue code into the application.", "output": "Using it makes it easier for people to inject rogue code into the application.", "answer": "I believe it's because it can execute any JavaScript function from a string. Using it makes it easier for people to inject rogue code into the application.", "summary": "Using it makes it easier for people to inject rogue code into the application."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n You may want to try using the inttypes.h library that gives you types such as<code>int32_t</code>, <code>int64_t</code>, <code>uint64_t</code> etc.You can then use its macros such as: This is \"guaranteed\" to not give you the same trouble as <code>long</code>, <code>unsigned long long</code> etc, since you don't have to guess how many bits are in each data type.", "output": "You may want to try using the inttypes.h library that gives you types such as<code>int32_t</code>, <code>int64_t</code>, <code>uint64_t</code> etc.You can then use its macros such as: This is \"guaranteed\" to not give you the same trouble as <code>long</code>, <code>unsigned long long</code> etc, since you don't have to guess how many bits are in each data type.", "answer": "You may want to try using the inttypes.h library that gives you types such as<code>int32_t</code>, <code>int64_t</code>, <code>uint64_t</code> etc.You can then use its macros such as: This is \"guaranteed\" to not give you the same trouble as <code>long</code>, <code>unsigned long long</code> etc, since you don't have to guess how many bits are in each data type.", "summary": "You may want to try using the inttypes.h library that gives you types such as<code>int32_t</code>, <code>int64_t</code>, <code>uint64_t</code> etc.You can then use its macros such as: This is \"guaranteed\" to not give you the same trouble as <code>long</code>, <code>unsigned long long</code> etc, since you don't have to guess how many bits are in each data type."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n The simplest way is to read a character, and print it right after reading: <code>c</code> is <code>int</code> above, since <code>EOF</code> is a negative number, and a plain <code>char</code> may be <code>unsigned</code>. If you want to read the file in chunks, but without dynamic memory allocation, you can do: The second method above is essentially how you will read a file with a dynamically allocated array: Your method of <code>fscanf()</code> with <code>%s</code> as format loses information about whitespace in the file, so it is not exactly copying a file to <code>stdout</code>.", "output": "The simplest way is to read a character, and print it right after reading:", "answer": "The simplest way is to read a character, and print it right after reading: <code>c</code> is <code>int</code> above, since <code>EOF</code> is a negative number, and a plain <code>char</code> may be <code>unsigned</code>. If you want to read the file in chunks, but without dynamic memory allocation, you can do: The second method above is essentially how you will read a file with a dynamically allocated array: Your method of <code>fscanf()</code> with <code>%s</code> as format loses information about whitespace in the file, so it is not exactly copying a file to <code>stdout</code>.", "summary": "The simplest way is to read a character, and print it right after reading:"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n http://en.wikipedia.org/wiki/Smart_pointer In computer science, a smart pointer   is an abstract data type that   simulates a pointer while providing   additional features, such as automatic   garbage collection or bounds checking.   These additional features are intended   to reduce bugs caused by the misuse of   pointers while retaining efficiency.   Smart pointers typically keep track of   the objects that point to them for the   purpose of memory management. The   misuse of pointers is a major source   of bugs: the constant allocation,   deallocation and referencing that must   be performed by a program written   using pointers makes it very likely   that some memory leaks will occur.   Smart pointers try to prevent memory   leaks by making the resource   deallocation automatic: when the   pointer to an object (or the last in a   series of pointers) is destroyed, for   example because it goes out of scope,   the pointed object is destroyed too.", "output": "http://en.wikipedia.org/wiki/Smart_pointer", "answer": "http://en.wikipedia.org/wiki/Smart_pointer In computer science, a smart pointer   is an abstract data type that   simulates a pointer while providing   additional features, such as automatic   garbage collection or bounds checking.   These additional features are intended   to reduce bugs caused by the misuse of   pointers while retaining efficiency.   Smart pointers typically keep track of   the objects that point to them for the   purpose of memory management. The   misuse of pointers is a major source   of bugs: the constant allocation,   deallocation and referencing that must   be performed by a program written   using pointers makes it very likely   that some memory leaks will occur.   Smart pointers try to prevent memory   leaks by making the resource   deallocation automatic: when the   pointer to an object (or the last in a   series of pointers) is destroyed, for   example because it goes out of scope,   the pointed object is destroyed too.", "summary": "http://en.wikipedia.org/wiki/Smart_pointer"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n For what it's worth, a Dictionary is (conceptually) a hash table. If you meant \"why do we use the <code>Dictionary&lt;TKey, TValue&gt;</code> class instead of the <code>Hashtable</code> class? \", then it's an easy answer: <code>Dictionary&lt;TKey, TValue&gt;</code> is a generic type, <code>Hashtable</code> is not. That means you get type safety with <code>Dictionary&lt;TKey, TValue&gt;</code>, because you can't insert any random object into it, and you don't have to cast the values you take out. Interestingly, the <code>Dictionary&lt;TKey, TValue&gt;</code> implementation in the .NET Framework is based on the <code>Hashtable</code>, as you can tell from this comment in its source code: The generic Dictionary was copied from Hashtable's source Source", "output": "\", then it's an easy answer: <code>Dictionary&lt;TKey, TValue&gt;</code> is a generic type, <code>Hashtable</code> is not. That means you get type safety with <code>Dictionary&lt;TKey, TValue&gt;</code>, because you can't insert any random object into it, and you don't have to cast the values you take out.", "answer": "For what it's worth, a Dictionary is (conceptually) a hash table. If you meant \"why do we use the <code>Dictionary&lt;TKey, TValue&gt;</code> class instead of the <code>Hashtable</code> class? \", then it's an easy answer: <code>Dictionary&lt;TKey, TValue&gt;</code> is a generic type, <code>Hashtable</code> is not. That means you get type safety with <code>Dictionary&lt;TKey, TValue&gt;</code>, because you can't insert any random object into it, and you don't have to cast the values you take out. Interestingly, the <code>Dictionary&lt;TKey, TValue&gt;</code> implementation in the .NET Framework is based on the <code>Hashtable</code>, as you can tell from this comment in its source code: The generic Dictionary was copied from Hashtable's source Source", "summary": "\", then it's an easy answer: <code>Dictionary&lt;TKey, TValue&gt;</code> is a generic type, <code>Hashtable</code> is not. That means you get type safety with <code>Dictionary&lt;TKey, TValue&gt;</code>, because you can't insert any random object into it, and you don't have to cast the values you take out."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n You can try specifying a width for the div, whether it be in pixels, percentages or ems, and at that point the div will remain that width and the text will wrap automatically then within the div.", "output": "You can try specifying a width for the div, whether it be in pixels, percentages or ems, and at that point the div will remain that width and the text will wrap automatically then within the div.", "answer": "You can try specifying a width for the div, whether it be in pixels, percentages or ems, and at that point the div will remain that width and the text will wrap automatically then within the div.", "summary": "You can try specifying a width for the div, whether it be in pixels, percentages or ems, and at that point the div will remain that width and the text will wrap automatically then within the div."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Breadth vs Depth; think in terms of a tree of references with your object as the root node. Shallow: The variables A and B refer to different areas of memory, when B is assigned to A the two variables refer to the same area of memory. Later modifications to the contents of either are instantly reflected in the contents of other, as they share contents. Deep: The variables A and B refer to different areas of memory, when B is assigned to A the values in the memory area which A points to are copied into the memory area to which B points. Later modifications to the contents of either remain unique to A or B; the contents are not shared.", "output": "The variables A and B refer to different areas of memory, when B is assigned to A the two variables refer to the same area of memory. Later modifications to the contents of either are instantly reflected in the contents of other, as they share contents. The variables A and B refer to different areas of memory, when B is assigned to A the values in the memory area which A points to are copied into the memory area to which B points. Later modifications to the contents of either remain unique to A or B; the contents are not shared.", "answer": "Breadth vs Depth; think in terms of a tree of references with your object as the root node. Shallow: The variables A and B refer to different areas of memory, when B is assigned to A the two variables refer to the same area of memory. Later modifications to the contents of either are instantly reflected in the contents of other, as they share contents. Deep: The variables A and B refer to different areas of memory, when B is assigned to A the values in the memory area which A points to are copied into the memory area to which B points. Later modifications to the contents of either remain unique to A or B; the contents are not shared.", "summary": "The variables A and B refer to different areas of memory, when B is assigned to A the two variables refer to the same area of memory. Later modifications to the contents of either are instantly reflected in the contents of other, as they share contents. The variables A and B refer to different areas of memory, when B is assigned to A the values in the memory area which A points to are copied into the memory area to which B points. Later modifications to the contents of either remain unique to A or B; the contents are not shared."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n I think @Zack properly answered the question but just to cover all the bases: This would set the entire column to null as the Question Title asks. To set a specific row on a specific column to null use: This would set a specific cell to null as the inner question asks.", "output": "To set a specific row on a specific column to null use:", "answer": "I think @Zack properly answered the question but just to cover all the bases: This would set the entire column to null as the Question Title asks. To set a specific row on a specific column to null use: This would set a specific cell to null as the inner question asks.", "summary": "To set a specific row on a specific column to null use:"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n You should implement Runnable, but if you are running on Java 5 or higher, you should not start it with <code>new Thread</code> but use an ExecutorService instead. For details see: How to implement simple threading in Java.", "output": "You should implement Runnable, but if you are running on Java 5 or higher, you should not start it with <code>new Thread</code> but use an ExecutorService instead.", "answer": "You should implement Runnable, but if you are running on Java 5 or higher, you should not start it with <code>new Thread</code> but use an ExecutorService instead. For details see: How to implement simple threading in Java.", "summary": "You should implement Runnable, but if you are running on Java 5 or higher, you should not start it with <code>new Thread</code> but use an ExecutorService instead."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Maybe I missed the question, but why not: Edit: to override something (or pass extra args), do this: That way you could pass dict of error messages to the second param, and get to it later with <code>e.errors</code> Python 3 Update: In Python 3+, you can use this slightly more compact use of <code>super()</code>:", "output": "Maybe I missed the question, but why not:", "answer": "Maybe I missed the question, but why not: Edit: to override something (or pass extra args), do this: That way you could pass dict of error messages to the second param, and get to it later with <code>e.errors</code> Python 3 Update: In Python 3+, you can use this slightly more compact use of <code>super()</code>:", "summary": "Maybe I missed the question, but why not:"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n I like the idea to use an almost correct method on some of the input. Here is a version with a higher \"offset\". The code seems to work and passes my simple test case. Just replace your: BIGBLOCK code with this one: BIGBLOCK", "output": "Just replace your: BIGBLOCK code with this one: BIGBLOCK", "answer": "I like the idea to use an almost correct method on some of the input. Here is a version with a higher \"offset\". The code seems to work and passes my simple test case. Just replace your: BIGBLOCK code with this one: BIGBLOCK", "summary": "Just replace your: BIGBLOCK code with this one: BIGBLOCK"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n I have written this helper class to create instances of ObjectContext objects when they are defined in a different project than the project using it. I parse the connection string in the config file and replace '*' by the full assembly name. It is not perfect because it uses reflection to build the object, but it is the most generic way of doing it that I could find. Hope it helps someone.", "output": "I have written this helper class to create instances of ObjectContext objects when they are defined in a different project than the project using it. I parse the connection string in the config file and replace '*' by the full assembly name.", "answer": "I have written this helper class to create instances of ObjectContext objects when they are defined in a different project than the project using it. I parse the connection string in the config file and replace '*' by the full assembly name. It is not perfect because it uses reflection to build the object, but it is the most generic way of doing it that I could find. Hope it helps someone.", "summary": "I have written this helper class to create instances of ObjectContext objects when they are defined in a different project than the project using it. I parse the connection string in the config file and replace '*' by the full assembly name."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n For larger data sets where sorting may not be desirable, you can also use the following perl script: BIGBLOCK This basically just remembers every line output so that it doesn't output it again. It has the advantage over the \"<code>sort | uniq</code>\" solution in that there's no sorting required up front.", "output": "For larger data sets where sorting may not be desirable, you can also use the following perl script: BIGBLOCK It has the advantage over the \"<code>sort | uniq</code>\" solution in that there's no sorting required up front.", "answer": "For larger data sets where sorting may not be desirable, you can also use the following perl script: BIGBLOCK This basically just remembers every line output so that it doesn't output it again. It has the advantage over the \"<code>sort | uniq</code>\" solution in that there's no sorting required up front.", "summary": "For larger data sets where sorting may not be desirable, you can also use the following perl script: BIGBLOCK It has the advantage over the \"<code>sort | uniq</code>\" solution in that there's no sorting required up front."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Clarification (thanks @vgm64): if you're already in Terminal, this lets you quickly change to the topmost Finder window without leaving Terminal. This way, you can avoid using the mouse. I've added the following to my <code>.bash_profile</code> so I can type <code>cdff</code> in Terminal at any time. This is from this macosxhints.com Terminal hint.", "output": "I've added the following to my <code>.bash_profile</code> so I can type <code>cdff</code> in Terminal at any time.", "answer": "Clarification (thanks @vgm64): if you're already in Terminal, this lets you quickly change to the topmost Finder window without leaving Terminal. This way, you can avoid using the mouse. I've added the following to my <code>.bash_profile</code> so I can type <code>cdff</code> in Terminal at any time. This is from this macosxhints.com Terminal hint.", "summary": "I've added the following to my <code>.bash_profile</code> so I can type <code>cdff</code> in Terminal at any time."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n If you don't want to drag in all of boost, go with <code>strtod(3)</code> from <code>&lt;cstdlib&gt;</code> - it already returns a double. BIGBLOCK Outputs: BIGBLOCK Why atof() doesn't work ... what platform/compiler are you on?", "output": "If you don't want to drag in all of boost, go with <code>strtod(3)</code> from <code>&lt;cstdlib&gt;</code> - it already returns a double.", "answer": "If you don't want to drag in all of boost, go with <code>strtod(3)</code> from <code>&lt;cstdlib&gt;</code> - it already returns a double. BIGBLOCK Outputs: BIGBLOCK Why atof() doesn't work ... what platform/compiler are you on?", "summary": "If you don't want to drag in all of boost, go with <code>strtod(3)</code> from <code>&lt;cstdlib&gt;</code> - it already returns a double."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Try this,", "output": "Try this,", "answer": "Try this,", "summary": "Try this,"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n On Debian we use the <code>start-stop-daemon</code> utility, which handles pid-files, changing the user, putting the daemon into background and much more. I'm not familiar with RedHat, but the <code>daemon</code> utility that you are already using (which is defined in <code>/etc/init.d/functions</code>, btw.) is mentioned everywhere as the equivalent to <code>start-stop-daemon</code>, so either it can also change the uid of your program, or the way you do it is already the correct one. If you look around the net, there are several ready-made wrappers that you can use. Some may even be already packaged in RedHat. Have a look at <code>daemonize</code>, for example.", "output": "On Debian we use the <code>start-stop-daemon</code> utility, which handles pid-files, changing the user, putting the daemon into background and much more. If you look around the net, there are several ready-made wrappers that you can use. Have a look at <code>daemonize</code>, for example.", "answer": "On Debian we use the <code>start-stop-daemon</code> utility, which handles pid-files, changing the user, putting the daemon into background and much more. I'm not familiar with RedHat, but the <code>daemon</code> utility that you are already using (which is defined in <code>/etc/init.d/functions</code>, btw.) is mentioned everywhere as the equivalent to <code>start-stop-daemon</code>, so either it can also change the uid of your program, or the way you do it is already the correct one. If you look around the net, there are several ready-made wrappers that you can use. Some may even be already packaged in RedHat. Have a look at <code>daemonize</code>, for example.", "summary": "On Debian we use the <code>start-stop-daemon</code> utility, which handles pid-files, changing the user, putting the daemon into background and much more. If you look around the net, there are several ready-made wrappers that you can use. Have a look at <code>daemonize</code>, for example."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n You are trying to treat an object as an instance of a class that it is not. It's roughly analogous to trying to press the damper pedal on a guitar (pianos have damper pedals, guitars don't).", "output": "You are trying to treat an object as an instance of a class that it is not.", "answer": "You are trying to treat an object as an instance of a class that it is not. It's roughly analogous to trying to press the damper pedal on a guitar (pianos have damper pedals, guitars don't).", "summary": "You are trying to treat an object as an instance of a class that it is not."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n A proxy server proxies (and optionally caches) outgoing network requests to various not-necessarily-related public resources across the Internet. A reverse proxy captures (and optionally caches) incoming requests from the Internet and distributes them to various internal private resources, usually for High Availability purposes.", "output": "A proxy server proxies (and optionally caches) outgoing network requests to various not-necessarily-related public resources across the Internet. A reverse proxy captures (and optionally caches) incoming requests from the Internet and distributes them to various internal private resources, usually for High Availability purposes.", "answer": "A proxy server proxies (and optionally caches) outgoing network requests to various not-necessarily-related public resources across the Internet. A reverse proxy captures (and optionally caches) incoming requests from the Internet and distributes them to various internal private resources, usually for High Availability purposes.", "summary": "A proxy server proxies (and optionally caches) outgoing network requests to various not-necessarily-related public resources across the Internet. A reverse proxy captures (and optionally caches) incoming requests from the Internet and distributes them to various internal private resources, usually for High Availability purposes."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n I also like notepad++.", "output": "I also like notepad++.", "answer": "I also like notepad++.", "summary": "I also like notepad++."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Emacs can handle huge file sizes and you can use it on Windows or *nix.", "output": "Emacs can handle huge file sizes and you can use it on Windows or *nix.", "answer": "Emacs can handle huge file sizes and you can use it on Windows or *nix.", "summary": "Emacs can handle huge file sizes and you can use it on Windows or *nix."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Rather than allocating a massive array, could you try utilizing an iterator? These are delay-executed, meaning values are generated only as they're requested in an foreach statement; you shouldn't run out of memory this way: The above will generate as many random numbers as you wish, but only generate them as they're asked for via a foreach statement. You won't run out of memory that way. Alternately, If you must have them all in one place, store them in a file rather than in memory.", "output": "Rather than allocating a massive array, could you try utilizing an iterator? Alternately, If you must have them all in one place, store them in a file rather than in memory.", "answer": "Rather than allocating a massive array, could you try utilizing an iterator? These are delay-executed, meaning values are generated only as they're requested in an foreach statement; you shouldn't run out of memory this way: The above will generate as many random numbers as you wish, but only generate them as they're asked for via a foreach statement. You won't run out of memory that way. Alternately, If you must have them all in one place, store them in a file rather than in memory.", "summary": "Rather than allocating a massive array, could you try utilizing an iterator? Alternately, If you must have them all in one place, store them in a file rather than in memory."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n You're looking for isNaN(): See JavaScript isNaN() Function at MDN.", "output": "You're looking for isNaN():", "answer": "You're looking for isNaN(): See JavaScript isNaN() Function at MDN.", "summary": "You're looking for isNaN():"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Can anyone give me a good example of when CROSS APPLY makes a difference in those cases where INNER JOIN will work as well? See the article in my blog for detailed performance comparison: <li><strong><code>INNER JOIN</code> vs. <code>CROSS APPLY</code></strong> <code>CROSS APPLY</code> works better on things that have no simple <code>JOIN</code> condition. This one selects <code>3</code> last records from <code>t2</code> for each record from <code>t1</code>: It cannot be easily formulated with an <code>INNER JOIN</code> condition. You could probably do something like that using <code>CTE</code>'s and window function: , but this is less readable and probably less efficient. <strong>Update:</strong> Just checked. <code>master</code> is a table of about <code>20,000,000</code> records with a <code>PRIMARY KEY</code> on <code>id</code>. This query: runs for almost <code>30</code> seconds, while this one: is instant.", "output": "See the article in my blog for detailed performance comparison: <code>CROSS APPLY</code> works better on things that have no simple <code>JOIN</code> condition.", "answer": "Can anyone give me a good example of when CROSS APPLY makes a difference in those cases where INNER JOIN will work as well? See the article in my blog for detailed performance comparison: <li><strong><code>INNER JOIN</code> vs. <code>CROSS APPLY</code></strong> <code>CROSS APPLY</code> works better on things that have no simple <code>JOIN</code> condition. This one selects <code>3</code> last records from <code>t2</code> for each record from <code>t1</code>: It cannot be easily formulated with an <code>INNER JOIN</code> condition. You could probably do something like that using <code>CTE</code>'s and window function: , but this is less readable and probably less efficient. <strong>Update:</strong> Just checked. <code>master</code> is a table of about <code>20,000,000</code> records with a <code>PRIMARY KEY</code> on <code>id</code>. This query: runs for almost <code>30</code> seconds, while this one: is instant.", "summary": "See the article in my blog for detailed performance comparison: <code>CROSS APPLY</code> works better on things that have no simple <code>JOIN</code> condition."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Without the main sentinel, the code would be executed even if the script were imported as a module.", "output": "Without the main sentinel, the code would be executed even if the script were imported as a module.", "answer": "Without the main sentinel, the code would be executed even if the script were imported as a module.", "summary": "Without the main sentinel, the code would be executed even if the script were imported as a module."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n An unsigned char is a (unsigned) byte value (0 to 255). You may be thinking of \"char\" in terms of being a \"character\" but it is really a numerical value. The regular \"char\" is signed, so you have 128 values, and these values map to characters using ASCII encoding. But in either case, what you are storing in memory is a byte value.", "output": "An unsigned char is a (unsigned) byte value (0 to 255). The regular \"char\" is signed, so you have 128 values, and these values map to characters using ASCII encoding.", "answer": "An unsigned char is a (unsigned) byte value (0 to 255). You may be thinking of \"char\" in terms of being a \"character\" but it is really a numerical value. The regular \"char\" is signed, so you have 128 values, and these values map to characters using ASCII encoding. But in either case, what you are storing in memory is a byte value.", "summary": "An unsigned char is a (unsigned) byte value (0 to 255). The regular \"char\" is signed, so you have 128 values, and these values map to characters using ASCII encoding."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n BIGBLOCK read more <strong>EDIT:</strong> What I've noticed in this type of questions that quite everyone suggest to remove the last char of given string. But this does not fulfill the definition of Trim method. Trim - Removes all occurrences of  white space characters from the  beginning and end of this  instance. MSDN-Trim Under this definition removing only last character from string is bad solution. So if we want to \"Trim last character from string\" we should do something like this Example as extension method: BIGBLOCK <strong>Note</strong> if you want to remove all characters of the same value i.e(!!!! )the method above removes all existences of '!' from the end of the string,but if you want to remove only the last character you should use this : BIGBLOCK", "output": "BIGBLOCK So if we want to \"Trim last character from string\" we should do something like this Example as extension method: BIGBLOCK <strong>Note</strong> if you want to remove all characters of the same value i.e(!!!! )the method above removes all existences of '!' from the end of the string,but if you want to remove only the last character you should use this : BIGBLOCK", "answer": "BIGBLOCK read more <strong>EDIT:</strong> What I've noticed in this type of questions that quite everyone suggest to remove the last char of given string. But this does not fulfill the definition of Trim method. Trim - Removes all occurrences of  white space characters from the  beginning and end of this  instance. MSDN-Trim Under this definition removing only last character from string is bad solution. So if we want to \"Trim last character from string\" we should do something like this Example as extension method: BIGBLOCK <strong>Note</strong> if you want to remove all characters of the same value i.e(!!!! )the method above removes all existences of '!' from the end of the string,but if you want to remove only the last character you should use this : BIGBLOCK", "summary": "BIGBLOCK So if we want to \"Trim last character from string\" we should do something like this Example as extension method: BIGBLOCK <strong>Note</strong> if you want to remove all characters of the same value i.e(!!!! )the method above removes all existences of '!' from the end of the string,but if you want to remove only the last character you should use this : BIGBLOCK"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n I had that problem too. Try using Server.Transfer instead of Response.Redirect Worked for me", "output": "Try using Server.Transfer instead of Response.Redirect", "answer": "I had that problem too. Try using Server.Transfer instead of Response.Redirect Worked for me", "summary": "Try using Server.Transfer instead of Response.Redirect"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n There's an alternative approach to this: BIGBLOCK", "output": "There's an alternative approach to this: BIGBLOCK", "answer": "There's an alternative approach to this: BIGBLOCK", "summary": "There's an alternative approach to this: BIGBLOCK"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n I believe I have a <code>O(k)</code> time and <code>O(log(k))</code> space algorithm, given that you have the <code>floor(x)</code> and <code>log2(x)</code> functions for arbitrarily big integers available: You have an <code>k</code>-bit long integer (hence the <code>log8(k)</code> space) where you add the <code>x^2</code>, where x is the next number you find in the bag: <code>s=1^2+2^2+...</code> This takes <code>O(N)</code> time (which is not a problem for the interviewer). At the end you get <code>j=floor(log2(s))</code> which is the biggest number you're looking for. Then <code>s=s-j</code> and you do again the above: BIGBLOCK Now, you usually don't have floor and log2 functions for <code>2756</code>-bit integers but instead for doubles. So? Simply, for each 2 bytes (or 1, or 3, or 4) you can use these functions to get the desired numbers, but this adds an <code>O(N)</code> factor to time complexity", "output": "You have an <code>k</code>-bit long integer (hence the <code>log8(k)</code> space) where you add the <code>x^2</code>, where x is the next number you find in the bag: <code>s=1^2+2^2+...</code> This takes <code>O(N)</code> time (which is not a problem for the interviewer). At the end you get <code>j=floor(log2(s))</code> which is the biggest number you're looking for. Then <code>s=s-j</code> and you do again the above: Simply, for each 2 bytes (or 1, or 3, or 4) you can use these functions to get the desired numbers, but this adds an <code>O(N)</code> factor to time complexity", "answer": "I believe I have a <code>O(k)</code> time and <code>O(log(k))</code> space algorithm, given that you have the <code>floor(x)</code> and <code>log2(x)</code> functions for arbitrarily big integers available: You have an <code>k</code>-bit long integer (hence the <code>log8(k)</code> space) where you add the <code>x^2</code>, where x is the next number you find in the bag: <code>s=1^2+2^2+...</code> This takes <code>O(N)</code> time (which is not a problem for the interviewer). At the end you get <code>j=floor(log2(s))</code> which is the biggest number you're looking for. Then <code>s=s-j</code> and you do again the above: BIGBLOCK Now, you usually don't have floor and log2 functions for <code>2756</code>-bit integers but instead for doubles. So? Simply, for each 2 bytes (or 1, or 3, or 4) you can use these functions to get the desired numbers, but this adds an <code>O(N)</code> factor to time complexity", "summary": "You have an <code>k</code>-bit long integer (hence the <code>log8(k)</code> space) where you add the <code>x^2</code>, where x is the next number you find in the bag: <code>s=1^2+2^2+...</code> This takes <code>O(N)</code> time (which is not a problem for the interviewer). At the end you get <code>j=floor(log2(s))</code> which is the biggest number you're looking for. Then <code>s=s-j</code> and you do again the above: Simply, for each 2 bytes (or 1, or 3, or 4) you can use these functions to get the desired numbers, but this adds an <code>O(N)</code> factor to time complexity"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n This returns a DialogResult which you can check. For example,", "output": "This returns a DialogResult which you can check.", "answer": "This returns a DialogResult which you can check. For example,", "summary": "This returns a DialogResult which you can check."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n The solution of rogeriopvl works fine, but if you want more specific info you can use the python built-in profiler. Check this page: http://docs.python.org/library/profile.html a profiler tells you a lot of useful information like the time spent in every function", "output": "The solution of rogeriopvl works fine, but if you want more specific info you can use the python built-in profiler.", "answer": "The solution of rogeriopvl works fine, but if you want more specific info you can use the python built-in profiler. Check this page: http://docs.python.org/library/profile.html a profiler tells you a lot of useful information like the time spent in every function", "summary": "The solution of rogeriopvl works fine, but if you want more specific info you can use the python built-in profiler."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Let me give the churlish \"unofficial\" explanation. POSIX is a set of standards which attempts to distinguish \"UNIX\" and UNIX-like systems from those which are incompatible with them. It was created by the U.S. government for procurement purposes. The idea was that the U.S. federal procurements needed a way to legally specify the requirements for various sorts of bids and contracts in a way that could be used to exclude systems to which a given existing code base or programming staff would NOT be portable. Since POSIX was written post facto ... to describe a loosely similar set of competing systems ... it was NOT written in a way that could be implemented. So, for example, Microsoft's NT was written with enough POSIX conformance to qualify for some bids ... even though the POSIX subsystem was essentially useless in terms of practical portability and compatibility with UNIX systems. Various other standards for UNIX have been written over the decades. Things like the SPEC1170 (specified eleven hundred and seventy function calls which had to be implemented compatibly) and various incarnations of the SUS (Single UNIX Specification). For the most part these \"standards\" have been inadequate to any practical technical application. They most exist for argumentation, legal wrangling and other dysfunctional reasons.", "output": "POSIX is a set of standards which attempts to distinguish \"UNIX\" and UNIX-like systems from those which are incompatible with them. So, for example, Microsoft's NT was written with enough POSIX conformance to qualify for some bids ... even though the POSIX subsystem was essentially useless in terms of practical portability and compatibility with UNIX systems. Various other standards for UNIX have been written over the decades. They most exist for argumentation, legal wrangling and other dysfunctional reasons.", "answer": "Let me give the churlish \"unofficial\" explanation. POSIX is a set of standards which attempts to distinguish \"UNIX\" and UNIX-like systems from those which are incompatible with them. It was created by the U.S. government for procurement purposes. The idea was that the U.S. federal procurements needed a way to legally specify the requirements for various sorts of bids and contracts in a way that could be used to exclude systems to which a given existing code base or programming staff would NOT be portable. Since POSIX was written post facto ... to describe a loosely similar set of competing systems ... it was NOT written in a way that could be implemented. So, for example, Microsoft's NT was written with enough POSIX conformance to qualify for some bids ... even though the POSIX subsystem was essentially useless in terms of practical portability and compatibility with UNIX systems. Various other standards for UNIX have been written over the decades. Things like the SPEC1170 (specified eleven hundred and seventy function calls which had to be implemented compatibly) and various incarnations of the SUS (Single UNIX Specification). For the most part these \"standards\" have been inadequate to any practical technical application. They most exist for argumentation, legal wrangling and other dysfunctional reasons.", "summary": "POSIX is a set of standards which attempts to distinguish \"UNIX\" and UNIX-like systems from those which are incompatible with them. So, for example, Microsoft's NT was written with enough POSIX conformance to qualify for some bids ... even though the POSIX subsystem was essentially useless in terms of practical portability and compatibility with UNIX systems. Various other standards for UNIX have been written over the decades. They most exist for argumentation, legal wrangling and other dysfunctional reasons."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n on the last line, don't use <code>$(this).remove()</code> use <code>$(this).hide()</code> instead. EDIT: To clarify,on the close click event you're removing the <code>#terms</code> div from the DOM which is why its not coming back. You just need to hide it instead.", "output": "on the last line, don't use <code>$(this).remove()</code> use <code>$(this).hide()</code> instead.", "answer": "on the last line, don't use <code>$(this).remove()</code> use <code>$(this).hide()</code> instead. EDIT: To clarify,on the close click event you're removing the <code>#terms</code> div from the DOM which is why its not coming back. You just need to hide it instead.", "summary": "on the last line, don't use <code>$(this).remove()</code> use <code>$(this).hide()</code> instead."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n That's a lot of questions. <li>Why <code>EOF</code> is -1: usually -1 in POSIX system calls is returned on error, so i guess the idea is \"EOF is kind of error\" <li>any boolean operation (including !=) returns 1 in case it's TRUE, and 0 in case it's FALSE, so <code>getchar() != EOF</code> is <code>0</code> when it's FALSE, meaning <code>getchar()</code> returned <code>EOF</code>. <li>in order to emulate <code>EOF</code> when reading from <code>stdin</code> press Ctrl+D", "output": "<li>Why <code>EOF</code> is -1: usually -1 in POSIX system calls is returned on error, so i guess the idea is \"EOF is kind of error\" <li>any boolean operation (including !=) returns 1 in case it's TRUE, and 0 in case it's FALSE, so <code>getchar() != EOF</code> is <code>0</code> when it's FALSE, meaning <code>getchar()</code> returned <code>EOF</code>. <li>in order to emulate <code>EOF</code> when reading from <code>stdin</code> press Ctrl+D", "answer": "That's a lot of questions. <li>Why <code>EOF</code> is -1: usually -1 in POSIX system calls is returned on error, so i guess the idea is \"EOF is kind of error\" <li>any boolean operation (including !=) returns 1 in case it's TRUE, and 0 in case it's FALSE, so <code>getchar() != EOF</code> is <code>0</code> when it's FALSE, meaning <code>getchar()</code> returned <code>EOF</code>. <li>in order to emulate <code>EOF</code> when reading from <code>stdin</code> press Ctrl+D", "summary": "<li>Why <code>EOF</code> is -1: usually -1 in POSIX system calls is returned on error, so i guess the idea is \"EOF is kind of error\" <li>any boolean operation (including !=) returns 1 in case it's TRUE, and 0 in case it's FALSE, so <code>getchar() != EOF</code> is <code>0</code> when it's FALSE, meaning <code>getchar()</code> returned <code>EOF</code>. <li>in order to emulate <code>EOF</code> when reading from <code>stdin</code> press Ctrl+D"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n I had to validate an XML against XSD just one time, so I tried XMLFox. I found it to be very confusing and weird. The help instructions didn't seem to match the interface. I ended up using LiquidXML Studio 2008 (v6) which was much easier to use and more immediately familiar (the UI is very similar to Visual Basic 2008 Express, which I use frequently). The drawback: the validation capability is not in the free version, so I had to use the 30 day trial.", "output": "I had to validate an XML against XSD just one time, so I tried XMLFox. I found it to be very confusing and weird. I ended up using LiquidXML Studio 2008 (v6) which was much easier to use and more immediately familiar (the UI is very similar to Visual Basic 2008 Express, which I use frequently).", "answer": "I had to validate an XML against XSD just one time, so I tried XMLFox. I found it to be very confusing and weird. The help instructions didn't seem to match the interface. I ended up using LiquidXML Studio 2008 (v6) which was much easier to use and more immediately familiar (the UI is very similar to Visual Basic 2008 Express, which I use frequently). The drawback: the validation capability is not in the free version, so I had to use the 30 day trial.", "summary": "I had to validate an XML against XSD just one time, so I tried XMLFox. I found it to be very confusing and weird. I ended up using LiquidXML Studio 2008 (v6) which was much easier to use and more immediately familiar (the UI is very similar to Visual Basic 2008 Express, which I use frequently)."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n With C++, Plain Old Data doesn't just mean that things like int, char, etc are the only types used. Plain Old Data really means in practice that you can take a struct memcpy it from one location in memory to another and things will work exactly like you would expect (i.e. not blow up). This breaks if your class, or any class your class contains, has as a member that is a pointer or a reference or a class that has a virtual function. Essentially, if pointers have to be involved somewhere, its not Plain Old Data.", "output": "Plain Old Data really means in practice that you can take a struct memcpy it from one location in memory to another and things will work exactly like you would expect (i.e. Essentially, if pointers have to be involved somewhere, its not Plain Old Data.", "answer": "With C++, Plain Old Data doesn't just mean that things like int, char, etc are the only types used. Plain Old Data really means in practice that you can take a struct memcpy it from one location in memory to another and things will work exactly like you would expect (i.e. not blow up). This breaks if your class, or any class your class contains, has as a member that is a pointer or a reference or a class that has a virtual function. Essentially, if pointers have to be involved somewhere, its not Plain Old Data.", "summary": "Plain Old Data really means in practice that you can take a struct memcpy it from one location in memory to another and things will work exactly like you would expect (i.e. Essentially, if pointers have to be involved somewhere, its not Plain Old Data."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n If you are coming from an object-oriented language you should check this article.", "output": "If you are coming from an object-oriented language you should check this article.", "answer": "If you are coming from an object-oriented language you should check this article.", "summary": "If you are coming from an object-oriented language you should check this article."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n In my case I had forgot to set <code>SSLEngine On</code> in the configuration. Like so, http://httpd.apache.org/docs/2.2/mod/mod_ssl.html#sslengine", "output": "In my case I had forgot to set <code>SSLEngine On</code> in the configuration.", "answer": "In my case I had forgot to set <code>SSLEngine On</code> in the configuration. Like so, http://httpd.apache.org/docs/2.2/mod/mod_ssl.html#sslengine", "summary": "In my case I had forgot to set <code>SSLEngine On</code> in the configuration."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n This is a barebones look at what I've done to float one image over another. <code>img { position: absolute; top: 25px; left: 25px; } .imgA1 { z-index: 1; } .imgB1 { z-index: 3; }</code> <code>&lt;img class=\"imgA1\" src=\"https://placehold.it/200/333333\"&gt; &lt;img class=\"imgB1\" src=\"https://placehold.it/100\"&gt;</code> Source", "output": "This is a barebones look at what I've done to float one image over another.", "answer": "This is a barebones look at what I've done to float one image over another. <code>img { position: absolute; top: 25px; left: 25px; } .imgA1 { z-index: 1; } .imgB1 { z-index: 3; }</code> <code>&lt;img class=\"imgA1\" src=\"https://placehold.it/200/333333\"&gt; &lt;img class=\"imgB1\" src=\"https://placehold.it/100\"&gt;</code> Source", "summary": "This is a barebones look at what I've done to float one image over another."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Here are the correct Microsoft Office MIME types for HTTP Content Streaming: For further details check out this TechNet article and this blog post.", "output": "Here are the correct Microsoft Office MIME types for HTTP Content Streaming:", "answer": "Here are the correct Microsoft Office MIME types for HTTP Content Streaming: For further details check out this TechNet article and this blog post.", "summary": "Here are the correct Microsoft Office MIME types for HTTP Content Streaming:"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n I disagree with comments that a <code>for</code> loop is a better choice in most cases. <code>foreach</code> is a useful construct, and not replaceble by a <code>for</code> loop in all circumstances. For example, if you have a <strong>DataReader</strong> and loop through all records using a <code>foreach</code> it automatically calls the <strong>Dispose</strong> method and closes the reader (which can then close the connection automatically). This is therefore safer as it prevents connection leaks even if you forget to close the reader. (Sure it is good practise to always close readers but the compiler is not going to catch it if you don't - you can't guarantee you have closed all readers but you can make it more likely you won't leak connections by getting in the habit of using foreach.) There may be other examples of the implicit call of the <code>Dispose</code> method being useful.", "output": "<code>foreach</code> is a useful construct, and not replaceble by a <code>for</code> loop in all circumstances. This is therefore safer as it prevents connection leaks even if you forget to close the reader.", "answer": "I disagree with comments that a <code>for</code> loop is a better choice in most cases. <code>foreach</code> is a useful construct, and not replaceble by a <code>for</code> loop in all circumstances. For example, if you have a <strong>DataReader</strong> and loop through all records using a <code>foreach</code> it automatically calls the <strong>Dispose</strong> method and closes the reader (which can then close the connection automatically). This is therefore safer as it prevents connection leaks even if you forget to close the reader. (Sure it is good practise to always close readers but the compiler is not going to catch it if you don't - you can't guarantee you have closed all readers but you can make it more likely you won't leak connections by getting in the habit of using foreach.) There may be other examples of the implicit call of the <code>Dispose</code> method being useful.", "summary": "<code>foreach</code> is a useful construct, and not replaceble by a <code>for</code> loop in all circumstances. This is therefore safer as it prevents connection leaks even if you forget to close the reader."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n The paper <em>Simply efficient functional reactivity</em> by Conal Elliott (direct PDF, 233&nbsp;KB) is a fairly good introduction. The corresponding library also works. The paper is now superceded by another paper, <em>Push-pull functional reactive programming</em> (direct PDF, 286&nbsp;KB).", "output": "The paper <em>Simply efficient functional reactivity</em> by Conal Elliott (direct PDF, 233&nbsp;KB) is a fairly good introduction.", "answer": "The paper <em>Simply efficient functional reactivity</em> by Conal Elliott (direct PDF, 233&nbsp;KB) is a fairly good introduction. The corresponding library also works. The paper is now superceded by another paper, <em>Push-pull functional reactive programming</em> (direct PDF, 286&nbsp;KB).", "summary": "The paper <em>Simply efficient functional reactivity</em> by Conal Elliott (direct PDF, 233&nbsp;KB) is a fairly good introduction."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n The Inversion of Control (IoC) and Dependency Injection (DI) patterns are all about removing dependencies from your code. For example, say your application has a text editor component and you want to provide spell checking. Your standard code would look something like this: What we've done here creates a dependency between the <code>TextEditor</code> and the <code>SpellChecker</code>. In an IoC scenario we would instead do something like this: In the first code example we are instantiating <code>SpellChecker</code> (<code>this.checker = new SpellChecker();</code>), which means the <code>TextEditor</code> class directly depends on the <code>SpellChecker</code> class. In the second code example we are creating an abstraction by having the <code>SpellChecker</code> dependency class in <code>TextEditor</code> constructor signature (not initializing dependency in class). This allows us to call the dependency then pass it to the TextEditor class like so: Now the client creating the <code>TextEditor</code> class has the control over which <code>SpellChecker</code> implementation to use because we're injecting the dependency to the <code>TextEditor</code> signature. This is just a simple example, there's a good series of articles by Simone Busoli that explains it in greater detail.", "output": "The Inversion of Control (IoC) and Dependency Injection (DI) patterns are all about removing dependencies from your code.", "answer": "The Inversion of Control (IoC) and Dependency Injection (DI) patterns are all about removing dependencies from your code. For example, say your application has a text editor component and you want to provide spell checking. Your standard code would look something like this: What we've done here creates a dependency between the <code>TextEditor</code> and the <code>SpellChecker</code>. In an IoC scenario we would instead do something like this: In the first code example we are instantiating <code>SpellChecker</code> (<code>this.checker = new SpellChecker();</code>), which means the <code>TextEditor</code> class directly depends on the <code>SpellChecker</code> class. In the second code example we are creating an abstraction by having the <code>SpellChecker</code> dependency class in <code>TextEditor</code> constructor signature (not initializing dependency in class). This allows us to call the dependency then pass it to the TextEditor class like so: Now the client creating the <code>TextEditor</code> class has the control over which <code>SpellChecker</code> implementation to use because we're injecting the dependency to the <code>TextEditor</code> signature. This is just a simple example, there's a good series of articles by Simone Busoli that explains it in greater detail.", "summary": "The Inversion of Control (IoC) and Dependency Injection (DI) patterns are all about removing dependencies from your code."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n <code>svn status</code> will tell you which files are not in SVN, as well as what's changed. Look at the SVN properties for the ignore property. For all things SVN, the Red Book is required reading.", "output": "<code>svn status</code> will tell you which files are not in SVN, as well as what's changed.", "answer": "<code>svn status</code> will tell you which files are not in SVN, as well as what's changed. Look at the SVN properties for the ignore property. For all things SVN, the Red Book is required reading.", "summary": "<code>svn status</code> will tell you which files are not in SVN, as well as what's changed."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n The ceil (ceiling) function:", "output": "The ceil (ceiling) function:", "answer": "The ceil (ceiling) function:", "summary": "The ceil (ceiling) function:"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n With Vim on Windows use Ctrl+Q in place of Ctrl+V", "output": "With Vim on Windows use Ctrl+Q in place of Ctrl+V", "answer": "With Vim on Windows use Ctrl+Q in place of Ctrl+V", "summary": "With Vim on Windows use Ctrl+Q in place of Ctrl+V"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n This will iterate through all the elements: Prints: This will iterate through all the elements giving you the value and the index: Prints: I'm not quite sure from your question which one you are looking for.", "output": "This will iterate through all the elements: This will iterate through all the elements giving you the value and the index:", "answer": "This will iterate through all the elements: Prints: This will iterate through all the elements giving you the value and the index: Prints: I'm not quite sure from your question which one you are looking for.", "summary": "This will iterate through all the elements: This will iterate through all the elements giving you the value and the index:"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Firefox 3.6 has a full screen option for HTML5 video's, right-click on the video and select 'full screen'. The latest Webkit nightlies also support full screen HTML5 video, try the Sublime player with the latest nightly and hold Cmd / Ctrl while selecting the full screen option. I guess Chrome / Opera will also support something like this. Hopefully IE9 will also support full screen HTML5 video.", "output": "Firefox 3.6 has a full screen option for HTML5 video's, right-click on the video and select 'full screen'.", "answer": "Firefox 3.6 has a full screen option for HTML5 video's, right-click on the video and select 'full screen'. The latest Webkit nightlies also support full screen HTML5 video, try the Sublime player with the latest nightly and hold Cmd / Ctrl while selecting the full screen option. I guess Chrome / Opera will also support something like this. Hopefully IE9 will also support full screen HTML5 video.", "summary": "Firefox 3.6 has a full screen option for HTML5 video's, right-click on the video and select 'full screen'."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Most of the times these terms Web Server and Application server are used interchangeably. Following are some of the key differences in features of Web Server and Application Server: <li>Web Server is designed to serve HTTP Content. App Server can also serve HTTP Content but is not limited to just HTTP. It can be provided other protocol support such as RMI/RPC <li>Web Server is mostly designed to serve static content, though most Web Servers have plugins to support scripting languages like Perl, PHP, ASP, JSP etc. through which these servers can generate dynamic HTTP content. <li>Most of the application servers have Web Server as integral part of them, that means App Server can do whatever Web Server is capable of. Additionally App Server have components and features to support Application level services such as Connection Pooling, Object Pooling, Transaction Support, Messaging services etc. <li>As web servers are well suited for static content and app servers for dynamic content, most of the production environments have web server acting as reverse proxy to app server. That means while servicing a page request, static contents (such as images/Static HTML) are served by web server that interprets the request. Using some kind of filtering technique (mostly extension of requested resource) web server identifies dynamic content request and transparently forwards to app server Example of such configuration is Apache Tomcat HTTP Server and Oracle (formerly BEA) WebLogic Server. Apache Tomcat HTTP Server is Web Server and Oracle WebLogic is Application Server. In some cases the servers are tightly integrated such as IIS and .NET Runtime. IIS is web server. When equipped with .NET runtime environment, IIS is capable of providing application services.", "output": "Most of the times these terms Web Server and Application server are used interchangeably. <li>Web Server is designed to serve HTTP Content. App Server can also serve HTTP Content but is not limited to just HTTP. <li>Web Server is mostly designed to serve static content, though most Web Servers have plugins to support scripting languages like Perl, PHP, ASP, JSP etc. through which these servers can generate dynamic HTTP content. <li>Most of the application servers have Web Server as integral part of them, that means App Server can do whatever Web Server is capable of. <li>As web servers are well suited for static content and app servers for dynamic content, most of the production environments have web server acting as reverse proxy to app server.", "answer": "Most of the times these terms Web Server and Application server are used interchangeably. Following are some of the key differences in features of Web Server and Application Server: <li>Web Server is designed to serve HTTP Content. App Server can also serve HTTP Content but is not limited to just HTTP. It can be provided other protocol support such as RMI/RPC <li>Web Server is mostly designed to serve static content, though most Web Servers have plugins to support scripting languages like Perl, PHP, ASP, JSP etc. through which these servers can generate dynamic HTTP content. <li>Most of the application servers have Web Server as integral part of them, that means App Server can do whatever Web Server is capable of. Additionally App Server have components and features to support Application level services such as Connection Pooling, Object Pooling, Transaction Support, Messaging services etc. <li>As web servers are well suited for static content and app servers for dynamic content, most of the production environments have web server acting as reverse proxy to app server. That means while servicing a page request, static contents (such as images/Static HTML) are served by web server that interprets the request. Using some kind of filtering technique (mostly extension of requested resource) web server identifies dynamic content request and transparently forwards to app server Example of such configuration is Apache Tomcat HTTP Server and Oracle (formerly BEA) WebLogic Server. Apache Tomcat HTTP Server is Web Server and Oracle WebLogic is Application Server. In some cases the servers are tightly integrated such as IIS and .NET Runtime. IIS is web server. When equipped with .NET runtime environment, IIS is capable of providing application services.", "summary": "Most of the times these terms Web Server and Application server are used interchangeably. <li>Web Server is designed to serve HTTP Content. App Server can also serve HTTP Content but is not limited to just HTTP. <li>Web Server is mostly designed to serve static content, though most Web Servers have plugins to support scripting languages like Perl, PHP, ASP, JSP etc. through which these servers can generate dynamic HTTP content. <li>Most of the application servers have Web Server as integral part of them, that means App Server can do whatever Web Server is capable of. <li>As web servers are well suited for static content and app servers for dynamic content, most of the production environments have web server acting as reverse proxy to app server."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Moral of the story: <em>Inherit only if you want to override some behavior.</em> Or rather it should be read as: <em>Inherit less, interface more.</em>", "output": "<em>Inherit only if you want to override some behavior.</em> <em>Inherit less, interface more.</em>", "answer": "Moral of the story: <em>Inherit only if you want to override some behavior.</em> Or rather it should be read as: <em>Inherit less, interface more.</em>", "summary": "<em>Inherit only if you want to override some behavior.</em> <em>Inherit less, interface more.</em>"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n <li>The best would be using <code>s1.equalsIgnoreCase(s2)</code>: (see javadoc) <li>You can also convert them both to upper/lower case and use <code>s1.equals(s2)</code>", "output": "<li>The best would be using <code>s1.equalsIgnoreCase(s2)</code>: (see javadoc) <li>You can also convert them both to upper/lower case and use <code>s1.equals(s2)</code>", "answer": "<li>The best would be using <code>s1.equalsIgnoreCase(s2)</code>: (see javadoc) <li>You can also convert them both to upper/lower case and use <code>s1.equals(s2)</code>", "summary": "<li>The best would be using <code>s1.equalsIgnoreCase(s2)</code>: (see javadoc) <li>You can also convert them both to upper/lower case and use <code>s1.equals(s2)</code>"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n It's a 32-bit signed integer type on most legacy platforms. However, that causes your code to suffer from the year 2038 bug. So modern C libraries should be defining it to be a signed 64-bit int instead, which is safe for a few billion years.", "output": "It's a 32-bit signed integer type on most legacy platforms. However, that causes your code to suffer from the year 2038 bug. So modern C libraries should be defining it to be a signed 64-bit int instead, which is safe for a few billion years.", "answer": "It's a 32-bit signed integer type on most legacy platforms. However, that causes your code to suffer from the year 2038 bug. So modern C libraries should be defining it to be a signed 64-bit int instead, which is safe for a few billion years.", "summary": "It's a 32-bit signed integer type on most legacy platforms. However, that causes your code to suffer from the year 2038 bug. So modern C libraries should be defining it to be a signed 64-bit int instead, which is safe for a few billion years."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n In every C++ program, all non-static functions are represented in the binary file as symbols. These symbols are special text strings that uniquely identify a function in the program. In C, the symbol name is the same as the function name. This is possible because in C no two non-static functions can have the same name. Because C++ allows overloading and has many features that C does not Ã©Â?like classes, member functions, exception specifications - it is not possible to simply use the function name as the symbol name. To solve that, C++ uses so-called name mangling, which transforms the function name and all the necessary information (like the number and size of the arguments) into some weird-looking string processed only by the compiler and linker. So if you specify a function to be extern C, the compiler doesn't performs name mangling with it and it can be directly accessed using its symbol name as the function name. This comes handy while using <code>dlsym()</code> and <code>dlopen()</code> for calling such functions.", "output": "Because C++ allows overloading and has many features that C does not Ã©Â?like classes, member functions, exception specifications - it is not possible to simply use the function name as the symbol name. To solve that, C++ uses so-called name mangling, which transforms the function name and all the necessary information (like the number and size of the arguments) into some weird-looking string processed only by the compiler and linker.", "answer": "In every C++ program, all non-static functions are represented in the binary file as symbols. These symbols are special text strings that uniquely identify a function in the program. In C, the symbol name is the same as the function name. This is possible because in C no two non-static functions can have the same name. Because C++ allows overloading and has many features that C does not Ã©Â?like classes, member functions, exception specifications - it is not possible to simply use the function name as the symbol name. To solve that, C++ uses so-called name mangling, which transforms the function name and all the necessary information (like the number and size of the arguments) into some weird-looking string processed only by the compiler and linker. So if you specify a function to be extern C, the compiler doesn't performs name mangling with it and it can be directly accessed using its symbol name as the function name. This comes handy while using <code>dlsym()</code> and <code>dlopen()</code> for calling such functions.", "summary": "Because C++ allows overloading and has many features that C does not Ã©Â?like classes, member functions, exception specifications - it is not possible to simply use the function name as the symbol name. To solve that, C++ uses so-called name mangling, which transforms the function name and all the necessary information (like the number and size of the arguments) into some weird-looking string processed only by the compiler and linker."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Yes. Well what happens with HTML5 video is that you just put the <code>&lt;video&gt;</code> tag and the browser will give it's own UI, and thus the ability for full screen viewing. It really makes life much better on us users to not have to see the \"art\" some developer playing with Flash could make :) It also adds consistency to the platform, which is nice.", "output": "Well what happens with HTML5 video is that you just put the <code>&lt;video&gt;</code> tag and the browser will give it's own UI, and thus the ability for full screen viewing.", "answer": "Yes. Well what happens with HTML5 video is that you just put the <code>&lt;video&gt;</code> tag and the browser will give it's own UI, and thus the ability for full screen viewing. It really makes life much better on us users to not have to see the \"art\" some developer playing with Flash could make :) It also adds consistency to the platform, which is nice.", "summary": "Well what happens with HTML5 video is that you just put the <code>&lt;video&gt;</code> tag and the browser will give it's own UI, and thus the ability for full screen viewing."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Does the actual query return no results? <code>First()</code> will fail if there are no results.", "output": "<code>First()</code> will fail if there are no results.", "answer": "Does the actual query return no results? <code>First()</code> will fail if there are no results.", "summary": "<code>First()</code> will fail if there are no results."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Server-side validation won't fire if client-side validation is invalid, the postback is not send. Don't you have some other validation that doesn't pass? The client-side validation is not executed because you specified <code>ClientValidationFunction=\"TextBoxDTownCityClient\"</code> and this will look for a function named <code>TextBoxDTownCityClient</code> as validation function, but the function name should be<code>TextBoxDAddress1Client</code> (as you wrote)", "output": "The client-side validation is not executed because you specified <code>ClientValidationFunction=\"TextBoxDTownCityClient\"</code> and this will look for a function named <code>TextBoxDTownCityClient</code> as validation function, but the function name should be<code>TextBoxDAddress1Client</code>", "answer": "Server-side validation won't fire if client-side validation is invalid, the postback is not send. Don't you have some other validation that doesn't pass? The client-side validation is not executed because you specified <code>ClientValidationFunction=\"TextBoxDTownCityClient\"</code> and this will look for a function named <code>TextBoxDTownCityClient</code> as validation function, but the function name should be<code>TextBoxDAddress1Client</code> (as you wrote)", "summary": "The client-side validation is not executed because you specified <code>ClientValidationFunction=\"TextBoxDTownCityClient\"</code> and this will look for a function named <code>TextBoxDTownCityClient</code> as validation function, but the function name should be<code>TextBoxDAddress1Client</code>"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n In javascript, there are no classes, but I think that you want the constructor name and <code>obj.constructor.toString()</code> will tell you what you need.", "output": "In javascript, there are no classes, but I think that you want the constructor name and <code>obj.constructor.toString()</code> will tell you what you need.", "answer": "In javascript, there are no classes, but I think that you want the constructor name and <code>obj.constructor.toString()</code> will tell you what you need.", "summary": "In javascript, there are no classes, but I think that you want the constructor name and <code>obj.constructor.toString()</code> will tell you what you need."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Always call dispose. It is not worth the risk. Big managed enterprise applications should be treated with respect. No assumptions can be made or else it will come back to bite you. Don't listen to leppie. A lot of objects don't actually implement IDisposable, so you don't have to worry about them. If they genuinely go out of scope they will be freed automatically. Also I have never come across the situation where I have had to set something to null. One thing that can happen is that a lot of objects can be held open. This can greatly increase the memory usage of your application. Sometimes it is hard to work out whether this is actually a memory leak, or whether your application is just doing a lot of stuff. Memory profile tools can help with things like that, but it can be tricky. In addition always unsubscribe from events that are not needed. Also be careful with WPF binding and controls. Not a usual situation, but I came across a situation where I had a WPF control that was being bound to an underlying object. The underlying object was large and took up a large amount of memory. The WPF control was being replaced with a new instance, and the old one was still hanging around for some reason. This caused a large memory leak. In hindsite the code was poorly written, but the point is that you want to make sure that things that are not used go out of scope. That one took a long time to find with a memory profiler as it is hard to know what stuff in memory is valid, and what shouldn't be there.", "output": "Always call dispose. A lot of objects don't actually implement IDisposable, so you don't have to worry about them. If they genuinely go out of scope they will be freed automatically. Also I have never come across the situation where I have had to set something to null. In addition always unsubscribe from events that are not needed.", "answer": "Always call dispose. It is not worth the risk. Big managed enterprise applications should be treated with respect. No assumptions can be made or else it will come back to bite you. Don't listen to leppie. A lot of objects don't actually implement IDisposable, so you don't have to worry about them. If they genuinely go out of scope they will be freed automatically. Also I have never come across the situation where I have had to set something to null. One thing that can happen is that a lot of objects can be held open. This can greatly increase the memory usage of your application. Sometimes it is hard to work out whether this is actually a memory leak, or whether your application is just doing a lot of stuff. Memory profile tools can help with things like that, but it can be tricky. In addition always unsubscribe from events that are not needed. Also be careful with WPF binding and controls. Not a usual situation, but I came across a situation where I had a WPF control that was being bound to an underlying object. The underlying object was large and took up a large amount of memory. The WPF control was being replaced with a new instance, and the old one was still hanging around for some reason. This caused a large memory leak. In hindsite the code was poorly written, but the point is that you want to make sure that things that are not used go out of scope. That one took a long time to find with a memory profiler as it is hard to know what stuff in memory is valid, and what shouldn't be there.", "summary": "Always call dispose. A lot of objects don't actually implement IDisposable, so you don't have to worry about them. If they genuinely go out of scope they will be freed automatically. Also I have never come across the situation where I have had to set something to null. In addition always unsubscribe from events that are not needed."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Mutex can be released only by thread that had acquired it, while you can signal semaphore from any other thread (or process), so semaphores are more suitable for some synchronization problems like producer-consumer. On Windows, binary semaphores are more like event objects than mutexes.", "output": "Mutex can be released only by thread that had acquired it, while you can signal semaphore from any other thread (or process), so semaphores are more suitable for some synchronization problems like producer-consumer.", "answer": "Mutex can be released only by thread that had acquired it, while you can signal semaphore from any other thread (or process), so semaphores are more suitable for some synchronization problems like producer-consumer. On Windows, binary semaphores are more like event objects than mutexes.", "summary": "Mutex can be released only by thread that had acquired it, while you can signal semaphore from any other thread (or process), so semaphores are more suitable for some synchronization problems like producer-consumer."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n im using following module: Tested with windows and linux (and doesnt require additional modules for those) intended for use on systems which are in a single IPv4 based LAN. The fixed list of interface names does not work for recent linux versions, which have adopted the systemd v197 change regarding predictable interface names as pointed out by Alexander. In such cases, you need to manually replace the list with the interface names on your system, or use another solution like netifaces.", "output": "im using following module:", "answer": "im using following module: Tested with windows and linux (and doesnt require additional modules for those) intended for use on systems which are in a single IPv4 based LAN. The fixed list of interface names does not work for recent linux versions, which have adopted the systemd v197 change regarding predictable interface names as pointed out by Alexander. In such cases, you need to manually replace the list with the interface names on your system, or use another solution like netifaces.", "summary": "im using following module:"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Since rows already exist in the table, the <code>ALTER</code> statement is trying to insert <code>NULL</code> into the newly created column for all of the existing rows. You would have to add the column as allowing <code>NULL</code>, then fill the column with the values you want, and then set it to <code>NOT NULL</code> afterwards.", "output": "You would have to add the column as allowing <code>NULL</code>, then fill the column with the values you want, and then set it to <code>NOT NULL</code> afterwards.", "answer": "Since rows already exist in the table, the <code>ALTER</code> statement is trying to insert <code>NULL</code> into the newly created column for all of the existing rows. You would have to add the column as allowing <code>NULL</code>, then fill the column with the values you want, and then set it to <code>NOT NULL</code> afterwards.", "summary": "You would have to add the column as allowing <code>NULL</code>, then fill the column with the values you want, and then set it to <code>NOT NULL</code> afterwards."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Even later response, but I just ran into a similar issue and ended up writing my own Image link HtmlHelper extension. You can find an implementation of it on my blog in the link above. Just added in case someone is hunting down an implementation.", "output": "Even later response, but I just ran into a similar issue and ended up writing my own Image link HtmlHelper extension.", "answer": "Even later response, but I just ran into a similar issue and ended up writing my own Image link HtmlHelper extension. You can find an implementation of it on my blog in the link above. Just added in case someone is hunting down an implementation.", "summary": "Even later response, but I just ran into a similar issue and ended up writing my own Image link HtmlHelper extension."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n When you write code using singletons, say, a logger or a database connection, and afterwards you discover you need more than one log or more than one database, you__e in trouble. Singletons make it very hard to move from them to regular objects. Also, it__ too easy to write a non-thread-safe singleton. Rather than using singletons, you should pass all the needed utility objects from function to function. That can be simplified if you wrap all them into a helper object, like this:", "output": "Singletons make it very hard to move from them to regular objects. Also, it__ too easy to write a non-thread-safe singleton.", "answer": "When you write code using singletons, say, a logger or a database connection, and afterwards you discover you need more than one log or more than one database, you__e in trouble. Singletons make it very hard to move from them to regular objects. Also, it__ too easy to write a non-thread-safe singleton. Rather than using singletons, you should pass all the needed utility objects from function to function. That can be simplified if you wrap all them into a helper object, like this:", "summary": "Singletons make it very hard to move from them to regular objects. Also, it__ too easy to write a non-thread-safe singleton."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n The sqrt call is not perfectly accurate, as has been mentioned, but it's interesting and instructive that it doesn't blow away the other answers in terms of speed. After all, the sequence of assembly language instructions for a sqrt is tiny. Intel has a hardware instruction, which isn't used by Java I believe because it doesn't conform to IEEE. So why is it slow? Because Java is actually calling a C routine through JNI, and it's actually slower to do so than to call a Java subroutine, which itself is slower than doing it inline. This is very annoying, and Java should have come up with a better solution, ie building in floating point library calls if necessary. Oh well. In C++, I suspect all the complex alternatives would lose on speed, but I haven't checked them all.What I did, and what Java people will find usefull, is a simple hack, an extension of the special case testing suggested by A. Rex. Use a single long value as a bit array, which isn't bounds checked. That way, you have 64 bit boolean lookup. BIGBLOCK The routine isPerfectSquare5 runs in about 1/3 the time on my core2 duo machine. I suspect that further tweaks along the same lines could reduce the time further on average, but every time you check, you are trading off more testing for more eliminating, so you can't go too much farther on that road. Certainly, rather than having a separate test for negative, you could check the high 6 bits the same way. Note that all I'm doing is eliminating possible squares, but when I have a potential case I have to call the original, inlined isPerfectSquare. The init2 routine is called once to initialize the static values of pp1 and pp2.Note that in my implementation in C++, I'm using unsigned long long, so since you're signed, you'd have to use the >>> operator. There is no intrinsic need to bounds check the array, but Java's optimizer has to figure this stuff out pretty quickly, so I don't blame them for that.", "output": "The sqrt call is not perfectly accurate, as has been mentioned, but it's interesting and instructive that it doesn't blow away the other answers in terms of speed. So why is it slow? Because Java is actually calling a C routine through JNI, and it's actually slower to do so than to call a Java subroutine, which itself is slower than doing it inline. In C++, I suspect all the complex alternatives would lose on speed, but I haven't checked them all.What I did, and what Java people will find usefull, is a simple hack, an extension of the special case testing suggested by A. Rex.", "answer": "The sqrt call is not perfectly accurate, as has been mentioned, but it's interesting and instructive that it doesn't blow away the other answers in terms of speed. After all, the sequence of assembly language instructions for a sqrt is tiny. Intel has a hardware instruction, which isn't used by Java I believe because it doesn't conform to IEEE. So why is it slow? Because Java is actually calling a C routine through JNI, and it's actually slower to do so than to call a Java subroutine, which itself is slower than doing it inline. This is very annoying, and Java should have come up with a better solution, ie building in floating point library calls if necessary. Oh well. In C++, I suspect all the complex alternatives would lose on speed, but I haven't checked them all.What I did, and what Java people will find usefull, is a simple hack, an extension of the special case testing suggested by A. Rex. Use a single long value as a bit array, which isn't bounds checked. That way, you have 64 bit boolean lookup. BIGBLOCK The routine isPerfectSquare5 runs in about 1/3 the time on my core2 duo machine. I suspect that further tweaks along the same lines could reduce the time further on average, but every time you check, you are trading off more testing for more eliminating, so you can't go too much farther on that road. Certainly, rather than having a separate test for negative, you could check the high 6 bits the same way. Note that all I'm doing is eliminating possible squares, but when I have a potential case I have to call the original, inlined isPerfectSquare. The init2 routine is called once to initialize the static values of pp1 and pp2.Note that in my implementation in C++, I'm using unsigned long long, so since you're signed, you'd have to use the >>> operator. There is no intrinsic need to bounds check the array, but Java's optimizer has to figure this stuff out pretty quickly, so I don't blame them for that.", "summary": "The sqrt call is not perfectly accurate, as has been mentioned, but it's interesting and instructive that it doesn't blow away the other answers in terms of speed. So why is it slow? Because Java is actually calling a C routine through JNI, and it's actually slower to do so than to call a Java subroutine, which itself is slower than doing it inline. In C++, I suspect all the complex alternatives would lose on speed, but I haven't checked them all.What I did, and what Java people will find usefull, is a simple hack, an extension of the special case testing suggested by A. Rex."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n The standard is to throw the NullPointerException. The generally infallible \"Effective Java\" discusses this briefly in Item 42 (first edition), Item 60 (second edition), or Item 72 (third edition) \"Favor the use of standard exceptions\": \"Arguably, all erroneous method   invocations boil down to an illegal   argument or illegal state, but other   exceptions are standardly used for   certain kinds of illegal arguments and   states. If a caller passes null in   some parameter for which null values   are prohibited, convention dictates   that NullPointerException be thrown   rather than IllegalArgumentException.\"", "output": "The standard is to throw the NullPointerException.", "answer": "The standard is to throw the NullPointerException. The generally infallible \"Effective Java\" discusses this briefly in Item 42 (first edition), Item 60 (second edition), or Item 72 (third edition) \"Favor the use of standard exceptions\": \"Arguably, all erroneous method   invocations boil down to an illegal   argument or illegal state, but other   exceptions are standardly used for   certain kinds of illegal arguments and   states. If a caller passes null in   some parameter for which null values   are prohibited, convention dictates   that NullPointerException be thrown   rather than IllegalArgumentException.\"", "summary": "The standard is to throw the NullPointerException."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n This is how I do it, which is nice for its simplicity/brevity, but if you're doing a lot in the loop body <code>obj.Value</code>, it is going to get old pretty fast.", "output": "This is how I do it, which is nice for its simplicity/brevity, but if you're doing a lot in the loop body <code>obj.Value</code>, it is going to get old pretty fast.", "answer": "This is how I do it, which is nice for its simplicity/brevity, but if you're doing a lot in the loop body <code>obj.Value</code>, it is going to get old pretty fast.", "summary": "This is how I do it, which is nice for its simplicity/brevity, but if you're doing a lot in the loop body <code>obj.Value</code>, it is going to get old pretty fast."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n While setting up log4j properly is great for \"real\" projects you might want a quick-and-dirty solution, e.g. if you're just testing a new library. If so a call to the static method will setup basic logging to the console, and the error messages will be gone.", "output": "If so a call to the static method will setup basic logging to the console, and the error messages will be gone.", "answer": "While setting up log4j properly is great for \"real\" projects you might want a quick-and-dirty solution, e.g. if you're just testing a new library. If so a call to the static method will setup basic logging to the console, and the error messages will be gone.", "summary": "If so a call to the static method will setup basic logging to the console, and the error messages will be gone."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n If you want to disable client side validation for a form in HTML5 add a novalidate attribute to the form element. Ex: BIGBLOCK See https://www.w3.org/TR/html5/sec-forms.html#element-attrdef-form-novalidate", "output": "If you want to disable client side validation for a form in HTML5 add a novalidate attribute to the form element. See https://www.w3.org/TR/html5/sec-forms.html#element-attrdef-form-novalidate", "answer": "If you want to disable client side validation for a form in HTML5 add a novalidate attribute to the form element. Ex: BIGBLOCK See https://www.w3.org/TR/html5/sec-forms.html#element-attrdef-form-novalidate", "summary": "If you want to disable client side validation for a form in HTML5 add a novalidate attribute to the form element. See https://www.w3.org/TR/html5/sec-forms.html#element-attrdef-form-novalidate"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n The answer may depend on the target OS. For example, at least one RTOS implementation I'm familiar with will allow multiple sequential \"get\" operations against a single OS mutex, so long as they're all from within the same thread context. The multiple gets must be replaced by an equal number of puts before another thread will be allowed to get the mutex. This differs from binary semaphores, for which only a single get is allowed at a time, regardless of thread contexts. The idea behind this type of mutex is that you protect an object by only allowing a single context to modify the data at a time. Even if the thread gets the mutex and then calls a function that further modifies the object (and gets/puts the protector mutex around its own operations), the operations should still be safe because they're all happening under a single thread. Of course, when using this feature, you must be certain that all accesses within a single thread really are safe! I'm not sure how common this approach is, or whether it applies outside of the systems with which I'm familiar. For an example of this kind of mutex, see the ThreadX RTOS.", "output": "The multiple gets must be replaced by an equal number of puts before another thread will be allowed to get the mutex. This differs from binary semaphores, for which only a single get is allowed at a time, regardless of thread contexts.", "answer": "The answer may depend on the target OS. For example, at least one RTOS implementation I'm familiar with will allow multiple sequential \"get\" operations against a single OS mutex, so long as they're all from within the same thread context. The multiple gets must be replaced by an equal number of puts before another thread will be allowed to get the mutex. This differs from binary semaphores, for which only a single get is allowed at a time, regardless of thread contexts. The idea behind this type of mutex is that you protect an object by only allowing a single context to modify the data at a time. Even if the thread gets the mutex and then calls a function that further modifies the object (and gets/puts the protector mutex around its own operations), the operations should still be safe because they're all happening under a single thread. Of course, when using this feature, you must be certain that all accesses within a single thread really are safe! I'm not sure how common this approach is, or whether it applies outside of the systems with which I'm familiar. For an example of this kind of mutex, see the ThreadX RTOS.", "summary": "The multiple gets must be replaced by an equal number of puts before another thread will be allowed to get the mutex. This differs from binary semaphores, for which only a single get is allowed at a time, regardless of thread contexts."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n <strong>Answer in one line:</strong> or even shorter starting with Python 3.6 using <code>random.choices()</code>: <strong>A cryptographically more secure version; see https://stackoverflow.com/a/23728630/2213647:</strong> <strong>In details, with a clean function for further reuse:</strong> <strong>How does it work ?</strong> We import <code>string</code>, a module that contains sequences of common ASCII characters, and <code>random</code>, a module that deals with random generation. <code>string.ascii_uppercase + string.digits</code> just concatenates the list of characters representing uppercase ASCII chars and digits: Then we use a list comprehension to create a list of 'n' elements: In the example above, we use <code>[</code> to create the list, but we don't in the <code>id_generator</code> function so Python doesn't create the list in memory, but generates the elements on the fly, one by one (more about this here). Instead of asking to create 'n' times the string <code>elem</code>, we will ask Python to create 'n' times a random character, picked from a sequence of characters: Therefore <code>random.choice(chars) for _ in range(size)</code> really is creating a sequence of <code>size</code> characters. Characters that are randomly picked from <code>chars</code>: Then we just join them with an empty string so the sequence becomes a string:", "output": "<strong>Answer in one line:</strong> or even shorter starting with Python 3.6 using <code>random.choices()</code>: <strong>A cryptographically more secure version; see https://stackoverflow.com/a/23728630/2213647:</strong> In the example above, we use <code>[</code> to create the list, but we don't in the <code>id_generator</code> function so Python doesn't create the list in memory, but generates the elements on the fly, one by one (more about this here). Therefore <code>random.choice(chars) for _ in range(size)</code> really is creating a sequence of <code>size</code> characters.", "answer": "<strong>Answer in one line:</strong> or even shorter starting with Python 3.6 using <code>random.choices()</code>: <strong>A cryptographically more secure version; see https://stackoverflow.com/a/23728630/2213647:</strong> <strong>In details, with a clean function for further reuse:</strong> <strong>How does it work ?</strong> We import <code>string</code>, a module that contains sequences of common ASCII characters, and <code>random</code>, a module that deals with random generation. <code>string.ascii_uppercase + string.digits</code> just concatenates the list of characters representing uppercase ASCII chars and digits: Then we use a list comprehension to create a list of 'n' elements: In the example above, we use <code>[</code> to create the list, but we don't in the <code>id_generator</code> function so Python doesn't create the list in memory, but generates the elements on the fly, one by one (more about this here). Instead of asking to create 'n' times the string <code>elem</code>, we will ask Python to create 'n' times a random character, picked from a sequence of characters: Therefore <code>random.choice(chars) for _ in range(size)</code> really is creating a sequence of <code>size</code> characters. Characters that are randomly picked from <code>chars</code>: Then we just join them with an empty string so the sequence becomes a string:", "summary": "<strong>Answer in one line:</strong> or even shorter starting with Python 3.6 using <code>random.choices()</code>: <strong>A cryptographically more secure version; see https://stackoverflow.com/a/23728630/2213647:</strong> In the example above, we use <code>[</code> to create the list, but we don't in the <code>id_generator</code> function so Python doesn't create the list in memory, but generates the elements on the fly, one by one (more about this here). Therefore <code>random.choice(chars) for _ in range(size)</code> really is creating a sequence of <code>size</code> characters."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n <code>@staticmethod</code> just disables the default function as method descriptor. classmethod wraps your function in a container callable that passes a reference to the owning class as first argument: As a matter of fact, <code>classmethod</code> has a runtime overhead but makes it possible to access the owning class. Alternatively I recommend using a metaclass and putting the class methods on that metaclass:", "output": "<code>@staticmethod</code> just disables the default function as method descriptor. Alternatively I recommend using a metaclass and putting the class methods on that metaclass:", "answer": "<code>@staticmethod</code> just disables the default function as method descriptor. classmethod wraps your function in a container callable that passes a reference to the owning class as first argument: As a matter of fact, <code>classmethod</code> has a runtime overhead but makes it possible to access the owning class. Alternatively I recommend using a metaclass and putting the class methods on that metaclass:", "summary": "<code>@staticmethod</code> just disables the default function as method descriptor. Alternatively I recommend using a metaclass and putting the class methods on that metaclass:"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Inversion of control is a pattern used for decoupling components and layers in the system. The pattern is implemented through injecting dependencies into a component when it is constructed. These dependences are usually provided as interfaces for further decoupling and to support testability. IoC / DI containers such as Castle Windsor, Unity are tools (libraries) which can be used for providing IoC. These tools provide extended features above and beyond simple dependency management, including lifetime, AOP / Interception, policy, etc. a. Alleviates a component from being responsible for managing it's dependencies. b. Provides the ability to swap dependency implementations in different environments. c. Allows a component be tested through mocking of dependencies. d. Provides a mechanism for sharing resources throughout an application. a. Critical when doing test-driven development. Without IoC it can be difficult to test, because the components under test are highly coupled to the rest of the system. b. Critical when developing modular systems. A modular system is a system whose components can be replaced without requiring recompilation. c. Critical if there are many cross-cutting concerns which need to addressed, partilarly in an enterprise application.", "output": "Inversion of control is a pattern used for decoupling components and layers in the system. a. Alleviates a component from being responsible for managing it's dependencies. b. Provides the ability to swap dependency implementations in different environments. c. Allows a component be tested through mocking of dependencies. d. Provides a mechanism for sharing resources throughout an application. a. Critical when doing test-driven development. b. Critical when developing modular systems. c. Critical if there are many cross-cutting concerns which need to addressed, partilarly in an enterprise application.", "answer": "Inversion of control is a pattern used for decoupling components and layers in the system. The pattern is implemented through injecting dependencies into a component when it is constructed. These dependences are usually provided as interfaces for further decoupling and to support testability. IoC / DI containers such as Castle Windsor, Unity are tools (libraries) which can be used for providing IoC. These tools provide extended features above and beyond simple dependency management, including lifetime, AOP / Interception, policy, etc. a. Alleviates a component from being responsible for managing it's dependencies. b. Provides the ability to swap dependency implementations in different environments. c. Allows a component be tested through mocking of dependencies. d. Provides a mechanism for sharing resources throughout an application. a. Critical when doing test-driven development. Without IoC it can be difficult to test, because the components under test are highly coupled to the rest of the system. b. Critical when developing modular systems. A modular system is a system whose components can be replaced without requiring recompilation. c. Critical if there are many cross-cutting concerns which need to addressed, partilarly in an enterprise application.", "summary": "Inversion of control is a pattern used for decoupling components and layers in the system. a. Alleviates a component from being responsible for managing it's dependencies. b. Provides the ability to swap dependency implementations in different environments. c. Allows a component be tested through mocking of dependencies. d. Provides a mechanism for sharing resources throughout an application. a. Critical when doing test-driven development. b. Critical when developing modular systems. c. Critical if there are many cross-cutting concerns which need to addressed, partilarly in an enterprise application."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Lambdas are deeply linked to functional programming style in general. The idea that you can solve problems by applying a function to some data, and merging the results, is what google uses to implement most of its algorithms. Programs written in functional programming style, are easily parallelized  and hence are becoming more and more important with modern multi-core machines. So in short, NO you should not forget them.", "output": "Lambdas are deeply linked to functional programming style in general. Programs written in functional programming style, are easily parallelized  and hence are becoming more and more important with modern multi-core machines.", "answer": "Lambdas are deeply linked to functional programming style in general. The idea that you can solve problems by applying a function to some data, and merging the results, is what google uses to implement most of its algorithms. Programs written in functional programming style, are easily parallelized  and hence are becoming more and more important with modern multi-core machines. So in short, NO you should not forget them.", "summary": "Lambdas are deeply linked to functional programming style in general. Programs written in functional programming style, are easily parallelized  and hence are becoming more and more important with modern multi-core machines."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n XKCD Comic 303 - \"Compiling\" ('Are you stealing those LCDs?' 'Yeah, but I'm doing it while my code compiles') I have this one pinned to the wall facing the entrance to our office :)", "output": "XKCD Comic 303 - \"Compiling\"", "answer": "XKCD Comic 303 - \"Compiling\" ('Are you stealing those LCDs?' 'Yeah, but I'm doing it while my code compiles') I have this one pinned to the wall facing the entrance to our office :)", "summary": "XKCD Comic 303 - \"Compiling\""}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n The reason you are getting the the IOException is because you are not catching the IOException of your countLines method. You'll want to do something like this:", "output": "The reason you are getting the the IOException is because you are not catching the IOException of your countLines method. You'll want to do something like this:", "answer": "The reason you are getting the the IOException is because you are not catching the IOException of your countLines method. You'll want to do something like this:", "summary": "The reason you are getting the the IOException is because you are not catching the IOException of your countLines method. You'll want to do something like this:"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n The method you are trying to call is an instance-level method; you do not have an instance. <code>static</code> methods belong to the class, non-<code>static</code> methods belong to instances of the class.", "output": "The method you are trying to call is an instance-level method; you do not have an instance. <code>static</code> methods belong to the class, non-<code>static</code> methods belong to instances of the class.", "answer": "The method you are trying to call is an instance-level method; you do not have an instance. <code>static</code> methods belong to the class, non-<code>static</code> methods belong to instances of the class.", "summary": "The method you are trying to call is an instance-level method; you do not have an instance. <code>static</code> methods belong to the class, non-<code>static</code> methods belong to instances of the class."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Consider to use <code>jquery</code>'s <code>each</code> method, since it allows to return false inside callback function: Lodash libraries also provides <code>takeWhile</code> method that can be chained with map/reduce/fold etc:", "output": "Consider to use <code>jquery</code>'s <code>each</code> method, since it allows to return false inside callback function:", "answer": "Consider to use <code>jquery</code>'s <code>each</code> method, since it allows to return false inside callback function: Lodash libraries also provides <code>takeWhile</code> method that can be chained with map/reduce/fold etc:", "summary": "Consider to use <code>jquery</code>'s <code>each</code> method, since it allows to return false inside callback function:"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Short Answer Use <code>$this</code> to refer to the current  object. Use <code>self</code> to refer to the  current class. In other words, use  <code>$this-&gt;member</code> for non-static members,  use <code>self::$member</code> for static members. Full Answer Here is an example of <strong>correct</strong> usage of <code>$this</code> and <code>self</code> for non-static and static member variables: Here is an example of <strong>incorrect</strong> usage of <code>$this</code> and <code>self</code> for non-static and static member variables: Here is an example of <strong>polymorphism</strong> with <code>$this</code> for member functions: Here is an example of <strong>suppressing polymorphic behaviour</strong> by using <code>self</code> for member functions: The idea is that <code>$this-&gt;foo()</code> calls the <code>foo()</code> member function of whatever >is the exact type of the current object. If the object is of <code>type X</code>, it thus >calls <code>X::foo()</code>. If the object is of <code>type Y</code>, it calls <code>Y::foo()</code>. But with >self::foo(), <code>X::foo()</code> is always called. From http://www.phpbuilder.com/board/showthread.php?t=10354489: By http://board.phpbuilder.com/member.php?145249-laserlight", "output": "Use <code>$this</code> to refer to the current  object. Use <code>self</code> to refer to the  current class. In other words, use  <code>$this-&gt;member</code> for non-static members,  use <code>self::$member</code> for static members.", "answer": "Short Answer Use <code>$this</code> to refer to the current  object. Use <code>self</code> to refer to the  current class. In other words, use  <code>$this-&gt;member</code> for non-static members,  use <code>self::$member</code> for static members. Full Answer Here is an example of <strong>correct</strong> usage of <code>$this</code> and <code>self</code> for non-static and static member variables: Here is an example of <strong>incorrect</strong> usage of <code>$this</code> and <code>self</code> for non-static and static member variables: Here is an example of <strong>polymorphism</strong> with <code>$this</code> for member functions: Here is an example of <strong>suppressing polymorphic behaviour</strong> by using <code>self</code> for member functions: The idea is that <code>$this-&gt;foo()</code> calls the <code>foo()</code> member function of whatever >is the exact type of the current object. If the object is of <code>type X</code>, it thus >calls <code>X::foo()</code>. If the object is of <code>type Y</code>, it calls <code>Y::foo()</code>. But with >self::foo(), <code>X::foo()</code> is always called. From http://www.phpbuilder.com/board/showthread.php?t=10354489: By http://board.phpbuilder.com/member.php?145249-laserlight", "summary": "Use <code>$this</code> to refer to the current  object. Use <code>self</code> to refer to the  current class. In other words, use  <code>$this-&gt;member</code> for non-static members,  use <code>self::$member</code> for static members."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Connection timeouts (assuming a local network and several client machines) typically result from a) some kind of firewall on the way that simply eats the packets without telling the sender things like \"No Route to host\" b) packet loss due to wrong network configuration or line overload c) too many requests overloading the server d) a small number of simultaneously available threads/processes on the server which leads to all of them being taken. This happens especially with requests that take a long time to run and may combine with c). Hope this helps.", "output": "Connection timeouts (assuming a local network and several client machines) typically result from", "answer": "Connection timeouts (assuming a local network and several client machines) typically result from a) some kind of firewall on the way that simply eats the packets without telling the sender things like \"No Route to host\" b) packet loss due to wrong network configuration or line overload c) too many requests overloading the server d) a small number of simultaneously available threads/processes on the server which leads to all of them being taken. This happens especially with requests that take a long time to run and may combine with c). Hope this helps.", "summary": "Connection timeouts (assuming a local network and several client machines) typically result from"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Here is an example using jQuery... BIGBLOCK The jQuery serializeArray function creates a Javascript object with the form values. Then you can use JSON.stringify to convert that into a string, if needed. And you can remove your body onload, too.", "output": "BIGBLOCK The jQuery serializeArray function creates a Javascript object with the form values.", "answer": "Here is an example using jQuery... BIGBLOCK The jQuery serializeArray function creates a Javascript object with the form values. Then you can use JSON.stringify to convert that into a string, if needed. And you can remove your body onload, too.", "summary": "BIGBLOCK The jQuery serializeArray function creates a Javascript object with the form values."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n I am using Idea 8.in your module dependancies tab (in the project structure dialog). Add a \"Module Library\". There you can select a Jar Directory to add. Then make sure the run profile is using the Classpath and JDK of the correct module when it runs (this is in the run config dialog.", "output": "I am using Idea 8.in your module dependancies tab (in the project structure dialog). Add a \"Module Library\". Then make sure the run profile is using the Classpath and JDK of the correct module when it runs (this is in the run config dialog.", "answer": "I am using Idea 8.in your module dependancies tab (in the project structure dialog). Add a \"Module Library\". There you can select a Jar Directory to add. Then make sure the run profile is using the Classpath and JDK of the correct module when it runs (this is in the run config dialog.", "summary": "I am using Idea 8.in your module dependancies tab (in the project structure dialog). Add a \"Module Library\". Then make sure the run profile is using the Classpath and JDK of the correct module when it runs (this is in the run config dialog."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n I think there is no one right way. There are a lot of different ways to iterate, and each has its own niche. <code>each</code> is sufficient for many usages, since I don't often care about the indexes. <code>each_ with _index</code> acts like Hash#each - you get the value and the index. <code>each_index</code> - just the indexes. I don't use this one often. Equivalent to \"length.times\". <code>map</code> is another way to iterate, useful when you want to transform one array into another. <code>select</code> is the iterator to use when you want to choose a subset. <code>inject</code> is useful for generating sums or products, or collecting a single result. It may seem like a lot to remember, but don't worry, you can get by without knowing all of them. But as you start to learn and use the different methods, your code will become cleaner and clearer, and you'll be on your way to Ruby mastery.", "output": "<code>each</code> is sufficient for many usages, since I don't often care about the indexes. <code>each_ with _index</code> acts like Hash#each - you get the value and the index. <code>each_index</code> - just the indexes.", "answer": "I think there is no one right way. There are a lot of different ways to iterate, and each has its own niche. <code>each</code> is sufficient for many usages, since I don't often care about the indexes. <code>each_ with _index</code> acts like Hash#each - you get the value and the index. <code>each_index</code> - just the indexes. I don't use this one often. Equivalent to \"length.times\". <code>map</code> is another way to iterate, useful when you want to transform one array into another. <code>select</code> is the iterator to use when you want to choose a subset. <code>inject</code> is useful for generating sums or products, or collecting a single result. It may seem like a lot to remember, but don't worry, you can get by without knowing all of them. But as you start to learn and use the different methods, your code will become cleaner and clearer, and you'll be on your way to Ruby mastery.", "summary": "<code>each</code> is sufficient for many usages, since I don't often care about the indexes. <code>each_ with _index</code> acts like Hash#each - you get the value and the index. <code>each_index</code> - just the indexes."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Views are essentially logical table-like structures populated on the fly by a given query. The results of a view query are not stored anywhere on disk and the view is recreated every time the query is executed. Materialized views are actual structures stored within the database and written to disk. They are updated based on the parameters defined when they are created.", "output": "Views are essentially logical table-like structures populated on the fly by a given query. Materialized views are actual structures stored within the database and written to disk.", "answer": "Views are essentially logical table-like structures populated on the fly by a given query. The results of a view query are not stored anywhere on disk and the view is recreated every time the query is executed. Materialized views are actual structures stored within the database and written to disk. They are updated based on the parameters defined when they are created.", "summary": "Views are essentially logical table-like structures populated on the fly by a given query. Materialized views are actual structures stored within the database and written to disk."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n I don't know how the wrong solution can be accepted. The correct C# snippet was written by Michael Stum Here is a test snippet: Here you have the methods:", "output": "The correct C# snippet was written by Michael Stum", "answer": "I don't know how the wrong solution can be accepted. The correct C# snippet was written by Michael Stum Here is a test snippet: Here you have the methods:", "summary": "The correct C# snippet was written by Michael Stum"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n You should get rid of the 2-power part of N right from the start. <strong>2nd Edit</strong>The magical expression for m below should be BIGBLOCK and not as written <strong>End of 2nd edit</strong> BIGBLOCK <strong>1st Edit:</strong> Minor improvement: BIGBLOCK <strong>End of 1st edit</strong> Now continue as usual. This way, by the time you get to the floating point part, you already got rid of all the numbers whose 2-power part is odd (about half), and then you only consider 1/8 of whats left. I.e. you run the floating point part on 6% of the numbers.", "output": "You should get rid of the 2-power part of N right from the start. <strong>End of 2nd edit</strong> BIGBLOCK This way, by the time you get to the floating point part, you already got rid of all the numbers whose 2-power part is odd (about half), and then you only consider 1/8 of whats left.", "answer": "You should get rid of the 2-power part of N right from the start. <strong>2nd Edit</strong>The magical expression for m below should be BIGBLOCK and not as written <strong>End of 2nd edit</strong> BIGBLOCK <strong>1st Edit:</strong> Minor improvement: BIGBLOCK <strong>End of 1st edit</strong> Now continue as usual. This way, by the time you get to the floating point part, you already got rid of all the numbers whose 2-power part is odd (about half), and then you only consider 1/8 of whats left. I.e. you run the floating point part on 6% of the numbers.", "summary": "You should get rid of the 2-power part of N right from the start. <strong>End of 2nd edit</strong> BIGBLOCK This way, by the time you get to the floating point part, you already got rid of all the numbers whose 2-power part is odd (about half), and then you only consider 1/8 of whats left."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n The correct pattern is to call the Redirect overload with endResponse=false and make a call to tell the IIS pipeline that it should advance directly to the EndRequest stage once you return control: This blog post from Thomas Marquardt provides additional details, including how to handle the special case of redirecting inside an Application_Error handler.", "output": "The correct pattern is to call the Redirect overload with endResponse=false and make a call to tell the IIS pipeline that it should advance directly to the EndRequest stage once you return control:", "answer": "The correct pattern is to call the Redirect overload with endResponse=false and make a call to tell the IIS pipeline that it should advance directly to the EndRequest stage once you return control: This blog post from Thomas Marquardt provides additional details, including how to handle the special case of redirecting inside an Application_Error handler.", "summary": "The correct pattern is to call the Redirect overload with endResponse=false and make a call to tell the IIS pipeline that it should advance directly to the EndRequest stage once you return control:"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Some things to watch out for: <li>As you mentioned, su will prompt for a password if you are already the target user <li>Similarly, setuid(2) will fail if you are already the target user (on some OSs) <li>setuid(2) does not install privileges or resource controls defined in /etc/limits.conf (Linux) or /etc/user_attr (Solaris) <li>If you go the setgid(2)/setuid(2) route, don't forget to call initgroups(3) -- more on this  here I generally use /sbin/su to switch to the appropriate user before starting daemons.", "output": "<li>As you mentioned, su will prompt for a password if you are already the target user <li>Similarly, setuid(2) will fail if you are already the target user (on some OSs) <li>setuid(2) does not install privileges or resource controls defined in /etc/limits.conf (Linux) or /etc/user_attr (Solaris) <li>If you go the setgid(2)/setuid(2) route, don't forget to call initgroups(3) -- more on this  here I generally use /sbin/su to switch to the appropriate user before starting daemons.", "answer": "Some things to watch out for: <li>As you mentioned, su will prompt for a password if you are already the target user <li>Similarly, setuid(2) will fail if you are already the target user (on some OSs) <li>setuid(2) does not install privileges or resource controls defined in /etc/limits.conf (Linux) or /etc/user_attr (Solaris) <li>If you go the setgid(2)/setuid(2) route, don't forget to call initgroups(3) -- more on this  here I generally use /sbin/su to switch to the appropriate user before starting daemons.", "summary": "<li>As you mentioned, su will prompt for a password if you are already the target user <li>Similarly, setuid(2) will fail if you are already the target user (on some OSs) <li>setuid(2) does not install privileges or resource controls defined in /etc/limits.conf (Linux) or /etc/user_attr (Solaris) <li>If you go the setgid(2)/setuid(2) route, don't forget to call initgroups(3) -- more on this  here I generally use /sbin/su to switch to the appropriate user before starting daemons."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n One little thing, might add clarity to override the default value for seconds BIGBLOCK", "output": "One little thing, might add clarity to override the default value for seconds BIGBLOCK", "answer": "One little thing, might add clarity to override the default value for seconds BIGBLOCK", "summary": "One little thing, might add clarity to override the default value for seconds BIGBLOCK"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n To squabble about the performance of <em>binary-trees</em> is meaningless - they are not a data structure, but a family of data structures, all with different performance characteristics. While it is true that <em>unbalanced binary trees</em> perform much worse than <em>self-balancing binary trees</em> for searching, there are many binary trees <em>(such as binary tries)</em> for which <em>\"balancing\"</em> has no meaning. Applications of binary trees <li>Binary Search Tree - Used in <em>many</em> search applications where data is constantly entering/leaving, such as the <code>map</code> and <code>set</code> objects in many languages' libraries. <li>Binary Space Partition - Used in almost every 3D video game to determine what objects need to be rendered. <li>Binary Tries - Used in almost every high-bandwidth router for storing router-tables. <li>Hash Trees - used in p2p programs and specialized image-signatures in which a hash needs to be verified, but the whole file is not available. <li>Heaps - Used in implementing efficient priority-queues, which in turn are used for scheduling processes in many operating systems, Quality-of-Service in routers, and A* <em>(path-finding algorithm used in AI applications, including robotics and video games)</em>. Also used in heap-sort. <li>Huffman Coding Tree (Chip Uni) - used in compression algorithms, such as those used by the .jpeg and .mp3 file-formats. <li>GGM Trees - Used in cryptographic applications to generate a tree of pseudo-random numbers. <li>Syntax Tree - Constructed by compilers and (implicitly) calculators to parse expressions. <li>Treap - Randomized data structure used in wireless networking and memory allocation. <li>T-tree - Though most databases use some form of B-tree to store data on the drive, databases which keep all (most) their data in memory often use T-trees to do so. The reason that binary trees are used more often than n-ary trees for searching is that n-ary trees are more complex, but usually provide no real speed advantage. In a (balanced) binary tree with <code>m</code> nodes, moving from one level to the next requires one comparison, and there are <code>log_2(m)</code> levels, for a total of <code>log_2(m)</code> comparisons. In contrast, an n-ary tree will require <code>log_2(n)</code> comparisons <em>(using a binary search)</em> to move to the next level. Since there are <code>log_n(m)</code> total levels, the search will require <code>log_2(n)*log_n(m)</code> = <code>log_2(m)</code> comparisons total. So, though n-ary trees are more complex, they provide no advantage in terms of total comparisons necessary. <em>(However, n-ary trees are still useful in niche-situations. The examples that come immediately to mind are quad-trees and other space-partitioning trees, where divisioning space using only two nodes per level would make the logic unnecessarily complex; and B-trees used in many databases, where the limiting factor is not how many comparisons are done at each level but how many nodes can be loaded from the hard-drive at once)</em>", "output": "To squabble about the performance of <em>binary-trees</em> is meaningless - they are not a data structure, but a family of data structures, all with different performance characteristics. Applications of binary trees <li>Binary Search Tree - Used in <em>many</em> search applications where data is constantly entering/leaving, such as the <code>map</code> and <code>set</code> objects in many languages' libraries. <li>Binary Space Partition - Used in almost every 3D video game to determine what objects need to be rendered. <li>Binary Tries - Used in almost every high-bandwidth router for storing router-tables. <li>Hash Trees - used in p2p programs and specialized image-signatures in which a hash needs to be verified, but the whole file is not available. <li>Heaps - Used in implementing efficient priority-queues, which in turn are used for scheduling processes in many operating systems, Quality-of-Service in routers, and A* <em>(path-finding algorithm used in AI applications, including robotics and video games)</em>. Also used in heap-sort. <li>Huffman Coding Tree (Chip Uni) - used in compression algorithms, such as those used by the .jpeg and .mp3 file-formats. <li>GGM Trees - Used in cryptographic applications to generate a tree of pseudo-random numbers. <li>Syntax Tree - Constructed by compilers and (implicitly) calculators to parse expressions. <li>Treap - Randomized data structure used in wireless networking and memory allocation. <li>T-tree - Though most databases use some form of B-tree to store data on the drive, databases which keep all (most) their data in memory often use T-trees to do so. In a (balanced) binary tree with <code>m</code> nodes, moving from one level to the next requires one comparison, and there are <code>log_2(m)</code> levels, for a total of <code>log_2(m)</code> comparisons. In contrast, an n-ary tree will require <code>log_2(n)</code> comparisons <em>(using a binary search)</em> to move to the next level.", "answer": "To squabble about the performance of <em>binary-trees</em> is meaningless - they are not a data structure, but a family of data structures, all with different performance characteristics. While it is true that <em>unbalanced binary trees</em> perform much worse than <em>self-balancing binary trees</em> for searching, there are many binary trees <em>(such as binary tries)</em> for which <em>\"balancing\"</em> has no meaning. Applications of binary trees <li>Binary Search Tree - Used in <em>many</em> search applications where data is constantly entering/leaving, such as the <code>map</code> and <code>set</code> objects in many languages' libraries. <li>Binary Space Partition - Used in almost every 3D video game to determine what objects need to be rendered. <li>Binary Tries - Used in almost every high-bandwidth router for storing router-tables. <li>Hash Trees - used in p2p programs and specialized image-signatures in which a hash needs to be verified, but the whole file is not available. <li>Heaps - Used in implementing efficient priority-queues, which in turn are used for scheduling processes in many operating systems, Quality-of-Service in routers, and A* <em>(path-finding algorithm used in AI applications, including robotics and video games)</em>. Also used in heap-sort. <li>Huffman Coding Tree (Chip Uni) - used in compression algorithms, such as those used by the .jpeg and .mp3 file-formats. <li>GGM Trees - Used in cryptographic applications to generate a tree of pseudo-random numbers. <li>Syntax Tree - Constructed by compilers and (implicitly) calculators to parse expressions. <li>Treap - Randomized data structure used in wireless networking and memory allocation. <li>T-tree - Though most databases use some form of B-tree to store data on the drive, databases which keep all (most) their data in memory often use T-trees to do so. The reason that binary trees are used more often than n-ary trees for searching is that n-ary trees are more complex, but usually provide no real speed advantage. In a (balanced) binary tree with <code>m</code> nodes, moving from one level to the next requires one comparison, and there are <code>log_2(m)</code> levels, for a total of <code>log_2(m)</code> comparisons. In contrast, an n-ary tree will require <code>log_2(n)</code> comparisons <em>(using a binary search)</em> to move to the next level. Since there are <code>log_n(m)</code> total levels, the search will require <code>log_2(n)*log_n(m)</code> = <code>log_2(m)</code> comparisons total. So, though n-ary trees are more complex, they provide no advantage in terms of total comparisons necessary. <em>(However, n-ary trees are still useful in niche-situations. The examples that come immediately to mind are quad-trees and other space-partitioning trees, where divisioning space using only two nodes per level would make the logic unnecessarily complex; and B-trees used in many databases, where the limiting factor is not how many comparisons are done at each level but how many nodes can be loaded from the hard-drive at once)</em>", "summary": "To squabble about the performance of <em>binary-trees</em> is meaningless - they are not a data structure, but a family of data structures, all with different performance characteristics. Applications of binary trees <li>Binary Search Tree - Used in <em>many</em> search applications where data is constantly entering/leaving, such as the <code>map</code> and <code>set</code> objects in many languages' libraries. <li>Binary Space Partition - Used in almost every 3D video game to determine what objects need to be rendered. <li>Binary Tries - Used in almost every high-bandwidth router for storing router-tables. <li>Hash Trees - used in p2p programs and specialized image-signatures in which a hash needs to be verified, but the whole file is not available. <li>Heaps - Used in implementing efficient priority-queues, which in turn are used for scheduling processes in many operating systems, Quality-of-Service in routers, and A* <em>(path-finding algorithm used in AI applications, including robotics and video games)</em>. Also used in heap-sort. <li>Huffman Coding Tree (Chip Uni) - used in compression algorithms, such as those used by the .jpeg and .mp3 file-formats. <li>GGM Trees - Used in cryptographic applications to generate a tree of pseudo-random numbers. <li>Syntax Tree - Constructed by compilers and (implicitly) calculators to parse expressions. <li>Treap - Randomized data structure used in wireless networking and memory allocation. <li>T-tree - Though most databases use some form of B-tree to store data on the drive, databases which keep all (most) their data in memory often use T-trees to do so. In a (balanced) binary tree with <code>m</code> nodes, moving from one level to the next requires one comparison, and there are <code>log_2(m)</code> levels, for a total of <code>log_2(m)</code> comparisons. In contrast, an n-ary tree will require <code>log_2(n)</code> comparisons <em>(using a binary search)</em> to move to the next level."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Double boolean negation. Often used to check if value is not undefined.", "output": "Double boolean negation.", "answer": "Double boolean negation. Often used to check if value is not undefined.", "summary": "Double boolean negation."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n I assume you use <code>Graphics.CopyFromScreen</code> to get the screenshot. You can use P/Invoke to GetForegroundWindow (and then get its position and size) to determine which region you need to copy from.", "output": "I assume you use <code>Graphics.CopyFromScreen</code> to get the screenshot. You can use P/Invoke to GetForegroundWindow (and then get its position and size) to determine which region you need to copy from.", "answer": "I assume you use <code>Graphics.CopyFromScreen</code> to get the screenshot. You can use P/Invoke to GetForegroundWindow (and then get its position and size) to determine which region you need to copy from.", "summary": "I assume you use <code>Graphics.CopyFromScreen</code> to get the screenshot. You can use P/Invoke to GetForegroundWindow (and then get its position and size) to determine which region you need to copy from."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n No. Only object references can be null, not primitives.", "output": "Only object references can be null, not primitives.", "answer": "No. Only object references can be null, not primitives.", "summary": "Only object references can be null, not primitives."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Modified question is - What's the difference between A mutex and a \"binary\" semaphore in \"Linux\"? Ans: Following are the differences __________________________ÃÂ¢________________________________ i) Scope __________________________ÃÂ¢________________________________ The scope of mutex is within a process address space which has created it and is used for synchronization of threads. Whereas semaphore can be used across process space and hence it can be used for interprocess synchronization. ii) Mutex is lightweight and faster than semaphore. Futex is even faster. iii) Mutex can be acquired by same thread successfully multiple times with condition that it should release it same number of times. Other thread trying to acquire will block. Whereas in case of semaphore if same process tries to acquire it again it blocks as it can be acquired only once.", "output": "i) Scope __________________________ÃÂ¢________________________________ The scope of mutex is within a process address space which has created it and is used for synchronization of threads. Whereas semaphore can be used across process space and hence it can be used for interprocess synchronization. ii) Mutex is lightweight and faster than semaphore. iii) Mutex can be acquired by same thread successfully multiple times with condition that it should release it same number of times. Whereas in case of semaphore if same process tries to acquire it again it blocks as it can be acquired only once.", "answer": "Modified question is - What's the difference between A mutex and a \"binary\" semaphore in \"Linux\"? Ans: Following are the differences __________________________ÃÂ¢________________________________ i) Scope __________________________ÃÂ¢________________________________ The scope of mutex is within a process address space which has created it and is used for synchronization of threads. Whereas semaphore can be used across process space and hence it can be used for interprocess synchronization. ii) Mutex is lightweight and faster than semaphore. Futex is even faster. iii) Mutex can be acquired by same thread successfully multiple times with condition that it should release it same number of times. Other thread trying to acquire will block. Whereas in case of semaphore if same process tries to acquire it again it blocks as it can be acquired only once.", "summary": "i) Scope __________________________ÃÂ¢________________________________ The scope of mutex is within a process address space which has created it and is used for synchronization of threads. Whereas semaphore can be used across process space and hence it can be used for interprocess synchronization. ii) Mutex is lightweight and faster than semaphore. iii) Mutex can be acquired by same thread successfully multiple times with condition that it should release it same number of times. Whereas in case of semaphore if same process tries to acquire it again it blocks as it can be acquired only once."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n You should be using <code>IllegalArgumentException</code> (IAE), not <code>NullPointerException</code> (NPE) for the following reasons: First, the NPE JavaDoc explicitly lists the cases where NPE is appropriate. Notice that all of them are thrown by the runtime when <code>null</code> is used inappropriately. In contrast, the IAE JavaDoc couldn't be more clear: \"Thrown to indicate that a method has been passed an illegal or inappropriate argument.\" Yup, that's you! Second, when you see an NPE in a stack trace, what do you assume? Probably that someone dereferenced a <code>null</code>. When you see IAE, you assume the caller of the method at the top of the stack passed in an illegal value. Again, the latter assumption is true, the former is misleading. Third, since IAE is clearly designed for validating parameters, you have to assume it as the default choice of exception, so why would you choose NPE instead? Certainly not for different behavior -- do you really expect calling code to catch NPE's separately from IAE and do something different as a result? Are you trying to communicate a more specific error message? But you can do that in the exception message text anyway, as you should for all other incorrect parameters. Fourth, all other incorrect parameter data will be IAE, so why not be consistent? Why is it that an illegal <code>null</code> is so special that it deserves a separate exception from all other types of illegal arguments? Finally, I accept the argument given by other answers that parts of the Java API use NPE in this manner. However, the Java API is inconsistent with everything from exception types to naming conventions, so I think just blindly copying (your favorite part of) the Java API isn't a good enough argument to trump these other considerations.", "output": "You should be using <code>IllegalArgumentException</code> (IAE), not <code>NullPointerException</code> (NPE) for the following reasons:", "answer": "You should be using <code>IllegalArgumentException</code> (IAE), not <code>NullPointerException</code> (NPE) for the following reasons: First, the NPE JavaDoc explicitly lists the cases where NPE is appropriate. Notice that all of them are thrown by the runtime when <code>null</code> is used inappropriately. In contrast, the IAE JavaDoc couldn't be more clear: \"Thrown to indicate that a method has been passed an illegal or inappropriate argument.\" Yup, that's you! Second, when you see an NPE in a stack trace, what do you assume? Probably that someone dereferenced a <code>null</code>. When you see IAE, you assume the caller of the method at the top of the stack passed in an illegal value. Again, the latter assumption is true, the former is misleading. Third, since IAE is clearly designed for validating parameters, you have to assume it as the default choice of exception, so why would you choose NPE instead? Certainly not for different behavior -- do you really expect calling code to catch NPE's separately from IAE and do something different as a result? Are you trying to communicate a more specific error message? But you can do that in the exception message text anyway, as you should for all other incorrect parameters. Fourth, all other incorrect parameter data will be IAE, so why not be consistent? Why is it that an illegal <code>null</code> is so special that it deserves a separate exception from all other types of illegal arguments? Finally, I accept the argument given by other answers that parts of the Java API use NPE in this manner. However, the Java API is inconsistent with everything from exception types to naming conventions, so I think just blindly copying (your favorite part of) the Java API isn't a good enough argument to trump these other considerations.", "summary": "You should be using <code>IllegalArgumentException</code> (IAE), not <code>NullPointerException</code> (NPE) for the following reasons:"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Arrays in C++ cannot change size at runtime. For that purpose, you should use <code>vector&lt;int&gt;</code> instead. BIGBLOCK As mentioned in the comments, <code>vector</code> is defined in <code>vector</code> header and <code>std</code> namespace. To use it, you should: and also, either use <code>std::vector</code> in your code or add BIGBLOCK or BIGBLOCK after the <code>#include &lt;vector&gt;</code> line.", "output": "Arrays in C++ cannot change size at runtime.", "answer": "Arrays in C++ cannot change size at runtime. For that purpose, you should use <code>vector&lt;int&gt;</code> instead. BIGBLOCK As mentioned in the comments, <code>vector</code> is defined in <code>vector</code> header and <code>std</code> namespace. To use it, you should: and also, either use <code>std::vector</code> in your code or add BIGBLOCK or BIGBLOCK after the <code>#include &lt;vector&gt;</code> line.", "summary": "Arrays in C++ cannot change size at runtime."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Microsoft should advertise this functionality of SSMS 2008. The feature you are looking for is built into the Generate Script utility, but the functionality is turned off by default and must be enabled when scripting a table. This is a quick run through to generate the <code>INSERT</code> statements for all of the data in your table, using no scripts or add-ins to SQL Management Studio 2008: Right-click on the database and go to Tasks > Generate Scripts. Select the tables (or objects) that you want to generate the script against. Go to Set scripting options tab and click on the Advanced button. In the General category, go to Type of data to script There are 3 options: Schema Only, Data Only, and Schema and Data. Select the appropriate option and click on OK. You will then get the <code>CREATE TABLE</code> statement and all of the <code>INSERT</code> statements for the data straight out of SSMS.", "output": "This is a quick run through to generate the <code>INSERT</code> statements for all of the data in your table, using no scripts or add-ins to SQL Management Studio 2008:", "answer": "Microsoft should advertise this functionality of SSMS 2008. The feature you are looking for is built into the Generate Script utility, but the functionality is turned off by default and must be enabled when scripting a table. This is a quick run through to generate the <code>INSERT</code> statements for all of the data in your table, using no scripts or add-ins to SQL Management Studio 2008: Right-click on the database and go to Tasks > Generate Scripts. Select the tables (or objects) that you want to generate the script against. Go to Set scripting options tab and click on the Advanced button. In the General category, go to Type of data to script There are 3 options: Schema Only, Data Only, and Schema and Data. Select the appropriate option and click on OK. You will then get the <code>CREATE TABLE</code> statement and all of the <code>INSERT</code> statements for the data straight out of SSMS.", "summary": "This is a quick run through to generate the <code>INSERT</code> statements for all of the data in your table, using no scripts or add-ins to SQL Management Studio 2008:"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Try using: or From the bash manpage under Conditional Expressions:", "output": "Try using: or", "answer": "Try using: or From the bash manpage under Conditional Expressions:", "summary": "Try using: or"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n I think you can use", "output": "I think you can use", "answer": "I think you can use", "summary": "I think you can use"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n This one has burned me many times. <code>Arrays.asList</code> creates an unmodifiable list. From the Javadoc: Returns a fixed-size list backed by the specified array. Create a new list with the same content: This will create a little extra garbage, but you will be able to mutate it.", "output": "<code>Arrays.asList</code> creates an unmodifiable list.", "answer": "This one has burned me many times. <code>Arrays.asList</code> creates an unmodifiable list. From the Javadoc: Returns a fixed-size list backed by the specified array. Create a new list with the same content: This will create a little extra garbage, but you will be able to mutate it.", "summary": "<code>Arrays.asList</code> creates an unmodifiable list."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n I figured out a method that works ~35% faster than your 6bits+Carmack+sqrt code, at least with my CPU (x86) and programming language (C/C++). Your results may vary, especially because I don't know how the Java factor will play out. My approach is threefold: <li>First, filter out obvious answers. This includes negative numbers and looking at the last 4 bits. (I found looking at the last six didn't help.) I also answer yes for 0. (In reading the code below, note that my input is <code>int64 x</code>. )<code>if( x &lt; 0 || (x&2) || ((x & 7) == 5) || ((x & 11) == 8) )    return false;if( x == 0 )    return true;</code> BIGBLOCK <li>Next, check if it's a square modulo 255 = 3 * 5 * 17. Because that's a product of three distinct primes, only about 1/8 of the residues mod 255 are squares. However, in my experience, calling the modulo operator (%) costs more than the benefit one gets, so I use bit tricks involving 255 = 2^8-1 to compute the residue. (For better or worse, I am not using the trick of reading individual bytes out of a word, only bitwise-and and shifts. )<code>int64 y = x;y = (y & 4294967295LL) + (y &gt;&gt; 32); y = (y & 65535) + (y &gt;&gt; 16);y = (y & 255) + ((y &gt;&gt; 8) & 255) + (y &gt;&gt; 16);// At this point, y is between 0 and 511. More code can reduce it farther. BIGBLOCK </code>To actually check if the residue is a square, I look up the answer in a precomputed table.<code>if( bad255[y] )    return false;// However, I just use a table of size 512</code> BIGBLOCK <li>Finally, try to compute the square root using a method similar to Hensel's lemma. (I don't think it's applicable directly, but it works with some modifications.) Before doing that, I divide out all powers of 2 with a binary search:<code>if((x & 4294967295LL) == 0)    x &gt;&gt;= 32;if((x & 65535) == 0)    x &gt;&gt;= 16;if((x & 255) == 0)    x &gt;&gt;= 8;if((x & 15) == 0)    x &gt;&gt;= 4;if((x & 3) == 0)    x &gt;&gt;= 2;</code> BIGBLOCK At this point, for our number to be a square, it must be 1 mod 8.<code>if((x & 7) != 1)    return false;</code> BIGBLOCK The basic structure of Hensel's lemma is the following. (Note: untested code; if it doesn't work, try t=2 or 8. )<code>int64 t = 4, r = 1;t &lt;&lt;= 1; r += ((x - r * r) & t) &gt;&gt; 1;t &lt;&lt;= 1; r += ((x - r * r) & t) &gt;&gt; 1;t &lt;&lt;= 1; r += ((x - r * r) & t) &gt;&gt; 1;// Repeat until t is 2^33 or so. Use a loop if you want.</code> BIGBLOCK The idea is that at each iteration, you add one bit onto r, the \"current\" square root of x; each square root is accurate modulo a larger and larger power of 2, namely t/2. At the end, r and t/2-r will be square roots of x modulo t/2. (Note that if r is a square root of x, then so is -r.  This is true even modulo numbers, but beware, modulo some numbers, things can have even more than 2 square roots; notably, this includes powers of 2.) Because our actual square root is less than 2^32, at that point we can actually just check if r or t/2-r are real square roots. In my actual code, I use the following modified loop:<code>int64 r, t, z;r = start[(x &gt;&gt; 3) & 1023];do {    z = x - r * r;    if( z == 0 )        return true;    if( z &lt; 0 )        return false;    t = z & (-z);    r += (z & t) &gt;&gt; 1;    if( r &gt; (t &gt;&gt; 1) )        r = t - r;} while( t &lt;= (1LL &lt;&lt; 33) );</code> BIGBLOCK The speedup here is obtained in three ways: precomputed start value (equivalent to ~10 iterations of the loop), earlier exit of the loop, and skipping some t values. For the last part, I look at <code>z = r - x * x</code>, and set t to be the largest power of 2 dividing z with a bit trick. This allows me to skip t values that wouldn't have affected the value of r anyway. The precomputed start value in my case picks out the \"smallest positive\" square root modulo 8192. Even if this code doesn't work faster for you, I hope you enjoy some of the ideas it contains. Complete, tested code follows, including the precomputed tables. BIGBLOCK", "output": "I figured out a method that works ~35% faster than your 6bits+Carmack+sqrt code, at least with my CPU (x86) and programming language (C/C++). <li>First, filter out obvious answers. This includes negative numbers and looking at the last 4 bits. <li>Next, check if it's a square modulo 255 = 3 * 5 * 17. Because that's a product of three distinct primes, only about 1/8 of the residues mod 255 are squares. <li>Finally, try to compute the square root using a method similar to Hensel's lemma. Complete, tested code follows, including the precomputed tables. BIGBLOCK", "answer": "I figured out a method that works ~35% faster than your 6bits+Carmack+sqrt code, at least with my CPU (x86) and programming language (C/C++). Your results may vary, especially because I don't know how the Java factor will play out. My approach is threefold: <li>First, filter out obvious answers. This includes negative numbers and looking at the last 4 bits. (I found looking at the last six didn't help.) I also answer yes for 0. (In reading the code below, note that my input is <code>int64 x</code>. )<code>if( x &lt; 0 || (x&2) || ((x & 7) == 5) || ((x & 11) == 8) )    return false;if( x == 0 )    return true;</code> BIGBLOCK <li>Next, check if it's a square modulo 255 = 3 * 5 * 17. Because that's a product of three distinct primes, only about 1/8 of the residues mod 255 are squares. However, in my experience, calling the modulo operator (%) costs more than the benefit one gets, so I use bit tricks involving 255 = 2^8-1 to compute the residue. (For better or worse, I am not using the trick of reading individual bytes out of a word, only bitwise-and and shifts. )<code>int64 y = x;y = (y & 4294967295LL) + (y &gt;&gt; 32); y = (y & 65535) + (y &gt;&gt; 16);y = (y & 255) + ((y &gt;&gt; 8) & 255) + (y &gt;&gt; 16);// At this point, y is between 0 and 511. More code can reduce it farther. BIGBLOCK </code>To actually check if the residue is a square, I look up the answer in a precomputed table.<code>if( bad255[y] )    return false;// However, I just use a table of size 512</code> BIGBLOCK <li>Finally, try to compute the square root using a method similar to Hensel's lemma. (I don't think it's applicable directly, but it works with some modifications.) Before doing that, I divide out all powers of 2 with a binary search:<code>if((x & 4294967295LL) == 0)    x &gt;&gt;= 32;if((x & 65535) == 0)    x &gt;&gt;= 16;if((x & 255) == 0)    x &gt;&gt;= 8;if((x & 15) == 0)    x &gt;&gt;= 4;if((x & 3) == 0)    x &gt;&gt;= 2;</code> BIGBLOCK At this point, for our number to be a square, it must be 1 mod 8.<code>if((x & 7) != 1)    return false;</code> BIGBLOCK The basic structure of Hensel's lemma is the following. (Note: untested code; if it doesn't work, try t=2 or 8. )<code>int64 t = 4, r = 1;t &lt;&lt;= 1; r += ((x - r * r) & t) &gt;&gt; 1;t &lt;&lt;= 1; r += ((x - r * r) & t) &gt;&gt; 1;t &lt;&lt;= 1; r += ((x - r * r) & t) &gt;&gt; 1;// Repeat until t is 2^33 or so. Use a loop if you want.</code> BIGBLOCK The idea is that at each iteration, you add one bit onto r, the \"current\" square root of x; each square root is accurate modulo a larger and larger power of 2, namely t/2. At the end, r and t/2-r will be square roots of x modulo t/2. (Note that if r is a square root of x, then so is -r.  This is true even modulo numbers, but beware, modulo some numbers, things can have even more than 2 square roots; notably, this includes powers of 2.) Because our actual square root is less than 2^32, at that point we can actually just check if r or t/2-r are real square roots. In my actual code, I use the following modified loop:<code>int64 r, t, z;r = start[(x &gt;&gt; 3) & 1023];do {    z = x - r * r;    if( z == 0 )        return true;    if( z &lt; 0 )        return false;    t = z & (-z);    r += (z & t) &gt;&gt; 1;    if( r &gt; (t &gt;&gt; 1) )        r = t - r;} while( t &lt;= (1LL &lt;&lt; 33) );</code> BIGBLOCK The speedup here is obtained in three ways: precomputed start value (equivalent to ~10 iterations of the loop), earlier exit of the loop, and skipping some t values. For the last part, I look at <code>z = r - x * x</code>, and set t to be the largest power of 2 dividing z with a bit trick. This allows me to skip t values that wouldn't have affected the value of r anyway. The precomputed start value in my case picks out the \"smallest positive\" square root modulo 8192. Even if this code doesn't work faster for you, I hope you enjoy some of the ideas it contains. Complete, tested code follows, including the precomputed tables. BIGBLOCK", "summary": "I figured out a method that works ~35% faster than your 6bits+Carmack+sqrt code, at least with my CPU (x86) and programming language (C/C++). <li>First, filter out obvious answers. This includes negative numbers and looking at the last 4 bits. <li>Next, check if it's a square modulo 255 = 3 * 5 * 17. Because that's a product of three distinct primes, only about 1/8 of the residues mod 255 are squares. <li>Finally, try to compute the square root using a method similar to Hensel's lemma. Complete, tested code follows, including the precomputed tables. BIGBLOCK"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n The definitions from the links to the two exceptions above are IllegalArgumentException: Thrown to indicate that a method has been passed an illegal or inappropriate argument. NullPointerException: Thrown when an application attempts to use null in a case where an object is required. The big difference here is the IllegalArgumentException is supposed to be used when checking that an argument to a method is valid. NullPointerException is supposed to be used whenever an object being \"used\" when it is null. I hope that helps put the two in perspective.", "output": "The big difference here is the IllegalArgumentException is supposed to be used when checking that an argument to a method is valid. NullPointerException is supposed to be used whenever an object being \"used\" when it is null.", "answer": "The definitions from the links to the two exceptions above are IllegalArgumentException: Thrown to indicate that a method has been passed an illegal or inappropriate argument. NullPointerException: Thrown when an application attempts to use null in a case where an object is required. The big difference here is the IllegalArgumentException is supposed to be used when checking that an argument to a method is valid. NullPointerException is supposed to be used whenever an object being \"used\" when it is null. I hope that helps put the two in perspective.", "summary": "The big difference here is the IllegalArgumentException is supposed to be used when checking that an argument to a method is valid. NullPointerException is supposed to be used whenever an object being \"used\" when it is null."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n What you ask for should be reasonably straightforward in jQuery- BIGBLOCK The best way that I can think of highlighting inserted text is by wrapping it in a span with a CSS class with <code>background-color</code> set to the color of your choice. On the next insert, you could remove the class from any existing spans (or strip the spans out). However, There are plenty of free WYSIWYG HTML/Rich Text editors available on the market, I'm sure one will fit your needs <li><strong>TinyMCE</strong> - JavaScript WYSIWYG editor <li><strong>Rich Text Editor</strong> - YUI Library <li><strong>10 jQuery and Non-jQuery JavaScript Rich Text Editors</strong>", "output": "The best way that I can think of highlighting inserted text is by wrapping it in a span with a CSS class with <code>background-color</code> set to the color of your choice. On the next insert, you could remove the class from any existing spans (or strip the spans out). <li><strong>TinyMCE</strong> - JavaScript WYSIWYG editor <li><strong>Rich Text Editor</strong> - YUI Library <li><strong>10 jQuery and Non-jQuery JavaScript Rich Text Editors</strong>", "answer": "What you ask for should be reasonably straightforward in jQuery- BIGBLOCK The best way that I can think of highlighting inserted text is by wrapping it in a span with a CSS class with <code>background-color</code> set to the color of your choice. On the next insert, you could remove the class from any existing spans (or strip the spans out). However, There are plenty of free WYSIWYG HTML/Rich Text editors available on the market, I'm sure one will fit your needs <li><strong>TinyMCE</strong> - JavaScript WYSIWYG editor <li><strong>Rich Text Editor</strong> - YUI Library <li><strong>10 jQuery and Non-jQuery JavaScript Rich Text Editors</strong>", "summary": "The best way that I can think of highlighting inserted text is by wrapping it in a span with a CSS class with <code>background-color</code> set to the color of your choice. On the next insert, you could remove the class from any existing spans (or strip the spans out). <li><strong>TinyMCE</strong> - JavaScript WYSIWYG editor <li><strong>Rich Text Editor</strong> - YUI Library <li><strong>10 jQuery and Non-jQuery JavaScript Rich Text Editors</strong>"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n http://dev.mysql.com/doc/refman/5.1/en/alter-table.html This will change the datatype of given column Depending on howmany columns you wish to modify it might be best to generate a script, or use some kind of mysql client GUI", "output": "This will change the datatype of given column", "answer": "http://dev.mysql.com/doc/refman/5.1/en/alter-table.html This will change the datatype of given column Depending on howmany columns you wish to modify it might be best to generate a script, or use some kind of mysql client GUI", "summary": "This will change the datatype of given column"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n This is untested, but something like this should work.", "output": "This is untested, but something like this should work.", "answer": "This is untested, but something like this should work.", "summary": "This is untested, but something like this should work."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n r+ means read/write", "output": "r+ means read/write", "answer": "r+ means read/write", "summary": "r+ means read/write"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n For example, task#1 is to create object. Without IOC concept, task#1 is supposed to be done by Programmer.But With IOC concept, task#1 would be done by container. In short Control gets inverted from Programmer to container. So, it is called as inversion of control. I found one good example here.", "output": "In short Control gets inverted from Programmer to container. So, it is called as inversion of control.", "answer": "For example, task#1 is to create object. Without IOC concept, task#1 is supposed to be done by Programmer.But With IOC concept, task#1 would be done by container. In short Control gets inverted from Programmer to container. So, it is called as inversion of control. I found one good example here.", "summary": "In short Control gets inverted from Programmer to container. So, it is called as inversion of control."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n This should do it:", "output": "This should do it:", "answer": "This should do it:", "summary": "This should do it:"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n POST and GET are two HTTP request methods. GET is usually intended to retrieve some data, and is expected to be idempotent (repeating the query does not have any side-effects) and can only send limited amounts of parameter data to the server. GET requests are often cached by default by some browsers if you are not careful. POST is intended for changing the server state. It carries more data, and repeating the query is allowed (and often expected) to have side-effects such as creating two messages instead of one.", "output": "POST and GET are two HTTP request methods. GET is usually intended to retrieve some data, and is expected to be idempotent (repeating the query does not have any side-effects) and can only send limited amounts of parameter data to the server. GET requests are often cached by default by some browsers if you are not careful. POST is intended for changing the server state.", "answer": "POST and GET are two HTTP request methods. GET is usually intended to retrieve some data, and is expected to be idempotent (repeating the query does not have any side-effects) and can only send limited amounts of parameter data to the server. GET requests are often cached by default by some browsers if you are not careful. POST is intended for changing the server state. It carries more data, and repeating the query is allowed (and often expected) to have side-effects such as creating two messages instead of one.", "summary": "POST and GET are two HTTP request methods. GET is usually intended to retrieve some data, and is expected to be idempotent (repeating the query does not have any side-effects) and can only send limited amounts of parameter data to the server. GET requests are often cached by default by some browsers if you are not careful. POST is intended for changing the server state."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n <code>display:none</code> will hide the element and collapse the space is was taking up, whereas <code>visibility:hidden</code> will hide the element and preserve the elements space. display:none also effects some of the properties available from javascript in older versions of IE and Safari.", "output": "<code>display:none</code> will hide the element and collapse the space is was taking up, whereas <code>visibility:hidden</code> will hide the element and preserve the elements space.", "answer": "<code>display:none</code> will hide the element and collapse the space is was taking up, whereas <code>visibility:hidden</code> will hide the element and preserve the elements space. display:none also effects some of the properties available from javascript in older versions of IE and Safari.", "summary": "<code>display:none</code> will hide the element and collapse the space is was taking up, whereas <code>visibility:hidden</code> will hide the element and preserve the elements space."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Use the body.onload event instead, either via attribute (<code>&lt;body onload=\"myFn()\"&gt; ...</code>) or by binding an event in Javascript. This is extremely common with jQuery:", "output": "Use the body.onload event instead, either via attribute (<code>&lt;body onload=\"myFn()\"&gt; ...</code>) or by binding an event in Javascript.", "answer": "Use the body.onload event instead, either via attribute (<code>&lt;body onload=\"myFn()\"&gt; ...</code>) or by binding an event in Javascript. This is extremely common with jQuery:", "summary": "Use the body.onload event instead, either via attribute (<code>&lt;body onload=\"myFn()\"&gt; ...</code>) or by binding an event in Javascript."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n The <code>final</code> keyword has several usages in Java. It corresponds to both the <code>sealed</code> and <code>readonly</code> keywords in C#, depending on the context in which it is used. Classes To prevent subclassing (inheritance from the defined class): <strong>Java</strong> BIGBLOCK <strong>C#</strong> BIGBLOCK Methods Prevent overriding of a <code>virtual</code> method. <strong>Java</strong> BIGBLOCK <strong>C#</strong> BIGBLOCK As Joachim Sauer points out, a notable difference between the two languages here is that Java by default marks all non-static methods as <code>virtual</code>, whereas C# marks them as <code>sealed</code>. Hence, you only need to use the <code>sealed</code> keyword in C# if you want to stop further overriding of a method that has been explicitly marked <code>virtual</code> in the base class. Variables To only allow a variable to be assigned once: <strong>Java</strong> BIGBLOCK <strong>C#</strong> BIGBLOCK As a side note, the effect of the <code>readonly</code> keyword differs from that of the <code>const</code> keyword in that the <code>readonly</code> expression is evaluated at <em>runtime</em> rather than <em>compile-time</em>, hence allowing arbitrary expressions.", "output": "It corresponds to both the <code>sealed</code> and <code>readonly</code> keywords in C#, depending on the context in which it is used. Classes BIGBLOCK BIGBLOCK Methods BIGBLOCK BIGBLOCK Variables BIGBLOCK BIGBLOCK", "answer": "The <code>final</code> keyword has several usages in Java. It corresponds to both the <code>sealed</code> and <code>readonly</code> keywords in C#, depending on the context in which it is used. Classes To prevent subclassing (inheritance from the defined class): <strong>Java</strong> BIGBLOCK <strong>C#</strong> BIGBLOCK Methods Prevent overriding of a <code>virtual</code> method. <strong>Java</strong> BIGBLOCK <strong>C#</strong> BIGBLOCK As Joachim Sauer points out, a notable difference between the two languages here is that Java by default marks all non-static methods as <code>virtual</code>, whereas C# marks them as <code>sealed</code>. Hence, you only need to use the <code>sealed</code> keyword in C# if you want to stop further overriding of a method that has been explicitly marked <code>virtual</code> in the base class. Variables To only allow a variable to be assigned once: <strong>Java</strong> BIGBLOCK <strong>C#</strong> BIGBLOCK As a side note, the effect of the <code>readonly</code> keyword differs from that of the <code>const</code> keyword in that the <code>readonly</code> expression is evaluated at <em>runtime</em> rather than <em>compile-time</em>, hence allowing arbitrary expressions.", "summary": "It corresponds to both the <code>sealed</code> and <code>readonly</code> keywords in C#, depending on the context in which it is used. Classes BIGBLOCK BIGBLOCK Methods BIGBLOCK BIGBLOCK Variables BIGBLOCK BIGBLOCK"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Hmmm -- since this is handled by the JVM, I delved into the OpenJDK VM source code a little bit, thinking that maybe what's done by OpenJDK mimics what's done by Java 6 and prior. It isn't reassuring that there's a way to do this other than on Windows. On Windows, OpenJDK's <code>get_temp_directory()</code> function makes a Win32 API call to <code>GetTempPath()</code>; this is how on Windows, Java reflects the value of the <code>TMP</code> environment variable. On Linux and Solaris, the same <code>get_temp_directory()</code> functions return a static value of <code>/tmp/</code>. I don't know if the actual JDK6 follows these exact conventions, but by the behavior on each of the listed platforms, it seems like they do.", "output": "It isn't reassuring that there's a way to do this other than on Windows. On Windows, OpenJDK's <code>get_temp_directory()</code> function makes a Win32 API call to <code>GetTempPath()</code>; this is how on Windows, Java reflects the value of the <code>TMP</code> environment variable. On Linux and Solaris, the same <code>get_temp_directory()</code> functions return a static value of <code>/tmp/</code>.", "answer": "Hmmm -- since this is handled by the JVM, I delved into the OpenJDK VM source code a little bit, thinking that maybe what's done by OpenJDK mimics what's done by Java 6 and prior. It isn't reassuring that there's a way to do this other than on Windows. On Windows, OpenJDK's <code>get_temp_directory()</code> function makes a Win32 API call to <code>GetTempPath()</code>; this is how on Windows, Java reflects the value of the <code>TMP</code> environment variable. On Linux and Solaris, the same <code>get_temp_directory()</code> functions return a static value of <code>/tmp/</code>. I don't know if the actual JDK6 follows these exact conventions, but by the behavior on each of the listed platforms, it seems like they do.", "summary": "It isn't reassuring that there's a way to do this other than on Windows. On Windows, OpenJDK's <code>get_temp_directory()</code> function makes a Win32 API call to <code>GetTempPath()</code>; this is how on Windows, Java reflects the value of the <code>TMP</code> environment variable. On Linux and Solaris, the same <code>get_temp_directory()</code> functions return a static value of <code>/tmp/</code>."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n CSS is object oriented. ID says instance, class says class.", "output": "ID says instance, class says class.", "answer": "CSS is object oriented. ID says instance, class says class.", "summary": "ID says instance, class says class."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n What good will it do to override static methods. You cannot call static methods through an instance. BIGBLOCK EDIT : It appears that through an unfortunate oversight in language design, you <strong>can</strong> call static methods through an instance. Generally nobody does that. My bad.", "output": "You cannot call static methods through an instance.", "answer": "What good will it do to override static methods. You cannot call static methods through an instance. BIGBLOCK EDIT : It appears that through an unfortunate oversight in language design, you <strong>can</strong> call static methods through an instance. Generally nobody does that. My bad.", "summary": "You cannot call static methods through an instance."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n They are NOT the same thing. They are used for different purposes! While both types of semaphores have a full/empty state and use the same API, their usage is very different. Mutual Exclusion Semaphores Mutual Exclusion semaphores are used to protect shared resources (data structure, file, etc..). A Mutex semaphore is \"owned\" by the task that takes it. If Task B attempts to semGive a mutex currently held by Task A, Task B's call will return an error and fail. Mutexes always use the following sequence: Here is a simple example: Binary Semaphore Binary Semaphore address a totally different question: Task B is pended waiting for something to happen (a sensor being tripped for example). Sensor Trips and an Interrupt Service Routine runs. It needs to notify a task of the trip. Task B should run and take appropriate actions for the sensor trip. Then go back to waiting. Note that with a binary semaphore, it is OK for B to take the semaphore and A to give it. Again, a binary semaphore is NOT protecting a resource from access. The act of Giving and Taking a semaphore are fundamentally decoupled. It typically makes little sense for the same task to so a give and a take on the same binary semaphore.", "output": "Mutual Exclusion semaphores are used to protect shared resources (data structure, file, etc..). Binary Semaphore address a totally different question:", "answer": "They are NOT the same thing. They are used for different purposes! While both types of semaphores have a full/empty state and use the same API, their usage is very different. Mutual Exclusion Semaphores Mutual Exclusion semaphores are used to protect shared resources (data structure, file, etc..). A Mutex semaphore is \"owned\" by the task that takes it. If Task B attempts to semGive a mutex currently held by Task A, Task B's call will return an error and fail. Mutexes always use the following sequence: Here is a simple example: Binary Semaphore Binary Semaphore address a totally different question: Task B is pended waiting for something to happen (a sensor being tripped for example). Sensor Trips and an Interrupt Service Routine runs. It needs to notify a task of the trip. Task B should run and take appropriate actions for the sensor trip. Then go back to waiting. Note that with a binary semaphore, it is OK for B to take the semaphore and A to give it. Again, a binary semaphore is NOT protecting a resource from access. The act of Giving and Taking a semaphore are fundamentally decoupled. It typically makes little sense for the same task to so a give and a take on the same binary semaphore.", "summary": "Mutual Exclusion semaphores are used to protect shared resources (data structure, file, etc..). Binary Semaphore address a totally different question:"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n You use a self join when a table references data in itself. E.g., an <code>Employee</code> table may have a <code>SupervisorID</code> column that points to the employee that is the boss of the current employee. To query the data and get information for both people in one row, you could self join like this:", "output": "You use a self join when a table references data in itself.", "answer": "You use a self join when a table references data in itself. E.g., an <code>Employee</code> table may have a <code>SupervisorID</code> column that points to the employee that is the boss of the current employee. To query the data and get information for both people in one row, you could self join like this:", "summary": "You use a self join when a table references data in itself."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Private: The private members of a base class can only be accessed by members of that base class . Public: The public members of a base class can be accessed by members of that base class, members of its derived class as well as the members which are outside the base class and derived class. Protected: The protected members of a base class can be accessed by members of base class as well as members of its derived class. In short: <strong>private</strong>:  base <strong>protected</strong>:  base + derived <strong>public</strong>:  base + derived + any other member", "output": "In short: <strong>private</strong>:  base <strong>protected</strong>:  base + derived <strong>public</strong>:  base + derived + any other member", "answer": "Private: The private members of a base class can only be accessed by members of that base class . Public: The public members of a base class can be accessed by members of that base class, members of its derived class as well as the members which are outside the base class and derived class. Protected: The protected members of a base class can be accessed by members of base class as well as members of its derived class. In short: <strong>private</strong>:  base <strong>protected</strong>:  base + derived <strong>public</strong>:  base + derived + any other member", "summary": "In short: <strong>private</strong>:  base <strong>protected</strong>:  base + derived <strong>public</strong>:  base + derived + any other member"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Take a look at this example. This query should work:", "output": "This query should work:", "answer": "Take a look at this example. This query should work:", "summary": "This query should work:"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n I like the jQuery function extension. However, the <em>this</em> refers to the jQuery object not the DOM object. So I've modified it a little to make it even better (can update in multiple textboxes / textareas at once). BIGBLOCK This works really well. You can insert into multiple places at once, like: BIGBLOCK", "output": "BIGBLOCK This works really well. You can insert into multiple places at once, like: BIGBLOCK", "answer": "I like the jQuery function extension. However, the <em>this</em> refers to the jQuery object not the DOM object. So I've modified it a little to make it even better (can update in multiple textboxes / textareas at once). BIGBLOCK This works really well. You can insert into multiple places at once, like: BIGBLOCK", "summary": "BIGBLOCK This works really well. You can insert into multiple places at once, like: BIGBLOCK"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Couldn't agree more with what's being said. Fail early, fail fast. Pretty good Exception mantra. The question about which Exception to throw is mostly a matter of personal taste. In my mind IllegalArgumentException seems more specific than using a NPE since it's telling me that the problem was with an argument I passed to the method and not with a value that may have been generated while performing the method. My 2 Cents", "output": "In my mind IllegalArgumentException seems more specific than using a NPE since it's telling me that the problem was with an argument I passed to the method and not with a value that may have been generated while performing the method.", "answer": "Couldn't agree more with what's being said. Fail early, fail fast. Pretty good Exception mantra. The question about which Exception to throw is mostly a matter of personal taste. In my mind IllegalArgumentException seems more specific than using a NPE since it's telling me that the problem was with an argument I passed to the method and not with a value that may have been generated while performing the method. My 2 Cents", "summary": "In my mind IllegalArgumentException seems more specific than using a NPE since it's telling me that the problem was with an argument I passed to the method and not with a value that may have been generated while performing the method."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n I agree with Cade Roux. This article should get you on the right track: <li>Indexes in SQL Server 2005/2008 Ã©Â?Best Practices, Part 1 <li>Indexes in SQL Server 2005/2008 Ã©Â?Part 2 Ã©Â?Internals One thing to note, clustered indexes should have a unique key (an identity column I would recommend) as the first column. Basically it helps your data insert at the end of the index and not cause lots of disk IO and Page splits. Secondly, if you are creating other indexes on your data and they are constructed cleverly they will be reused. e.g. imagine you search a table on three columns state, county, zip. <li>you sometimes search by state only. <li>you sometimes search by state and county. <li>you frequently search by state, county, zip. Then an index with state, county, zip. will be used in all three of these searches. If you search by zip alone quite a lot then the above index will not be used (by SQL Server anyway) as zip is the third part of that index and the query optimiser will not see that index as helpful. You could then create an index on Zip alone that would be used in this instance. I guess the answer you are looking for is that it depends on your where clauses of your frequently used queries and also your group by's. The article will help a lot. :-)", "output": "This article should get you on the right track: One thing to note, clustered indexes should have a unique key (an identity column I would recommend) as the first column. Secondly, if you are creating other indexes on your data and they are constructed cleverly they will be reused. <li>you sometimes search by state only. <li>you sometimes search by state and county. <li>you frequently search by state, county, zip. If you search by zip alone quite a lot then the above index will not be used (by SQL Server anyway) as zip is the third part of that index and the query optimiser will not see that index as helpful. You could then create an index on Zip alone that would be used in this instance.", "answer": "I agree with Cade Roux. This article should get you on the right track: <li>Indexes in SQL Server 2005/2008 Ã©Â?Best Practices, Part 1 <li>Indexes in SQL Server 2005/2008 Ã©Â?Part 2 Ã©Â?Internals One thing to note, clustered indexes should have a unique key (an identity column I would recommend) as the first column. Basically it helps your data insert at the end of the index and not cause lots of disk IO and Page splits. Secondly, if you are creating other indexes on your data and they are constructed cleverly they will be reused. e.g. imagine you search a table on three columns state, county, zip. <li>you sometimes search by state only. <li>you sometimes search by state and county. <li>you frequently search by state, county, zip. Then an index with state, county, zip. will be used in all three of these searches. If you search by zip alone quite a lot then the above index will not be used (by SQL Server anyway) as zip is the third part of that index and the query optimiser will not see that index as helpful. You could then create an index on Zip alone that would be used in this instance. I guess the answer you are looking for is that it depends on your where clauses of your frequently used queries and also your group by's. The article will help a lot. :-)", "summary": "This article should get you on the right track: One thing to note, clustered indexes should have a unique key (an identity column I would recommend) as the first column. Secondly, if you are creating other indexes on your data and they are constructed cleverly they will be reused. <li>you sometimes search by state only. <li>you sometimes search by state and county. <li>you frequently search by state, county, zip. If you search by zip alone quite a lot then the above index will not be used (by SQL Server anyway) as zip is the third part of that index and the query optimiser will not see that index as helpful. You could then create an index on Zip alone that would be used in this instance."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Have you tried using the DefaultValueAttribute or ShouldSerialize and Reset methods in conjunction with the constructor? I feel like one of these two methods is necessary if you're making a class that might show up on the designer surface or in a property grid.", "output": "Have you tried using the DefaultValueAttribute or ShouldSerialize and Reset methods in conjunction with the constructor?", "answer": "Have you tried using the DefaultValueAttribute or ShouldSerialize and Reset methods in conjunction with the constructor? I feel like one of these two methods is necessary if you're making a class that might show up on the designer surface or in a property grid.", "summary": "Have you tried using the DefaultValueAttribute or ShouldSerialize and Reset methods in conjunction with the constructor?"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Do not attempt to remove any Apple-supplied system Python which are in <code>/System/Library</code> and <code>/usr/bin</code>, as this may break your whole operating system. NOTE: The steps listed below do not affect the Apple-supplied system Python 2.7; they only remove a third-party Python framework, like those installed by python.org installers. The complete list is documented here. Basically, all you need to do is the following: Remove the third-party Python 2.7 framework Remove the Python 2.7 applications directory Remove the symbolic links, in <code>/usr/local/bin</code>, that point to this Python version. See them using and then run the following command to remove all the links: If necessary, edit your shell profile file(s) to remove adding <code>/Library/Frameworks/Python.framework/Versions/2.7</code> to your <code>PATH</code> environment file. Depending on which shell you use, any of the following files may have been modified: <code>~/.bash_login</code>, <code>~/.bash_profile</code>, <code>~/.cshrc</code>, <code>~/.profile</code>, <code>~/.tcshrc</code>, and/or <code>~/.zprofile</code>.", "output": "The complete list is documented here. Basically, all you need to do is the following:", "answer": "Do not attempt to remove any Apple-supplied system Python which are in <code>/System/Library</code> and <code>/usr/bin</code>, as this may break your whole operating system. NOTE: The steps listed below do not affect the Apple-supplied system Python 2.7; they only remove a third-party Python framework, like those installed by python.org installers. The complete list is documented here. Basically, all you need to do is the following: Remove the third-party Python 2.7 framework Remove the Python 2.7 applications directory Remove the symbolic links, in <code>/usr/local/bin</code>, that point to this Python version. See them using and then run the following command to remove all the links: If necessary, edit your shell profile file(s) to remove adding <code>/Library/Frameworks/Python.framework/Versions/2.7</code> to your <code>PATH</code> environment file. Depending on which shell you use, any of the following files may have been modified: <code>~/.bash_login</code>, <code>~/.bash_profile</code>, <code>~/.cshrc</code>, <code>~/.profile</code>, <code>~/.tcshrc</code>, and/or <code>~/.zprofile</code>.", "summary": "The complete list is documented here. Basically, all you need to do is the following:"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n <code>display:none</code> removes the element from the layout flow. <code>visibility:hidden</code> hides it but leaves the space.", "output": "<code>display:none</code> removes the element from the layout flow. <code>visibility:hidden</code> hides it but leaves the space.", "answer": "<code>display:none</code> removes the element from the layout flow. <code>visibility:hidden</code> hides it but leaves the space.", "summary": "<code>display:none</code> removes the element from the layout flow. <code>visibility:hidden</code> hides it but leaves the space."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Ok, I realize that this is a bit late... maybe this alternative wasn't available at the moment of writing the post? Anyway, I've found installing the pos package via Fink (a prerequisite in this case, maybe there is something similar for those who uses MacPorts?) to be the easiest solution. You get two commands: posd - which gives the current directory of the frontmost Finder window (for which you presumably make an alias cdf=cd posd) fdc - which switches the current directory of the frontmost Finder window to the Terminal pwd. This is slightly different from 'open .' which always opens a new finder window. Yes, you have to switch to the Terminal window before writing cdf, but I suppose that's quite cheap comparing to clicking a button in the Finder toolbar. And it works with iTerm as well, you don't have to download a separate Finder toolbar button that opens an iTerm window. This is the same approach as proposed by PCheese, but you don't have to clutter your .bash_profile.", "output": "Anyway, I've found installing the pos package via Fink (a prerequisite in this case, maybe there is something similar for those who uses MacPorts?) to be the easiest solution.", "answer": "Ok, I realize that this is a bit late... maybe this alternative wasn't available at the moment of writing the post? Anyway, I've found installing the pos package via Fink (a prerequisite in this case, maybe there is something similar for those who uses MacPorts?) to be the easiest solution. You get two commands: posd - which gives the current directory of the frontmost Finder window (for which you presumably make an alias cdf=cd posd) fdc - which switches the current directory of the frontmost Finder window to the Terminal pwd. This is slightly different from 'open .' which always opens a new finder window. Yes, you have to switch to the Terminal window before writing cdf, but I suppose that's quite cheap comparing to clicking a button in the Finder toolbar. And it works with iTerm as well, you don't have to download a separate Finder toolbar button that opens an iTerm window. This is the same approach as proposed by PCheese, but you don't have to clutter your .bash_profile.", "summary": "Anyway, I've found installing the pos package via Fink (a prerequisite in this case, maybe there is something similar for those who uses MacPorts?) to be the easiest solution."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n A lambda is part of a very important abstraction mechanism which deals with higher order functions. To get proper understanding of its value, please watch high quality lessons from Abelson and Sussman, and read the book SICP These are relevant issues in modern software business, and becoming ever more popular.", "output": "A lambda is part of a very important abstraction mechanism which deals with higher order functions.", "answer": "A lambda is part of a very important abstraction mechanism which deals with higher order functions. To get proper understanding of its value, please watch high quality lessons from Abelson and Sussman, and read the book SICP These are relevant issues in modern software business, and becoming ever more popular.", "summary": "A lambda is part of a very important abstraction mechanism which deals with higher order functions."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n As far as I know, it doesn't matter which one you use. They're equivalent in the eyes of the compiler. Use whichever one you prefer. I normally use class.", "output": "They're equivalent in the eyes of the compiler. I normally use class.", "answer": "As far as I know, it doesn't matter which one you use. They're equivalent in the eyes of the compiler. Use whichever one you prefer. I normally use class.", "summary": "They're equivalent in the eyes of the compiler. I normally use class."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Read it backwards (as driven by Clockwise/Spiral Rule): <code>int*</code> - pointer to int <code>int const *</code> - pointer to const int <code>int * const</code> - const pointer to int <code>int const * const</code> - const pointer to const int Now the first <code>const</code> can be on either side of the type so: <code>const int *</code> == <code>int const *</code> <code>const int * const</code> == <code>int const * const</code> If you want to go really crazy you can do things like this: <code>int **</code> - pointer to pointer to int <code>int ** const</code> - a const pointer to a pointer to an int <code>int * const *</code> - a pointer to a const pointer to an int <code>int const **</code> - a pointer to a pointer to a const int <code>int * const * const</code> - a const pointer to a const pointer to an int ... And to make sure we are clear on the meaning of const <code>foo</code> is a variable pointer to a constant integer. This lets you change what you point to but not the value that you point to. Most often this is seen with C-style strings where you have a pointer to a <code>const char</code>. You may change which string you point to but you can't change the content of these strings. This is important when the string itself is in the data segment of a program and shouldn't be changed. <code>bar</code> is a constant or fixed pointer to a value that can be changed. This is like a reference without the extra syntactic sugar. Because of this fact, usually you would use a reference where you would use a <code>T* const</code> pointer unless you need to allow <code>NULL</code> pointers.", "output": "<code>int*</code> - pointer to int <code>int const *</code> - pointer to const int <code>int * const</code> - const pointer to int <code>int const * const</code> - const pointer to const int", "answer": "Read it backwards (as driven by Clockwise/Spiral Rule): <code>int*</code> - pointer to int <code>int const *</code> - pointer to const int <code>int * const</code> - const pointer to int <code>int const * const</code> - const pointer to const int Now the first <code>const</code> can be on either side of the type so: <code>const int *</code> == <code>int const *</code> <code>const int * const</code> == <code>int const * const</code> If you want to go really crazy you can do things like this: <code>int **</code> - pointer to pointer to int <code>int ** const</code> - a const pointer to a pointer to an int <code>int * const *</code> - a pointer to a const pointer to an int <code>int const **</code> - a pointer to a pointer to a const int <code>int * const * const</code> - a const pointer to a const pointer to an int ... And to make sure we are clear on the meaning of const <code>foo</code> is a variable pointer to a constant integer. This lets you change what you point to but not the value that you point to. Most often this is seen with C-style strings where you have a pointer to a <code>const char</code>. You may change which string you point to but you can't change the content of these strings. This is important when the string itself is in the data segment of a program and shouldn't be changed. <code>bar</code> is a constant or fixed pointer to a value that can be changed. This is like a reference without the extra syntactic sugar. Because of this fact, usually you would use a reference where you would use a <code>T* const</code> pointer unless you need to allow <code>NULL</code> pointers.", "summary": "<code>int*</code> - pointer to int <code>int const *</code> - pointer to const int <code>int * const</code> - const pointer to int <code>int const * const</code> - const pointer to const int"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n For tables: <code>SHOW TABLE STATUS</code> will list all the tables. Filter using:", "output": "<code>SHOW TABLE STATUS</code> will list all the tables.", "answer": "For tables: <code>SHOW TABLE STATUS</code> will list all the tables. Filter using:", "summary": "<code>SHOW TABLE STATUS</code> will list all the tables."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Ctrl+0 or empty the value and hit enter.", "output": "Ctrl+0 or empty the value and hit enter.", "answer": "Ctrl+0 or empty the value and hit enter.", "summary": "Ctrl+0 or empty the value and hit enter."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n I did discover .NET has a built in way to cast the JSON string into a <code>Dictionary&lt;String, Object&gt;</code> via the <code>System.Web.Script.Serialization.JavaScriptSerializer</code> type in the 3.5 <code>System.Web.Extensions</code> assembly. Use the method <code>DeserializeObject(String)</code>. I stumbled upon this when doing an ajax post (via jquery) of content type 'application/json' to a static .net Page Method and saw that the method (which had a single parameter of type <code>Object</code>) magically received this Dictionary.", "output": "Use the method <code>DeserializeObject(String)</code>.", "answer": "I did discover .NET has a built in way to cast the JSON string into a <code>Dictionary&lt;String, Object&gt;</code> via the <code>System.Web.Script.Serialization.JavaScriptSerializer</code> type in the 3.5 <code>System.Web.Extensions</code> assembly. Use the method <code>DeserializeObject(String)</code>. I stumbled upon this when doing an ajax post (via jquery) of content type 'application/json' to a static .net Page Method and saw that the method (which had a single parameter of type <code>Object</code>) magically received this Dictionary.", "summary": "Use the method <code>DeserializeObject(String)</code>."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Make sure your jar file is not corrupted. If it's corrupted or not able to unzip, this error will occur.", "output": "Make sure your jar file is not corrupted. If it's corrupted or not able to unzip, this error will occur.", "answer": "Make sure your jar file is not corrupted. If it's corrupted or not able to unzip, this error will occur.", "summary": "Make sure your jar file is not corrupted. If it's corrupted or not able to unzip, this error will occur."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Big O describes an upper limit on the growth behaviour of a function, for example the runtime of a program, when inputs become large. Examples: <li>O(n): If I double the input size the runtime doubles <li>O(n2): If the input size doubles the runtime quadruples <li>O(log n): If the input size doubles the runtime increases by one <li>O(2n): If the input size increases by one, the runtime doubles The input size is usually the space in bits needed to represent the input.", "output": "Big O describes an upper limit on the growth behaviour of a function, for example the runtime of a program, when inputs become large. <li>O(n): If I double the input size the runtime doubles <li>O(n2): If the input size doubles the runtime quadruples <li>O(log n): If the input size doubles the runtime increases by one <li>O(2n): If the input size increases by one, the runtime doubles", "answer": "Big O describes an upper limit on the growth behaviour of a function, for example the runtime of a program, when inputs become large. Examples: <li>O(n): If I double the input size the runtime doubles <li>O(n2): If the input size doubles the runtime quadruples <li>O(log n): If the input size doubles the runtime increases by one <li>O(2n): If the input size increases by one, the runtime doubles The input size is usually the space in bits needed to represent the input.", "summary": "Big O describes an upper limit on the growth behaviour of a function, for example the runtime of a program, when inputs become large. <li>O(n): If I double the input size the runtime doubles <li>O(n2): If the input size doubles the runtime quadruples <li>O(log n): If the input size doubles the runtime increases by one <li>O(2n): If the input size increases by one, the runtime doubles"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Assuming ASCII strings:", "output": "Assuming ASCII strings:", "answer": "Assuming ASCII strings:", "summary": "Assuming ASCII strings:"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n List: <code>List</code>s generally allow duplicate objects. <code>List</code>s must be ordered, and are therefore accessible by index. Implementation classes include: <code>ArrayList</code>, <code>LinkedList</code>, <code>Vector</code> Set: <code>Set</code>s  do not allow duplicate objects. Most implementations are unordered, but it is implementation specific. Implementation classes include:  <code>HashSet</code> (unordered),  <code>LinkedHashSet</code> (ordered),  <code>TreeSet</code> (ordered by natural order or by provided comparator)", "output": "<code>List</code>s generally allow duplicate objects. <code>List</code>s must be ordered, and are therefore accessible by index. <code>Set</code>s  do not allow duplicate objects.", "answer": "List: <code>List</code>s generally allow duplicate objects. <code>List</code>s must be ordered, and are therefore accessible by index. Implementation classes include: <code>ArrayList</code>, <code>LinkedList</code>, <code>Vector</code> Set: <code>Set</code>s  do not allow duplicate objects. Most implementations are unordered, but it is implementation specific. Implementation classes include:  <code>HashSet</code> (unordered),  <code>LinkedHashSet</code> (ordered),  <code>TreeSet</code> (ordered by natural order or by provided comparator)", "summary": "<code>List</code>s generally allow duplicate objects. <code>List</code>s must be ordered, and are therefore accessible by index. <code>Set</code>s  do not allow duplicate objects."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n All these work: You should prefer h to f to g. Note that in the least preferable option you need to free the memory explicitly.", "output": "All these work:", "answer": "All these work: You should prefer h to f to g. Note that in the least preferable option you need to free the memory explicitly.", "summary": "All these work:"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n When an object implements <code>IDisposable</code> you should call <code>Dispose</code> (or <code>Close</code>, in some cases, that will call Dispose for you). You normally do not have to set objects to <code>null</code>, because the GC will know that an object will not be used anymore. There is one exception when I set objects to <code>null</code>. When I retrieve a lot of objects (from the database) that I need to work on, and store them in a collection (or array). When the \"work\" is done, I set the object to <code>null</code>, because the GC does not know I'm finished working with it. Example: BIGBLOCK", "output": "You normally do not have to set objects to <code>null</code>, because the GC will know that an object will not be used anymore. There is one exception when I set objects to <code>null</code>. BIGBLOCK", "answer": "When an object implements <code>IDisposable</code> you should call <code>Dispose</code> (or <code>Close</code>, in some cases, that will call Dispose for you). You normally do not have to set objects to <code>null</code>, because the GC will know that an object will not be used anymore. There is one exception when I set objects to <code>null</code>. When I retrieve a lot of objects (from the database) that I need to work on, and store them in a collection (or array). When the \"work\" is done, I set the object to <code>null</code>, because the GC does not know I'm finished working with it. Example: BIGBLOCK", "summary": "You normally do not have to set objects to <code>null</code>, because the GC will know that an object will not be used anymore. There is one exception when I set objects to <code>null</code>. BIGBLOCK"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Try: In Firefox 3.6 it's 2^31 - 1.", "output": "In Firefox 3.6 it's 2^31 - 1.", "answer": "Try: In Firefox 3.6 it's 2^31 - 1.", "summary": "In Firefox 3.6 it's 2^31 - 1."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n From the jQuery documentation: you specify the <strong>asynchronous</strong> option to be <strong>false</strong> to get a synchronous Ajax request. Then your callback can set some data before your mother function proceeds. Here's what your code would look like if changed as suggested:", "output": "From the jQuery documentation: you specify the <strong>asynchronous</strong> option to be <strong>false</strong> to get a synchronous Ajax request.", "answer": "From the jQuery documentation: you specify the <strong>asynchronous</strong> option to be <strong>false</strong> to get a synchronous Ajax request. Then your callback can set some data before your mother function proceeds. Here's what your code would look like if changed as suggested:", "summary": "From the jQuery documentation: you specify the <strong>asynchronous</strong> option to be <strong>false</strong> to get a synchronous Ajax request."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n get the location of your javascript file during run time using jQuery by parsing the DOM for the 'src' attribute that referred it: BIGBLOCK (assuming your javascript file is named 'example.js')", "output": "get the location of your javascript file during run time using jQuery by parsing the DOM for the 'src' attribute that referred it: BIGBLOCK", "answer": "get the location of your javascript file during run time using jQuery by parsing the DOM for the 'src' attribute that referred it: BIGBLOCK (assuming your javascript file is named 'example.js')", "summary": "get the location of your javascript file during run time using jQuery by parsing the DOM for the 'src' attribute that referred it: BIGBLOCK"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Your interpretation sounds pretty good to me... A <strong>library</strong> could be anything that's compiled and self-contained for re-use in other code, there's literally no restriction on its content. A <strong>framework</strong> on the other hand is expected to have a range of facilities for use in some specific arena of application development, just like your example, MVC.", "output": "A <strong>framework</strong> on the other hand is expected to have a range of facilities for use in some specific arena of application development, just like your example, MVC.", "answer": "Your interpretation sounds pretty good to me... A <strong>library</strong> could be anything that's compiled and self-contained for re-use in other code, there's literally no restriction on its content. A <strong>framework</strong> on the other hand is expected to have a range of facilities for use in some specific arena of application development, just like your example, MVC.", "summary": "A <strong>framework</strong> on the other hand is expected to have a range of facilities for use in some specific arena of application development, just like your example, MVC."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n MVP = Model-View-Presenter MVC = Model-View-Controller Both presentation patterns. They separate the dependencies between a Model (think Domain objects), your screen/web page (the View), and how your UI is supposed to behave (Presenter/Controller) They are fairly similar in concept, folks initialize the Presenter/Controller differently depending on taste. A great article on the differences is here. Most notable is that MVC pattern has the Model updating the View.", "output": "MVP = Model-View-Presenter MVC = Model-View-Controller", "answer": "MVP = Model-View-Presenter MVC = Model-View-Controller Both presentation patterns. They separate the dependencies between a Model (think Domain objects), your screen/web page (the View), and how your UI is supposed to behave (Presenter/Controller) They are fairly similar in concept, folks initialize the Presenter/Controller differently depending on taste. A great article on the differences is here. Most notable is that MVC pattern has the Model updating the View.", "summary": "MVP = Model-View-Presenter MVC = Model-View-Controller"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Sounds like the recommended way to do it is to have your server read the Origin header from the client, compare that to the list of domains you would like to allow, and if it matches, echo the value of the <code>Origin</code> header back to the client as the <code>Access-Control-Allow-Origin</code> header in the response. With <code>.htaccess</code> you can do it like this:", "output": "Sounds like the recommended way to do it is to have your server read the Origin header from the client, compare that to the list of domains you would like to allow, and if it matches, echo the value of the <code>Origin</code> header back to the client as the <code>Access-Control-Allow-Origin</code> header in the response.", "answer": "Sounds like the recommended way to do it is to have your server read the Origin header from the client, compare that to the list of domains you would like to allow, and if it matches, echo the value of the <code>Origin</code> header back to the client as the <code>Access-Control-Allow-Origin</code> header in the response. With <code>.htaccess</code> you can do it like this:", "summary": "Sounds like the recommended way to do it is to have your server read the Origin header from the client, compare that to the list of domains you would like to allow, and if it matches, echo the value of the <code>Origin</code> header back to the client as the <code>Access-Control-Allow-Origin</code> header in the response."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n This would delete the remote branch named <code>master</code> as Kent Fredric has pointed out. To list remote-tracking branches: To delete a remote-tracking branch:", "output": "To list remote-tracking branches: To delete a remote-tracking branch:", "answer": "This would delete the remote branch named <code>master</code> as Kent Fredric has pointed out. To list remote-tracking branches: To delete a remote-tracking branch:", "summary": "To list remote-tracking branches: To delete a remote-tracking branch:"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n A <strong>CLASS</strong> should be used for multiple elements that you want the same styling for. An <strong>ID</strong> should be for a unique element. See this tutorial. You should refer to the W3C standards if you want to be a strict conformist, or if you want your pages to be validated to the standards.", "output": "A <strong>CLASS</strong> should be used for multiple elements that you want the same styling for. An <strong>ID</strong> should be for a unique element.", "answer": "A <strong>CLASS</strong> should be used for multiple elements that you want the same styling for. An <strong>ID</strong> should be for a unique element. See this tutorial. You should refer to the W3C standards if you want to be a strict conformist, or if you want your pages to be validated to the standards.", "summary": "A <strong>CLASS</strong> should be used for multiple elements that you want the same styling for. An <strong>ID</strong> should be for a unique element."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n There are quite significant differences when it comes to working with branches (especially short-term ones). It is explained in this article (BranchingExplained) which compares Mercurial with Git.", "output": "There are quite significant differences when it comes to working with branches (especially short-term ones).", "answer": "There are quite significant differences when it comes to working with branches (especially short-term ones). It is explained in this article (BranchingExplained) which compares Mercurial with Git.", "summary": "There are quite significant differences when it comes to working with branches (especially short-term ones)."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Use Control-V to select rectangles of text: go to the first <code>#</code> character, type Ctrl+V, move right once, and then down, up to the end of the comments. Now type <code>x</code>: you're deleting all the <code>#</code> characters followed by one space.", "output": "Use Control-V to select rectangles of text: go to the first <code>#</code> character, type Ctrl+V, move right once, and then down, up to the end of the comments. Now type <code>x</code>: you're deleting all the <code>#</code> characters followed by one space.", "answer": "Use Control-V to select rectangles of text: go to the first <code>#</code> character, type Ctrl+V, move right once, and then down, up to the end of the comments. Now type <code>x</code>: you're deleting all the <code>#</code> characters followed by one space.", "summary": "Use Control-V to select rectangles of text: go to the first <code>#</code> character, type Ctrl+V, move right once, and then down, up to the end of the comments. Now type <code>x</code>: you're deleting all the <code>#</code> characters followed by one space."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n The 'V' of HSV is probably what you're looking for. MATLAB has an rgb2hsv function and the previously cited wikipedia article is full of pseudocode. If an RGB2HSV conversion is not feasible, a less accurate model would be the grayscale version of the image.", "output": "MATLAB has an rgb2hsv function and the previously cited wikipedia article is full of pseudocode.", "answer": "The 'V' of HSV is probably what you're looking for. MATLAB has an rgb2hsv function and the previously cited wikipedia article is full of pseudocode. If an RGB2HSV conversion is not feasible, a less accurate model would be the grayscale version of the image.", "summary": "MATLAB has an rgb2hsv function and the previously cited wikipedia article is full of pseudocode."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n <code>display:none</code> means that the tag in question will not appear on the page at all (although you can still interact with it through the dom). There will be no space allocated for it between the other tags. <code>visibility:hidden</code> means that unlike <code>display:none</code>, the tag is not visible, but space is allocated for it on the page. The tag is rendered, it just isn't seen on the page. For example: Replacing <code>[style-tag-value]</code> with <code>display:none</code> results in: Replacing <code>[style-tag-value]</code> with <code>visibility:hidden</code> results in:", "output": "<code>display:none</code> means that the tag in question will not appear on the page at all (although you can still interact with it through the dom). There will be no space allocated for it between the other tags. <code>visibility:hidden</code> means that unlike <code>display:none</code>, the tag is not visible, but space is allocated for it on the page. The tag is rendered, it just isn't seen on the page.", "answer": "<code>display:none</code> means that the tag in question will not appear on the page at all (although you can still interact with it through the dom). There will be no space allocated for it between the other tags. <code>visibility:hidden</code> means that unlike <code>display:none</code>, the tag is not visible, but space is allocated for it on the page. The tag is rendered, it just isn't seen on the page. For example: Replacing <code>[style-tag-value]</code> with <code>display:none</code> results in: Replacing <code>[style-tag-value]</code> with <code>visibility:hidden</code> results in:", "summary": "<code>display:none</code> means that the tag in question will not appear on the page at all (although you can still interact with it through the dom). There will be no space allocated for it between the other tags. <code>visibility:hidden</code> means that unlike <code>display:none</code>, the tag is not visible, but space is allocated for it on the page. The tag is rendered, it just isn't seen on the page."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n I'd recommend raising the connection timeout time before getting the output stream, like so: Where 1000 is in milliseconds (1000 milliseconds = 1 second).", "output": "I'd recommend raising the connection timeout time before getting the output stream, like so:", "answer": "I'd recommend raising the connection timeout time before getting the output stream, like so: Where 1000 is in milliseconds (1000 milliseconds = 1 second).", "summary": "I'd recommend raising the connection timeout time before getting the output stream, like so:"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Arrays.asList() returns a list that doesn't allow operations affecting its size (note that this is not the same as \"unmodifiable\"). You could do <code>new ArrayList&lt;String&gt;(Arrays.asList(split));</code> to create a real copy, but seeing what you are trying to do, here is an additional suggestion (you have a <code>O(n^2)</code> algorithm right below that). You want to remove <code>list.size() - count</code> (lets call this <code>k</code>) random elements from the list. Just pick as many random elements and swap them to the end <code>k</code> positions of the list, then delete that whole range (e.g. using subList() and clear() on that). That would turn it to a lean and mean <code>O(n)</code> algorithm (<code>O(k)</code> is more precise). Update: As noted below, this algorithm only makes sense if the elements are unordered, e.g. if the List represents a Bag. If, on the other hand, the List has a meaningful order, this algorithm would not preserve it (polygenelubricants' algorithm instead would). Update 2: So in retrospect, a better (linear, maintaining order, but with O(n) random numbers) algorithm would be something like this:", "output": "Arrays.asList() returns a list that doesn't allow operations affecting its size (note that this is not the same as \"unmodifiable\").", "answer": "Arrays.asList() returns a list that doesn't allow operations affecting its size (note that this is not the same as \"unmodifiable\"). You could do <code>new ArrayList&lt;String&gt;(Arrays.asList(split));</code> to create a real copy, but seeing what you are trying to do, here is an additional suggestion (you have a <code>O(n^2)</code> algorithm right below that). You want to remove <code>list.size() - count</code> (lets call this <code>k</code>) random elements from the list. Just pick as many random elements and swap them to the end <code>k</code> positions of the list, then delete that whole range (e.g. using subList() and clear() on that). That would turn it to a lean and mean <code>O(n)</code> algorithm (<code>O(k)</code> is more precise). Update: As noted below, this algorithm only makes sense if the elements are unordered, e.g. if the List represents a Bag. If, on the other hand, the List has a meaningful order, this algorithm would not preserve it (polygenelubricants' algorithm instead would). Update 2: So in retrospect, a better (linear, maintaining order, but with O(n) random numbers) algorithm would be something like this:", "summary": "Arrays.asList() returns a list that doesn't allow operations affecting its size (note that this is not the same as \"unmodifiable\")."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n The accepted practice if to use the IllegalArgumentException( String message ) to declare a parameter to be invalid and give as much detail as possible... So to say that a parameters was found to be null while exception non-null, you would do something like this: You have virtually no reason to implicitly use the \"NullPointerException\". The NullPointerException is an exception thrown by the Java Virtual Machine when you try to execute code on null reference (Like toString()).", "output": "The accepted practice if to use the IllegalArgumentException( String message ) to declare a parameter to be invalid and give as much detail as possible... The NullPointerException is an exception thrown by the Java Virtual Machine when you try to execute code on null reference (Like toString()).", "answer": "The accepted practice if to use the IllegalArgumentException( String message ) to declare a parameter to be invalid and give as much detail as possible... So to say that a parameters was found to be null while exception non-null, you would do something like this: You have virtually no reason to implicitly use the \"NullPointerException\". The NullPointerException is an exception thrown by the Java Virtual Machine when you try to execute code on null reference (Like toString()).", "summary": "The accepted practice if to use the IllegalArgumentException( String message ) to declare a parameter to be invalid and give as much detail as possible... The NullPointerException is an exception thrown by the Java Virtual Machine when you try to execute code on null reference (Like toString())."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n overriding is reserved for instance members to support polymorphic behaviour. static class members do not belong to a particular instance. instead, static members belong to the class and as a result overriding is not supported because subclasses only inherit protected and public instance members and not static members. You may want to define an inerface and research factory and/or strategy design patterns to evaluate an alternate approach.", "output": "overriding is reserved for instance members to support polymorphic behaviour. static class members do not belong to a particular instance. You may want to define an inerface and research factory and/or strategy design patterns to evaluate an alternate approach.", "answer": "overriding is reserved for instance members to support polymorphic behaviour. static class members do not belong to a particular instance. instead, static members belong to the class and as a result overriding is not supported because subclasses only inherit protected and public instance members and not static members. You may want to define an inerface and research factory and/or strategy design patterns to evaluate an alternate approach.", "summary": "overriding is reserved for instance members to support polymorphic behaviour. static class members do not belong to a particular instance. You may want to define an inerface and research factory and/or strategy design patterns to evaluate an alternate approach."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n You should override <code>__repr__</code> or <code>__unicode__</code> methods instead of using message, the args you provide when you construct the exception will be in the <code>args</code> attribute of the exception object.", "output": "You should override <code>__repr__</code> or <code>__unicode__</code> methods instead of using message, the args you provide when you construct the exception will be in the <code>args</code> attribute of the exception object.", "answer": "You should override <code>__repr__</code> or <code>__unicode__</code> methods instead of using message, the args you provide when you construct the exception will be in the <code>args</code> attribute of the exception object.", "summary": "You should override <code>__repr__</code> or <code>__unicode__</code> methods instead of using message, the args you provide when you construct the exception will be in the <code>args</code> attribute of the exception object."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n By registering the class (specifically its CLSID) -- see e.g. here.", "output": "By registering the class (specifically its CLSID) -- see e.g.", "answer": "By registering the class (specifically its CLSID) -- see e.g. here.", "summary": "By registering the class (specifically its CLSID) -- see e.g."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n With <em>zsh</em> you can do this: BIGBLOCK Or you can use AWK: BIGBLOCK", "output": "With <em>zsh</em> you can do this: BIGBLOCK Or you can use AWK: BIGBLOCK", "answer": "With <em>zsh</em> you can do this: BIGBLOCK Or you can use AWK: BIGBLOCK", "summary": "With <em>zsh</em> you can do this: BIGBLOCK Or you can use AWK: BIGBLOCK"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Stan Lippman talked about this here. I thought it was interesting. <em>Summary</em>: Stroustrup originally used <code>class</code> to specify types in templates to avoid introducing a new keyword. Some in the committee worried that this overloading of the keyword led to confusion. Later, the committee introduced a new keyword <code>typename</code> to resolve syntactic ambiguity, and decided to let it also be used to specify template types to reduce confusion, but for backward compatibility, <code>class</code> kept its overloaded meaning.", "output": "<em>Summary</em>: Stroustrup originally used <code>class</code> to specify types in templates to avoid introducing a new keyword.", "answer": "Stan Lippman talked about this here. I thought it was interesting. <em>Summary</em>: Stroustrup originally used <code>class</code> to specify types in templates to avoid introducing a new keyword. Some in the committee worried that this overloading of the keyword led to confusion. Later, the committee introduced a new keyword <code>typename</code> to resolve syntactic ambiguity, and decided to let it also be used to specify template types to reduce confusion, but for backward compatibility, <code>class</code> kept its overloaded meaning.", "summary": "<em>Summary</em>: Stroustrup originally used <code>class</code> to specify types in templates to avoid introducing a new keyword."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n I think the ONLamp introduction to metaclass programming is well written and gives a really good introduction to the topic despite being several years old already. http://www.onlamp.com/pub/a/python/2003/04/17/metaclasses.html (archived at https://web.archive.org/web/20080206005253/http://www.onlamp.com/pub/a/python/2003/04/17/metaclasses.html) In short: A class is a blueprint for the creation of an instance, a metaclass is a blueprint for the creation of a class. It can be easily seen that in Python classes need to be first-class objects too to enable this behavior. I've never written one myself, but I think one of the nicest uses of metaclasses can be seen in the Django framework. The model classes use a metaclass approach to enable a declarative style of writing new models or form classes. While the metaclass is creating the class, all members get the possibility to customize the class itself. <li>Creating a new model <li>The metaclass enabling this The thing that's left to say is: If you don't know what metaclasses are, the probability that you <strong>will not need them</strong> is 99%.", "output": "In short: A class is a blueprint for the creation of an instance, a metaclass is a blueprint for the creation of a class.", "answer": "I think the ONLamp introduction to metaclass programming is well written and gives a really good introduction to the topic despite being several years old already. http://www.onlamp.com/pub/a/python/2003/04/17/metaclasses.html (archived at https://web.archive.org/web/20080206005253/http://www.onlamp.com/pub/a/python/2003/04/17/metaclasses.html) In short: A class is a blueprint for the creation of an instance, a metaclass is a blueprint for the creation of a class. It can be easily seen that in Python classes need to be first-class objects too to enable this behavior. I've never written one myself, but I think one of the nicest uses of metaclasses can be seen in the Django framework. The model classes use a metaclass approach to enable a declarative style of writing new models or form classes. While the metaclass is creating the class, all members get the possibility to customize the class itself. <li>Creating a new model <li>The metaclass enabling this The thing that's left to say is: If you don't know what metaclasses are, the probability that you <strong>will not need them</strong> is 99%.", "summary": "In short: A class is a blueprint for the creation of an instance, a metaclass is a blueprint for the creation of a class."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Yes, you could append <code>;Connection Timeout=30</code> to your connection string and specify the value you wish. The timeout value set in the <code>Connection Timeout</code> property is a <strong>time expressed in seconds</strong>. If this property isn't set, the timeout value for the connection is the default value (15 seconds). Moreover, setting the timeout value to <code>0</code>, you are specifying that your attempt to connect waits an infinite time. As described in the documentation, this is something that you shouldn't set in your connection string: A value of 0 indicates no limit, and should be avoided in a  ConnectionString because an attempt to connect waits indefinitely.", "output": "Yes, you could append <code>;Connection Timeout=30</code> to your connection string and specify the value you wish. The timeout value set in the <code>Connection Timeout</code> property is a <strong>time expressed in seconds</strong>. Moreover, setting the timeout value to <code>0</code>, you are specifying that your attempt to connect waits an infinite time.", "answer": "Yes, you could append <code>;Connection Timeout=30</code> to your connection string and specify the value you wish. The timeout value set in the <code>Connection Timeout</code> property is a <strong>time expressed in seconds</strong>. If this property isn't set, the timeout value for the connection is the default value (15 seconds). Moreover, setting the timeout value to <code>0</code>, you are specifying that your attempt to connect waits an infinite time. As described in the documentation, this is something that you shouldn't set in your connection string: A value of 0 indicates no limit, and should be avoided in a  ConnectionString because an attempt to connect waits indefinitely.", "summary": "Yes, you could append <code>;Connection Timeout=30</code> to your connection string and specify the value you wish. The timeout value set in the <code>Connection Timeout</code> property is a <strong>time expressed in seconds</strong>. Moreover, setting the timeout value to <code>0</code>, you are specifying that your attempt to connect waits an infinite time."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n You could use : http://membrane.com/synapse/library/pkunzip.html or 7zip: http://www.7-zip.org/download.html Free byte zip: http://www.freebyte.com/fbzip/ or infozip: http://infozip.sourceforge.net/", "output": "You could use :", "answer": "You could use : http://membrane.com/synapse/library/pkunzip.html or 7zip: http://www.7-zip.org/download.html Free byte zip: http://www.freebyte.com/fbzip/ or infozip: http://infozip.sourceforge.net/", "summary": "You could use :"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n You <strong>cannot</strong> sanely depend on <em>client side</em> JavaScript to determine if user credentials are correct. The browser (and all code that executes that) is under the control of the user, not you, so it is not trustworthy. The username and password need to be entered using a form. The OK button will be a submit button. The action attribute must point to a URL which will be handled by a program that checks the credentials. This program could be written in JavaScript, but how you go about that would depend on which server side JavaScript engine you were using. Note that SSJS is not a mainstream technology so if you really want to use it, you would have to use specialised hosting or admin your own server. (Half a decade later and SSJS is much more common thanks to Node.js, it is still fairly specialised though). If you want to redirect afterwards, then the program needs to emit an HTTP Location header. Note that you need to check the credentials are OK (usually by storing a token, which isn't the actual password, in a cookie) before outputting any private page. Otherwise anyone could get to the private pages by knowing the URL (and thus bypassing the login system).", "output": "You <strong>cannot</strong> sanely depend on <em>client side</em> JavaScript to determine if user credentials are correct. The browser (and all code that executes that) is under the control of the user, not you, so it is not trustworthy. Note that you need to check the credentials are OK (usually by storing a token, which isn't the actual password, in a cookie) before outputting any private page.", "answer": "You <strong>cannot</strong> sanely depend on <em>client side</em> JavaScript to determine if user credentials are correct. The browser (and all code that executes that) is under the control of the user, not you, so it is not trustworthy. The username and password need to be entered using a form. The OK button will be a submit button. The action attribute must point to a URL which will be handled by a program that checks the credentials. This program could be written in JavaScript, but how you go about that would depend on which server side JavaScript engine you were using. Note that SSJS is not a mainstream technology so if you really want to use it, you would have to use specialised hosting or admin your own server. (Half a decade later and SSJS is much more common thanks to Node.js, it is still fairly specialised though). If you want to redirect afterwards, then the program needs to emit an HTTP Location header. Note that you need to check the credentials are OK (usually by storing a token, which isn't the actual password, in a cookie) before outputting any private page. Otherwise anyone could get to the private pages by knowing the URL (and thus bypassing the login system).", "summary": "You <strong>cannot</strong> sanely depend on <em>client side</em> JavaScript to determine if user credentials are correct. The browser (and all code that executes that) is under the control of the user, not you, so it is not trustworthy. Note that you need to check the credentials are OK (usually by storing a token, which isn't the actual password, in a cookie) before outputting any private page."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Not sure, if I understand your question correctly. If you have data in MS-Access, which you want to move it to SQL Server - you could use DTS. And, I guess you could use SQL profiler to see all the INSERT statements going by, I suppose.", "output": "If you have data in MS-Access, which you want to move it to SQL Server - you could use DTS. And, I guess you could use SQL profiler to see all the INSERT statements going by, I suppose.", "answer": "Not sure, if I understand your question correctly. If you have data in MS-Access, which you want to move it to SQL Server - you could use DTS. And, I guess you could use SQL profiler to see all the INSERT statements going by, I suppose.", "summary": "If you have data in MS-Access, which you want to move it to SQL Server - you could use DTS. And, I guess you could use SQL profiler to see all the INSERT statements going by, I suppose."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n FYI I can verify that the method: Works in OS X (10.6,10.5), Windows XP, and on a well administered RHEL department server. It did not work on a very minimal CentOS VM that I just do some kernel hacking on. So for that instance you can just check for a 127.0.0.1 address and in that case do the following: And then parse the ip address from the output. It should be noted that ifconfig is not in a normal user's PATH by default and that is why I give the full path in the command. I hope this helps.", "output": "FYI I can verify that the method:", "answer": "FYI I can verify that the method: Works in OS X (10.6,10.5), Windows XP, and on a well administered RHEL department server. It did not work on a very minimal CentOS VM that I just do some kernel hacking on. So for that instance you can just check for a 127.0.0.1 address and in that case do the following: And then parse the ip address from the output. It should be noted that ifconfig is not in a normal user's PATH by default and that is why I give the full path in the command. I hope this helps.", "summary": "FYI I can verify that the method:"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n POSIX is a set of standards put forth by IEEE and The Open Group that describes how an ideal Unix would operate. Programmers, users, and administrators can all become familiar with the POSIX document, and expect a POSIX-complaint Unix to provide all of the standard facilities mentioned. Since every Unix does things a little differently -- Solaris, Mac OS X, IRIX, BSD, and Linux all have their quirks -- POSIX is especially useful to those in the industry as it defines a standard environment to operate in. For example, most of the functions in the C library are based in POSIX; a programmer can, therefore, use one in his application and expect it to behave the same across most Unices. However, the divergent areas of Unix are typically the focus, rather than the standard ones. The great thing about POSIX is that you're welcome to read it yourself: The Open Group Base Specifications Issue 7 Issue 7 is known as POSIX.1-2008, and there are new things in there -- however, Google-fu for POSIX.1 and such will allow you to see the entire history behind what Unix is.", "output": "POSIX is a set of standards put forth by IEEE and The Open Group that describes how an ideal Unix would operate. Since every Unix does things a little differently -- Solaris, Mac OS X, IRIX, BSD, and Linux all have their quirks -- POSIX is especially useful to those in the industry as it defines a standard environment to operate in. However, the divergent areas of Unix are typically the focus, rather than the standard ones.", "answer": "POSIX is a set of standards put forth by IEEE and The Open Group that describes how an ideal Unix would operate. Programmers, users, and administrators can all become familiar with the POSIX document, and expect a POSIX-complaint Unix to provide all of the standard facilities mentioned. Since every Unix does things a little differently -- Solaris, Mac OS X, IRIX, BSD, and Linux all have their quirks -- POSIX is especially useful to those in the industry as it defines a standard environment to operate in. For example, most of the functions in the C library are based in POSIX; a programmer can, therefore, use one in his application and expect it to behave the same across most Unices. However, the divergent areas of Unix are typically the focus, rather than the standard ones. The great thing about POSIX is that you're welcome to read it yourself: The Open Group Base Specifications Issue 7 Issue 7 is known as POSIX.1-2008, and there are new things in there -- however, Google-fu for POSIX.1 and such will allow you to see the entire history behind what Unix is.", "summary": "POSIX is a set of standards put forth by IEEE and The Open Group that describes how an ideal Unix would operate. Since every Unix does things a little differently -- Solaris, Mac OS X, IRIX, BSD, and Linux all have their quirks -- POSIX is especially useful to those in the industry as it defines a standard environment to operate in. However, the divergent areas of Unix are typically the focus, rather than the standard ones."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Most of the time these settings are also defined in a <code>jndi.properties</code> file. Do you have that one lying around somewhere?", "output": "Most of the time these settings are also defined in a <code>jndi.properties</code> file.", "answer": "Most of the time these settings are also defined in a <code>jndi.properties</code> file. Do you have that one lying around somewhere?", "summary": "Most of the time these settings are also defined in a <code>jndi.properties</code> file."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Log4j by default looks for a file called log4j.properties or log4j.xml on the classpath. You can control which file it uses to initialize itself by setting system properties as described here (Look for the \"Default Initialization Procedure\" section). For example: Will cause log4j to look for a file called customName on the classpath. If you are having problems I find it helpful to turn on the log4j.debug: It will print to System.out lots of helpful information about which file it used to initialize itself, which loggers / appenders got configured and how etc. The configuration file can be a java properties file or an xml file. Here is a sample of the properties file format taken from the log4j intro documentation page:", "output": "Log4j by default looks for a file called log4j.properties or log4j.xml on the classpath. Here is a sample of the properties file format taken from the log4j intro documentation page:", "answer": "Log4j by default looks for a file called log4j.properties or log4j.xml on the classpath. You can control which file it uses to initialize itself by setting system properties as described here (Look for the \"Default Initialization Procedure\" section). For example: Will cause log4j to look for a file called customName on the classpath. If you are having problems I find it helpful to turn on the log4j.debug: It will print to System.out lots of helpful information about which file it used to initialize itself, which loggers / appenders got configured and how etc. The configuration file can be a java properties file or an xml file. Here is a sample of the properties file format taken from the log4j intro documentation page:", "summary": "Log4j by default looks for a file called log4j.properties or log4j.xml on the classpath. Here is a sample of the properties file format taken from the log4j intro documentation page:"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Filezilla is available for Linux. If you are using Ubuntu: BIGBLOCK Otherwise, you can download it from the Filezilla website.", "output": "Filezilla is available for Linux.", "answer": "Filezilla is available for Linux. If you are using Ubuntu: BIGBLOCK Otherwise, you can download it from the Filezilla website.", "summary": "Filezilla is available for Linux."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n It's trying to bring in some Ruby Goodness :) <strong>Concept:</strong> This is some sample Ruby Code that prints out each element of the array BIGBLOCK The Array's each method implementation <strong>yields</strong> control over to the caller (the 'puts x') with <strong>each</strong> element of the array neatly presented as x. The caller can then do whatever it needs to do with x. However <strong>.Net</strong> doesn't go all the way here.. C# seems to have coupled yield with IEnumerable, in a way forcing you to write a foreach loop in the caller as seen in Mendelt's response. Little less elegant. BIGBLOCK", "output": "The Array's each method implementation <strong>yields</strong> control over to the caller (the 'puts x') with <strong>each</strong> element of the array neatly presented as x. However <strong>.Net</strong> doesn't go all the way here.. C# seems to have coupled yield with IEnumerable, in a way forcing you to write a foreach loop in the caller as seen in Mendelt's response.", "answer": "It's trying to bring in some Ruby Goodness :) <strong>Concept:</strong> This is some sample Ruby Code that prints out each element of the array BIGBLOCK The Array's each method implementation <strong>yields</strong> control over to the caller (the 'puts x') with <strong>each</strong> element of the array neatly presented as x. The caller can then do whatever it needs to do with x. However <strong>.Net</strong> doesn't go all the way here.. C# seems to have coupled yield with IEnumerable, in a way forcing you to write a foreach loop in the caller as seen in Mendelt's response. Little less elegant. BIGBLOCK", "summary": "The Array's each method implementation <strong>yields</strong> control over to the caller (the 'puts x') with <strong>each</strong> element of the array neatly presented as x. However <strong>.Net</strong> doesn't go all the way here.. C# seems to have coupled yield with IEnumerable, in a way forcing you to write a foreach loop in the caller as seen in Mendelt's response."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n You can't do it in a <code>switch</code> unless you're doing <strong>full</strong> string matching; that's doing <strong>substring</strong> matching. <em>(This isn't</em> quite <em>true, as Sean points out in the comments. See note at the end. )</em> If you're happy that your regex at the top is stripping away everything that you don't want to compare in your match, you don't need a substring match, and could do: BIGBLOCK ...but again, that only works if that's the <em>complete</em> string you're matching. It would fail if <code>base_url_string</code> were, say, \"yyy.xxx.local\" whereas your current code would match that in the \"xxx.local\" branch. <strong>Update</strong>: Okay, so technically you <em>can</em> use a <code>switch</code> for substring matching, but I wouldn't recommend it in most situations. Here's how (live example): BIGBLOCK That works because of the way JavaScript <code>switch</code> statements work, in particular two key aspects: First, that the cases are considered in <em>source text</em> order, and second that the selector expressions (the bits after the keyword <code>case</code>) are <em>expressions</em> that are evaluated as that case is evaluated (not constants as in some other languages). So since our test expression is <code>true</code>, the first <code>case</code> expression that results in <code>true</code> will be the one that gets used.", "output": "You can't do it in a <code>switch</code> unless you're doing <strong>full</strong> string matching; that's doing <strong>substring</strong> matching. If you're happy that your regex at the top is stripping away everything that you don't want to compare in your match, you don't need a substring match, and could do: BIGBLOCK It would fail if <code>base_url_string</code> were, say, \"yyy.xxx.local\" whereas your current code would match that in the \"xxx.local\" branch. <strong>Update</strong>: Okay, so technically you <em>can</em> use a <code>switch</code> for substring matching, but I wouldn't recommend it in most situations. Here's how (live example): BIGBLOCK", "answer": "You can't do it in a <code>switch</code> unless you're doing <strong>full</strong> string matching; that's doing <strong>substring</strong> matching. <em>(This isn't</em> quite <em>true, as Sean points out in the comments. See note at the end. )</em> If you're happy that your regex at the top is stripping away everything that you don't want to compare in your match, you don't need a substring match, and could do: BIGBLOCK ...but again, that only works if that's the <em>complete</em> string you're matching. It would fail if <code>base_url_string</code> were, say, \"yyy.xxx.local\" whereas your current code would match that in the \"xxx.local\" branch. <strong>Update</strong>: Okay, so technically you <em>can</em> use a <code>switch</code> for substring matching, but I wouldn't recommend it in most situations. Here's how (live example): BIGBLOCK That works because of the way JavaScript <code>switch</code> statements work, in particular two key aspects: First, that the cases are considered in <em>source text</em> order, and second that the selector expressions (the bits after the keyword <code>case</code>) are <em>expressions</em> that are evaluated as that case is evaluated (not constants as in some other languages). So since our test expression is <code>true</code>, the first <code>case</code> expression that results in <code>true</code> will be the one that gets used.", "summary": "You can't do it in a <code>switch</code> unless you're doing <strong>full</strong> string matching; that's doing <strong>substring</strong> matching. If you're happy that your regex at the top is stripping away everything that you don't want to compare in your match, you don't need a substring match, and could do: BIGBLOCK It would fail if <code>base_url_string</code> were, say, \"yyy.xxx.local\" whereas your current code would match that in the \"xxx.local\" branch. <strong>Update</strong>: Okay, so technically you <em>can</em> use a <code>switch</code> for substring matching, but I wouldn't recommend it in most situations. Here's how (live example): BIGBLOCK"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n If you are using the push_back there is no call for the string constructor. Otherwise it will create a string object via casting, then it will add the character in this string to the other string. Too much trouble for a tiny character ;)", "output": "If you are using the push_back there is no call for the string constructor.", "answer": "If you are using the push_back there is no call for the string constructor. Otherwise it will create a string object via casting, then it will add the character in this string to the other string. Too much trouble for a tiny character ;)", "summary": "If you are using the push_back there is no call for the string constructor."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n The advantage is that it can be faster in some situations. The disadvantage is the result can be wrong (data which hasn't been committed yet could be returned) and there is no guarantee that the result is repeatable. If you care about accuracy, don't use this. More information is on MSDN: Implements dirty read, or isolation level 0 locking, which means that no shared locks are issued and no exclusive locks are honored. When this option is set, it is possible to read uncommitted or dirty data; values in the data can be changed and rows can appear or disappear in the data set before the end of the transaction. This option has the same effect as setting NOLOCK on all tables in all SELECT statements in a transaction. This is the least restrictive of the four isolation levels.", "output": "If you care about accuracy, don't use this. This is the least restrictive of the four isolation levels.", "answer": "The advantage is that it can be faster in some situations. The disadvantage is the result can be wrong (data which hasn't been committed yet could be returned) and there is no guarantee that the result is repeatable. If you care about accuracy, don't use this. More information is on MSDN: Implements dirty read, or isolation level 0 locking, which means that no shared locks are issued and no exclusive locks are honored. When this option is set, it is possible to read uncommitted or dirty data; values in the data can be changed and rows can appear or disappear in the data set before the end of the transaction. This option has the same effect as setting NOLOCK on all tables in all SELECT statements in a transaction. This is the least restrictive of the four isolation levels.", "summary": "If you care about accuracy, don't use this. This is the least restrictive of the four isolation levels."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Assuming you have a button/link inside of a data cell in your table, something like this would do the trick... This will remove the parent of the parent of the button/link that is clicked. You need to use parent() because it is a jQuery object, not a normal DOM object, and you need to use parent() twice, because the button lives inside a data cell, which lives inside a row....which is what you want to remove. $(this) is the button clicked, so simply having something like this will remove only the button: While this will remove the data cell: If you want to simply click anywhere on the row to remove it something like this would work. You could easily modify this to prompt the user or work only on a double-click: Hope that helps...I struggled on this a bit myself.", "output": "Assuming you have a button/link inside of a data cell in your table, something like this would do the trick...", "answer": "Assuming you have a button/link inside of a data cell in your table, something like this would do the trick... This will remove the parent of the parent of the button/link that is clicked. You need to use parent() because it is a jQuery object, not a normal DOM object, and you need to use parent() twice, because the button lives inside a data cell, which lives inside a row....which is what you want to remove. $(this) is the button clicked, so simply having something like this will remove only the button: While this will remove the data cell: If you want to simply click anywhere on the row to remove it something like this would work. You could easily modify this to prompt the user or work only on a double-click: Hope that helps...I struggled on this a bit myself.", "summary": "Assuming you have a button/link inside of a data cell in your table, something like this would do the trick..."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n There is also another difference: null instanceof X is <code>false</code> no matter what X is null.getClass().isAssignableFrom(X) will throw a NullPointerException", "output": "null instanceof X is <code>false</code> no matter what X is null.getClass().isAssignableFrom(X) will throw a NullPointerException", "answer": "There is also another difference: null instanceof X is <code>false</code> no matter what X is null.getClass().isAssignableFrom(X) will throw a NullPointerException", "summary": "null instanceof X is <code>false</code> no matter what X is null.getClass().isAssignableFrom(X) will throw a NullPointerException"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n If the database is not very large, you might look at the 'Script Database' commands in SQL Server Management Studio Express, which are in a context menu off the database item itself in the explorer. You can choose what all to script; you want the objects and the data, of course. You will then save the entire script to a single file. Then you can use that file to re-create the database; just make sure the <code>USE</code> command at the top is set to the proper database.", "output": "If the database is not very large, you might look at the 'Script Database' commands in SQL Server Management Studio Express, which are in a context menu off the database item itself in the explorer.", "answer": "If the database is not very large, you might look at the 'Script Database' commands in SQL Server Management Studio Express, which are in a context menu off the database item itself in the explorer. You can choose what all to script; you want the objects and the data, of course. You will then save the entire script to a single file. Then you can use that file to re-create the database; just make sure the <code>USE</code> command at the top is set to the proper database.", "summary": "If the database is not very large, you might look at the 'Script Database' commands in SQL Server Management Studio Express, which are in a context menu off the database item itself in the explorer."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n We encountered this error as well. What we did to solve the issue is we added a lazy=false in the Hibernate mapping file. It appears we had a class A that's inside a Session that loads another class B. We are trying to access the data on class B but this class B is detached from the session. In order for us to access this Class B, we had to specify in the class A's Hibernate mapping file the lazy=false attribute. For example,", "output": "What we did to solve the issue is we added a lazy=false in the Hibernate mapping file.", "answer": "We encountered this error as well. What we did to solve the issue is we added a lazy=false in the Hibernate mapping file. It appears we had a class A that's inside a Session that loads another class B. We are trying to access the data on class B but this class B is detached from the session. In order for us to access this Class B, we had to specify in the class A's Hibernate mapping file the lazy=false attribute. For example,", "summary": "What we did to solve the issue is we added a lazy=false in the Hibernate mapping file."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Very nice problem. I'd go for using a set difference for Qk. A lot of programming languages even have support for it, like in Ruby: BIGBLOCK It's probably not the most efficient solution but it's one I would use in real life if I was faced with such a task in this case (known boundaries, low boundaries). If the set of number would be very large then I would consider a more efficient algorithm, of course, but until then the simple solution would be enough for me.", "output": "I'd go for using a set difference for Qk. It's probably not the most efficient solution but it's one I would use in real life if I was faced with such a task in this case (known boundaries, low boundaries). If the set of number would be very large then I would consider a more efficient algorithm, of course, but until then the simple solution would be enough for me.", "answer": "Very nice problem. I'd go for using a set difference for Qk. A lot of programming languages even have support for it, like in Ruby: BIGBLOCK It's probably not the most efficient solution but it's one I would use in real life if I was faced with such a task in this case (known boundaries, low boundaries). If the set of number would be very large then I would consider a more efficient algorithm, of course, but until then the simple solution would be enough for me.", "summary": "I'd go for using a set difference for Qk. It's probably not the most efficient solution but it's one I would use in real life if I was faced with such a task in this case (known boundaries, low boundaries). If the set of number would be very large then I would consider a more efficient algorithm, of course, but until then the simple solution would be enough for me."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n The parametric equation for a circle is BIGBLOCK Where <em>r</em> is the radius, <em>cx,cy</em> the origin, and <em>a</em> the angle. That's pretty easy to adapt into any language with basic trig functions. <em>Note that most languages will use radians for the angle in trig functions, so rather than cycling through 0..360 degrees, you're cycling through 0..2PI radians.</em>", "output": "The parametric equation for a circle is BIGBLOCK", "answer": "The parametric equation for a circle is BIGBLOCK Where <em>r</em> is the radius, <em>cx,cy</em> the origin, and <em>a</em> the angle. That's pretty easy to adapt into any language with basic trig functions. <em>Note that most languages will use radians for the angle in trig functions, so rather than cycling through 0..360 degrees, you're cycling through 0..2PI radians.</em>", "summary": "The parametric equation for a circle is BIGBLOCK"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n I haven't seen a short, easy to understand answer here--so I'll give it a try. With a shallow copy, any object pointed to by the source is also pointed to by the destination (so that no referenced objects are copied). With a deep copy, any object pointed to by the source is copied and the copy is pointed to by the destination (so there will now be 2 of each referenced object). This recurses down the object tree.", "output": "With a shallow copy, any object pointed to by the source is also pointed to by the destination (so that no referenced objects are copied). With a deep copy, any object pointed to by the source is copied and the copy is pointed to by the destination (so there will now be 2 of each referenced object). This recurses down the object tree.", "answer": "I haven't seen a short, easy to understand answer here--so I'll give it a try. With a shallow copy, any object pointed to by the source is also pointed to by the destination (so that no referenced objects are copied). With a deep copy, any object pointed to by the source is copied and the copy is pointed to by the destination (so there will now be 2 of each referenced object). This recurses down the object tree.", "summary": "With a shallow copy, any object pointed to by the source is also pointed to by the destination (so that no referenced objects are copied). With a deep copy, any object pointed to by the source is copied and the copy is pointed to by the destination (so there will now be 2 of each referenced object). This recurses down the object tree."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n There is nothing inherently wrong with the pattern, assuming it is being used for some aspect of your model which is truly single. I believe the backlash is due to its overuse which, in turn, is due to the fact that it's the easiest pattern to understand and implement.", "output": "There is nothing inherently wrong with the pattern, assuming it is being used for some aspect of your model which is truly single.", "answer": "There is nothing inherently wrong with the pattern, assuming it is being used for some aspect of your model which is truly single. I believe the backlash is due to its overuse which, in turn, is due to the fact that it's the easiest pattern to understand and implement.", "summary": "There is nothing inherently wrong with the pattern, assuming it is being used for some aspect of your model which is truly single."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n You don't need to use height, just make sure you use <code>_blank</code>,  Without it, it opens in a new tab. For a empty window: For a specific URL:", "output": "You don't need to use height, just make sure you use <code>_blank</code>,  Without it, it opens in a new tab.", "answer": "You don't need to use height, just make sure you use <code>_blank</code>,  Without it, it opens in a new tab. For a empty window: For a specific URL:", "summary": "You don't need to use height, just make sure you use <code>_blank</code>,  Without it, it opens in a new tab."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n No, \"message\" is not forbidden. It's just deprecated. You application will work fine with using message. But you may want to get rid of the deprecation error, of course. When you create custom Exception classes for your application, many of them do not subclass just from Exception, but from others, like ValueError or similar. Then you have to adapt to their usage of variables. And if you have many exceptions in your application it's usually a good idea to have a common custom base class for all of them, so that users of your modules can do And in that case you can do the <code>__init__ and __str__</code> needed there, so you don't have to repeat it for every exception. But simply calling the message variable something else than message does the trick. In any case, you only need the <code>__init__ or __str__</code> if you do something different from what Exception itself does. And because if the deprecation, you then need both, or you get an error. That's not a whole lot of extra code you need per class. ;)", "output": "And if you have many exceptions in your application it's usually a good idea to have a common custom base class for all of them, so that users of your modules can do", "answer": "No, \"message\" is not forbidden. It's just deprecated. You application will work fine with using message. But you may want to get rid of the deprecation error, of course. When you create custom Exception classes for your application, many of them do not subclass just from Exception, but from others, like ValueError or similar. Then you have to adapt to their usage of variables. And if you have many exceptions in your application it's usually a good idea to have a common custom base class for all of them, so that users of your modules can do And in that case you can do the <code>__init__ and __str__</code> needed there, so you don't have to repeat it for every exception. But simply calling the message variable something else than message does the trick. In any case, you only need the <code>__init__ or __str__</code> if you do something different from what Exception itself does. And because if the deprecation, you then need both, or you get an error. That's not a whole lot of extra code you need per class. ;)", "summary": "And if you have many exceptions in your application it's usually a good idea to have a common custom base class for all of them, so that users of your modules can do"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Because i feel it's really called for, i just want to state some rules of C and C++ (they are the same in this regard). First, all bits of <code>unsigned char</code> participate in determining the value if any unsigned char object. Second, <code>unsigned char</code> is explicitly stated unsigned. Now, i had a discussion with someone about what happens when you convert the value <code>-1</code> of type int to <code>unsigned char</code>. He refused the idea that the resulting <code>unsigned char</code> has all its bits set to 1, because he was worried about sign representation. But he don't have to. It's immediately following out of this rule that the conversion does what is intended: If the new type is unsigned, the value is converted by repeatedly adding or   subtracting one more than the maximum value that can be represented in the new type   until the value is in the range of the new type. (<code>6.3.1.3p2</code> in a C99 draft) That's a mathematical description. C++ describes it in terms of modulo calculus, which yields to the same rule. Anyway, what is not guaranteed is that all bits in the integer <code>-1</code> are one before the conversion. So, what do we have so we can claim that the resulting <code>unsigned char</code> has all its <code>CHAR_BIT</code> bits turned to 1? All bits participate in determining its value - that is, no padding bits occur in the object. Adding only one time <code>UCHAR_MAX+1</code> to <code>-1</code> will yield a value in range, namely <code>UCHAR_MAX</code> That's enough, actually! So whenever you want to have an <code>unsigned char</code> having all its bits one, you do It also follows that a conversion is not just truncating higher order bits. The fortunate event for two's complement is that it is just a truncation there, but the same isn't necessarily true for other sign representations.", "output": "First, all bits of <code>unsigned char</code> participate in determining the value if any unsigned char object. Second, <code>unsigned char</code> is explicitly stated unsigned. If the new type is unsigned, the value is converted by repeatedly adding or   subtracting one more than the maximum value that can be represented in the new type   until the value is in the range of the new type.", "answer": "Because i feel it's really called for, i just want to state some rules of C and C++ (they are the same in this regard). First, all bits of <code>unsigned char</code> participate in determining the value if any unsigned char object. Second, <code>unsigned char</code> is explicitly stated unsigned. Now, i had a discussion with someone about what happens when you convert the value <code>-1</code> of type int to <code>unsigned char</code>. He refused the idea that the resulting <code>unsigned char</code> has all its bits set to 1, because he was worried about sign representation. But he don't have to. It's immediately following out of this rule that the conversion does what is intended: If the new type is unsigned, the value is converted by repeatedly adding or   subtracting one more than the maximum value that can be represented in the new type   until the value is in the range of the new type. (<code>6.3.1.3p2</code> in a C99 draft) That's a mathematical description. C++ describes it in terms of modulo calculus, which yields to the same rule. Anyway, what is not guaranteed is that all bits in the integer <code>-1</code> are one before the conversion. So, what do we have so we can claim that the resulting <code>unsigned char</code> has all its <code>CHAR_BIT</code> bits turned to 1? All bits participate in determining its value - that is, no padding bits occur in the object. Adding only one time <code>UCHAR_MAX+1</code> to <code>-1</code> will yield a value in range, namely <code>UCHAR_MAX</code> That's enough, actually! So whenever you want to have an <code>unsigned char</code> having all its bits one, you do It also follows that a conversion is not just truncating higher order bits. The fortunate event for two's complement is that it is just a truncation there, but the same isn't necessarily true for other sign representations.", "summary": "First, all bits of <code>unsigned char</code> participate in determining the value if any unsigned char object. Second, <code>unsigned char</code> is explicitly stated unsigned. If the new type is unsigned, the value is converted by repeatedly adding or   subtracting one more than the maximum value that can be represented in the new type   until the value is in the range of the new type."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n It's a \"Holy War\" style question. In others words, both alternatives are good, but people will have their preferences which they will defend to the death.", "output": "In others words, both alternatives are good, but people will have their preferences which they will defend to the death.", "answer": "It's a \"Holy War\" style question. In others words, both alternatives are good, but people will have their preferences which they will defend to the death.", "summary": "In others words, both alternatives are good, but people will have their preferences which they will defend to the death."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Sounds like an external process (AV?) is locking it, but can't you avoid the problem in the first place?", "output": "Sounds like an external process (AV?) is locking it, but can't you avoid the problem in the first place?", "answer": "Sounds like an external process (AV?) is locking it, but can't you avoid the problem in the first place?", "summary": "Sounds like an external process (AV?) is locking it, but can't you avoid the problem in the first place?"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n I believe the problem is that <code>codecs.BOM_UTF8</code> is a byte string, not a Unicode string. I suspect the file handler is trying to guess what you really mean based on \"I'm meant to be writing Unicode as UTF-8-encoded text, but you've given me a byte string!\" Try writing the Unicode string for the byte order mark (i.e. Unicode U+FEFF) directly, so that the file just encodes that as UTF-8: BIGBLOCK (That seems to give the right answer - a file with bytes EF BB BF.) EDIT: S. Lott's suggestion of using \"utf-8-sig\" as the encoding is a better one than explicitly writing the BOM yourself, but I'll leave this answer here as it explains what was going wrong before.", "output": "I believe the problem is that <code>codecs.BOM_UTF8</code> is a byte string, not a Unicode string. Try writing the Unicode string for the byte order mark (i.e. Unicode U+FEFF) directly, so that the file just encodes that as UTF-8: BIGBLOCK", "answer": "I believe the problem is that <code>codecs.BOM_UTF8</code> is a byte string, not a Unicode string. I suspect the file handler is trying to guess what you really mean based on \"I'm meant to be writing Unicode as UTF-8-encoded text, but you've given me a byte string!\" Try writing the Unicode string for the byte order mark (i.e. Unicode U+FEFF) directly, so that the file just encodes that as UTF-8: BIGBLOCK (That seems to give the right answer - a file with bytes EF BB BF.) EDIT: S. Lott's suggestion of using \"utf-8-sig\" as the encoding is a better one than explicitly writing the BOM yourself, but I'll leave this answer here as it explains what was going wrong before.", "summary": "I believe the problem is that <code>codecs.BOM_UTF8</code> is a byte string, not a Unicode string. Try writing the Unicode string for the byte order mark (i.e. Unicode U+FEFF) directly, so that the file just encodes that as UTF-8: BIGBLOCK"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n There are several sources on the net suggesting a hack by reinstalling the package with the -m option and then just removing the .egg file in lib/ and the binaries in bin/. Also, discussion about this setuptools issue can be found on the python bug tracker as setuptools issue 21. Edit: Added the link to the python bugtracker.", "output": "There are several sources on the net suggesting a hack by reinstalling the package with the -m option and then just removing the .egg file in lib/ and the binaries in bin/. Also, discussion about this setuptools issue can be found on the python bug tracker as setuptools issue 21.", "answer": "There are several sources on the net suggesting a hack by reinstalling the package with the -m option and then just removing the .egg file in lib/ and the binaries in bin/. Also, discussion about this setuptools issue can be found on the python bug tracker as setuptools issue 21. Edit: Added the link to the python bugtracker.", "summary": "There are several sources on the net suggesting a hack by reinstalling the package with the -m option and then just removing the .egg file in lib/ and the binaries in bin/. Also, discussion about this setuptools issue can be found on the python bug tracker as setuptools issue 21."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Check the <code>InnerException</code> property of the <code>TypeInitializationException</code>; it is likely to contain information about the underlying problem, and exactly where it occurred.", "output": "Check the <code>InnerException</code> property of the <code>TypeInitializationException</code>; it is likely to contain information about the underlying problem, and exactly where it occurred.", "answer": "Check the <code>InnerException</code> property of the <code>TypeInitializationException</code>; it is likely to contain information about the underlying problem, and exactly where it occurred.", "summary": "Check the <code>InnerException</code> property of the <code>TypeInitializationException</code>; it is likely to contain information about the underlying problem, and exactly where it occurred."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Modulus division gives you the remainder of a division, rather than the quotient.", "output": "Modulus division gives you the remainder of a division, rather than the quotient.", "answer": "Modulus division gives you the remainder of a division, rather than the quotient.", "summary": "Modulus division gives you the remainder of a division, rather than the quotient."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n OK, from background knowledge and from reading the Wikipedia page to which you pointed, it appears that reactive programming is something like dataflow computing but with specific external \"stimuli\" triggering a set of nodes to fire and perform their computations. This is pretty well suited to UI design, for example, in which touching a user interface control (say, the volume control on a music playing application) might need to update various display items and the actual volume of audio output. When you modify the volume (a slider, let's say) that would correspond to modifying the value associated with a node in a directed graph. Various nodes having edges from that \"volume value\" node would automatically be triggered and any necessary computations and updates would naturally ripple through the application. The application \"reacts\" to the user stimulus. Functional reactive programming would just be the implementation of this idea in a functional language, or generally within a functional programming paradigm. For more on \"dataflow computing\", search for those two words on Wikipedia or using your favorite search engine. The general idea is this: the program is a directed graph of nodes, each performing some simple computation. These nodes are connected to each other by graph links that provide the outputs of some nodes to the inputs of others. When a node fires or performs its calculation, the nodes connected to its outputs have their corresponding inputs \"triggered\" or \"marked\". Any node having all inputs triggered/marked/available automatically fires. The graph might be implicit or explicit depending on exactly how reactive programming is implemented. Nodes can be looked at as firing in parallel, but often they are executed serially or with limited parallelism (for example, there may be a few threads executing them). A famous example was the Manchester Dataflow Machine, which (IIRC) used a tagged data architecture to schedule execution of nodes in the graph through one or more execution units. Dataflow computing is fairly well suited to situations in which triggering computations asynchronously giving rise to cascades of computations works better than trying to have execution be governed by a clock (or clocks). Reactive programming imports this \"cascade of execution\" idea and seems to think of the program in a dataflow-like fashion but with the proviso that some of the nodes are hooked to the \"outside world\" and the cascades of execution are triggered when these sensory-like nodes change. Program execution would then look like something analogous to a complex reflex arc. The program may or may not be basically sessile between stimuli or may settle into a basically sessile state between stimuli. \"non-reactive\" programming would be programming with a very different view of the flow of execution and relationship to external inputs. It's likely to be somewhat subjective, since people will likely be tempted to say anything that responds to external inputs \"reacts\" to them. But looking at the spirit of the thing, a program that polls an event queue at a fixed interval and dispatches any events found to functions (or threads) is less reactive (because it only attends to user input at a fixed interval). Again, it's the spirit of the thing here: one can imagine putting a polling implementation with a fast polling interval into a system at a very low level and program in a reactive fashion on top of it.", "output": "OK, from background knowledge and from reading the Wikipedia page to which you pointed, it appears that reactive programming is something like dataflow computing but with specific external \"stimuli\" triggering a set of nodes to fire and perform their computations. The general idea is this: the program is a directed graph of nodes, each performing some simple computation. These nodes are connected to each other by graph links that provide the outputs of some nodes to the inputs of others. When a node fires or performs its calculation, the nodes connected to its outputs have their corresponding inputs \"triggered\" or \"marked\". Any node having all inputs triggered/marked/available automatically fires. Nodes can be looked at as firing in parallel, but often they are executed serially or with limited parallelism (for example, there may be a few threads executing them). A famous example was the Manchester Dataflow Machine, which (IIRC) used a tagged data architecture to schedule execution of nodes in the graph through one or more execution units. Reactive programming imports this \"cascade of execution\" idea and seems to think of the program in a dataflow-like fashion but with the proviso that some of the nodes are hooked to the \"outside world\" and the cascades of execution are triggered when these sensory-like nodes change. It's likely to be somewhat subjective, since people will likely be tempted to say anything that responds to external inputs \"reacts\" to them. Again, it's the spirit of the thing here: one can imagine putting a polling implementation with a fast polling interval into a system at a very low level and program in a reactive fashion on top of it.", "answer": "OK, from background knowledge and from reading the Wikipedia page to which you pointed, it appears that reactive programming is something like dataflow computing but with specific external \"stimuli\" triggering a set of nodes to fire and perform their computations. This is pretty well suited to UI design, for example, in which touching a user interface control (say, the volume control on a music playing application) might need to update various display items and the actual volume of audio output. When you modify the volume (a slider, let's say) that would correspond to modifying the value associated with a node in a directed graph. Various nodes having edges from that \"volume value\" node would automatically be triggered and any necessary computations and updates would naturally ripple through the application. The application \"reacts\" to the user stimulus. Functional reactive programming would just be the implementation of this idea in a functional language, or generally within a functional programming paradigm. For more on \"dataflow computing\", search for those two words on Wikipedia or using your favorite search engine. The general idea is this: the program is a directed graph of nodes, each performing some simple computation. These nodes are connected to each other by graph links that provide the outputs of some nodes to the inputs of others. When a node fires or performs its calculation, the nodes connected to its outputs have their corresponding inputs \"triggered\" or \"marked\". Any node having all inputs triggered/marked/available automatically fires. The graph might be implicit or explicit depending on exactly how reactive programming is implemented. Nodes can be looked at as firing in parallel, but often they are executed serially or with limited parallelism (for example, there may be a few threads executing them). A famous example was the Manchester Dataflow Machine, which (IIRC) used a tagged data architecture to schedule execution of nodes in the graph through one or more execution units. Dataflow computing is fairly well suited to situations in which triggering computations asynchronously giving rise to cascades of computations works better than trying to have execution be governed by a clock (or clocks). Reactive programming imports this \"cascade of execution\" idea and seems to think of the program in a dataflow-like fashion but with the proviso that some of the nodes are hooked to the \"outside world\" and the cascades of execution are triggered when these sensory-like nodes change. Program execution would then look like something analogous to a complex reflex arc. The program may or may not be basically sessile between stimuli or may settle into a basically sessile state between stimuli. \"non-reactive\" programming would be programming with a very different view of the flow of execution and relationship to external inputs. It's likely to be somewhat subjective, since people will likely be tempted to say anything that responds to external inputs \"reacts\" to them. But looking at the spirit of the thing, a program that polls an event queue at a fixed interval and dispatches any events found to functions (or threads) is less reactive (because it only attends to user input at a fixed interval). Again, it's the spirit of the thing here: one can imagine putting a polling implementation with a fast polling interval into a system at a very low level and program in a reactive fashion on top of it.", "summary": "OK, from background knowledge and from reading the Wikipedia page to which you pointed, it appears that reactive programming is something like dataflow computing but with specific external \"stimuli\" triggering a set of nodes to fire and perform their computations. The general idea is this: the program is a directed graph of nodes, each performing some simple computation. These nodes are connected to each other by graph links that provide the outputs of some nodes to the inputs of others. When a node fires or performs its calculation, the nodes connected to its outputs have their corresponding inputs \"triggered\" or \"marked\". Any node having all inputs triggered/marked/available automatically fires. Nodes can be looked at as firing in parallel, but often they are executed serially or with limited parallelism (for example, there may be a few threads executing them). A famous example was the Manchester Dataflow Machine, which (IIRC) used a tagged data architecture to schedule execution of nodes in the graph through one or more execution units. Reactive programming imports this \"cascade of execution\" idea and seems to think of the program in a dataflow-like fashion but with the proviso that some of the nodes are hooked to the \"outside world\" and the cascades of execution are triggered when these sensory-like nodes change. It's likely to be somewhat subjective, since people will likely be tempted to say anything that responds to external inputs \"reacts\" to them. Again, it's the spirit of the thing here: one can imagine putting a polling implementation with a fast polling interval into a system at a very low level and program in a reactive fashion on top of it."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n I did the following to take the image and resize it on the fly. Hope this helps", "output": "I did the following to take the image and resize it on the fly.", "answer": "I did the following to take the image and resize it on the fly. Hope this helps", "summary": "I did the following to take the image and resize it on the fly."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n I had the same problem. I looked into my complied dll with reflector and have seen that the name of the resource was not right. I renamed and it looks fine now.", "output": "I looked into my complied dll with reflector and have seen that the name of the resource was not right. I renamed and it looks fine now.", "answer": "I had the same problem. I looked into my complied dll with reflector and have seen that the name of the resource was not right. I renamed and it looks fine now.", "summary": "I looked into my complied dll with reflector and have seen that the name of the resource was not right. I renamed and it looks fine now."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n If you need such large structures, perhaps you could utilize Memory Mapped Files. This article could prove helpful: http://www.codeproject.com/KB/recipes/MemoryMappedGenericArray.aspx LP, Dejan", "output": "If you need such large structures, perhaps you could utilize Memory Mapped Files.", "answer": "If you need such large structures, perhaps you could utilize Memory Mapped Files. This article could prove helpful: http://www.codeproject.com/KB/recipes/MemoryMappedGenericArray.aspx LP, Dejan", "summary": "If you need such large structures, perhaps you could utilize Memory Mapped Files."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n <code>in</code> wins hands-down, not just in elegance (and not being deprecated;-) but also in performance, e.g. : While the following observation is not always true, you'll notice that usually, in Python, the faster solution is more elegant and Pythonic; that's why <code>-mtimeit</code> is SO helpful -- it's not just about saving a hundred nanoseconds here and there!-)", "output": "<code>in</code> wins hands-down, not just in elegance (and not being deprecated;-) but also in performance, e.g.", "answer": "<code>in</code> wins hands-down, not just in elegance (and not being deprecated;-) but also in performance, e.g. : While the following observation is not always true, you'll notice that usually, in Python, the faster solution is more elegant and Pythonic; that's why <code>-mtimeit</code> is SO helpful -- it's not just about saving a hundred nanoseconds here and there!-)", "summary": "<code>in</code> wins hands-down, not just in elegance (and not being deprecated;-) but also in performance, e.g."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n <code>open('myfile.dat', 'a')</code> works for me, just fine. in py3k your code raises <code>ValueError</code>: in python-2.6 it raises <code>IOError</code>.", "output": "in py3k your code raises <code>ValueError</code>: in python-2.6 it raises <code>IOError</code>.", "answer": "<code>open('myfile.dat', 'a')</code> works for me, just fine. in py3k your code raises <code>ValueError</code>: in python-2.6 it raises <code>IOError</code>.", "summary": "in py3k your code raises <code>ValueError</code>: in python-2.6 it raises <code>IOError</code>."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n You either need to define a default, or do what Sean says and add it without the null constraint until you've filled it in on the existing rows.", "output": "You either need to define a default, or do what Sean says and add it without the null constraint until you've filled it in on the existing rows.", "answer": "You either need to define a default, or do what Sean says and add it without the null constraint until you've filled it in on the existing rows.", "summary": "You either need to define a default, or do what Sean says and add it without the null constraint until you've filled it in on the existing rows."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Try casting the ints to varchar, before adding them to a string:", "output": "Try casting the ints to varchar, before adding them to a string:", "answer": "Try casting the ints to varchar, before adding them to a string:", "summary": "Try casting the ints to varchar, before adding them to a string:"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n See also the http://www.pixelbeat.org/scripts/timeout script the functionality of which has been integrated into newer coreutils", "output": "See also the http://www.pixelbeat.org/scripts/timeout script the functionality of which has been integrated into newer coreutils", "answer": "See also the http://www.pixelbeat.org/scripts/timeout script the functionality of which has been integrated into newer coreutils", "summary": "See also the http://www.pixelbeat.org/scripts/timeout script the functionality of which has been integrated into newer coreutils"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Go to Project __________________________________________ÃÂ» Properties __________________________________________ÃÂ» Java Build Path __________________________________________ÃÂ» Libraries and remove all except the \"Android X.Y\" (in my case Android 1.5). click OK. Go to Project __________________________________________ÃÂ» Clean __________________________________________ÃÂ» Clean projects selected below __________________________________________ÃÂ» select your project and click OK. That should work. It is also possible that you have a JAR file located somewhere in your project folders (I had copied the Admob JAR file into my src folder) and THEN added it as a Java Path Library. It does not show up under the Package Explorer, so you don't notice it, but it does get counted twice, causing the dreaded Dalvik error 1. Another possible reason could be package name conflicts. Suppose you have a package <code>com.abc.xyz</code> and a class named <code>A.java</code> inside this package, and another library project (which is added to the dependency of this project) which contains the same <code>com.abc.xyz.A.java</code>, then you will be getting the exact same error. This means, you have multiple references to the same file <code>A.java</code> and can't properly build it. In other ways this may be occurred if you accidentally or knowingly edit/ add any thing in the class path file manually .In certain cases we may add android.jar path manually to classpath file for generating java doc.On removing the that after javadoc generated code will works fine.Please check this too if any one still occurs.", "output": "Go to Project __________________________________________ÃÂ» Properties __________________________________________ÃÂ» Java Build Path __________________________________________ÃÂ» Libraries and remove all except the \"Android X.Y\" (in my case Android 1.5). click OK. Go to Project __________________________________________ÃÂ» Clean __________________________________________ÃÂ» Clean projects selected below __________________________________________ÃÂ» select your project and click OK. That should work. It is also possible that you have a JAR file located somewhere in your project folders (I had copied the Admob JAR file into my src folder) and THEN added it as a Java Path Library. Another possible reason could be package name conflicts. In other ways this may be occurred if you accidentally or knowingly edit/ add any thing in the class path file manually .In certain cases we may add android.jar path manually to classpath file for generating java doc.On removing the that after javadoc generated code will works fine.Please check this too if any one still occurs.", "answer": "Go to Project __________________________________________ÃÂ» Properties __________________________________________ÃÂ» Java Build Path __________________________________________ÃÂ» Libraries and remove all except the \"Android X.Y\" (in my case Android 1.5). click OK. Go to Project __________________________________________ÃÂ» Clean __________________________________________ÃÂ» Clean projects selected below __________________________________________ÃÂ» select your project and click OK. That should work. It is also possible that you have a JAR file located somewhere in your project folders (I had copied the Admob JAR file into my src folder) and THEN added it as a Java Path Library. It does not show up under the Package Explorer, so you don't notice it, but it does get counted twice, causing the dreaded Dalvik error 1. Another possible reason could be package name conflicts. Suppose you have a package <code>com.abc.xyz</code> and a class named <code>A.java</code> inside this package, and another library project (which is added to the dependency of this project) which contains the same <code>com.abc.xyz.A.java</code>, then you will be getting the exact same error. This means, you have multiple references to the same file <code>A.java</code> and can't properly build it. In other ways this may be occurred if you accidentally or knowingly edit/ add any thing in the class path file manually .In certain cases we may add android.jar path manually to classpath file for generating java doc.On removing the that after javadoc generated code will works fine.Please check this too if any one still occurs.", "summary": "Go to Project __________________________________________ÃÂ» Properties __________________________________________ÃÂ» Java Build Path __________________________________________ÃÂ» Libraries and remove all except the \"Android X.Y\" (in my case Android 1.5). click OK. Go to Project __________________________________________ÃÂ» Clean __________________________________________ÃÂ» Clean projects selected below __________________________________________ÃÂ» select your project and click OK. That should work. It is also possible that you have a JAR file located somewhere in your project folders (I had copied the Admob JAR file into my src folder) and THEN added it as a Java Path Library. Another possible reason could be package name conflicts. In other ways this may be occurred if you accidentally or knowingly edit/ add any thing in the class path file manually .In certain cases we may add android.jar path manually to classpath file for generating java doc.On removing the that after javadoc generated code will works fine.Please check this too if any one still occurs."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Use a trap! BIGBLOCK ...then, whenever you create a temporary file: BIGBLOCK and <code>$temp_foo</code> will be deleted on exit, and the current line number will be printed. (<code>set -e</code> will likewise give you exit-on-error behavior, <A HREF=\"http://mywiki.wooledge.org/BashFAQ/105\" rel=\"noreferrer\">though it comes with serious caveats</A> and weakens code's predictability and portability). You can either let the trap call <code>error</code> for you (in which case it uses the default exit code of 1 and no message) or call it yourself and provide explicit values; for instance: BIGBLOCK will exit with status 2, and give an explicit message.", "output": "Use a trap! ...then, whenever you create a temporary file: BIGBLOCK", "answer": "Use a trap! BIGBLOCK ...then, whenever you create a temporary file: BIGBLOCK and <code>$temp_foo</code> will be deleted on exit, and the current line number will be printed. (<code>set -e</code> will likewise give you exit-on-error behavior, <A HREF=\"http://mywiki.wooledge.org/BashFAQ/105\" rel=\"noreferrer\">though it comes with serious caveats</A> and weakens code's predictability and portability). You can either let the trap call <code>error</code> for you (in which case it uses the default exit code of 1 and no message) or call it yourself and provide explicit values; for instance: BIGBLOCK will exit with status 2, and give an explicit message.", "summary": "Use a trap! ...then, whenever you create a temporary file: BIGBLOCK"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n I like to use the tcomment plugin:http://www.vim.org/scripts/script.php?script_id=1173 I have mapped gc and gcc to comment a line or a highlighted block of code. It detects the file type and works really well.", "output": "I have mapped gc and gcc to comment a line or a highlighted block of code. It detects the file type and works really well.", "answer": "I like to use the tcomment plugin:http://www.vim.org/scripts/script.php?script_id=1173 I have mapped gc and gcc to comment a line or a highlighted block of code. It detects the file type and works really well.", "summary": "I have mapped gc and gcc to comment a line or a highlighted block of code. It detects the file type and works really well."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n you need to convert to char first because converting to int adds those days to 1900-01-01 here are some examples 1900-01-06 00:00:00.000 blows up, because you can't add 20100101 days to 1900-01-01..you go above the limit convert to char first", "output": "you need to convert to char first because converting to int adds those days to 1900-01-01", "answer": "you need to convert to char first because converting to int adds those days to 1900-01-01 here are some examples 1900-01-06 00:00:00.000 blows up, because you can't add 20100101 days to 1900-01-01..you go above the limit convert to char first", "summary": "you need to convert to char first because converting to int adds those days to 1900-01-01"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n The easiest way is to use <code>mysql_result</code>.I copied some of the code below from other answers to save time. BIGBLOCK", "output": "The easiest way is to use <code>mysql_result</code>.I copied some of the code below from other answers to save time. BIGBLOCK", "answer": "The easiest way is to use <code>mysql_result</code>.I copied some of the code below from other answers to save time. BIGBLOCK", "summary": "The easiest way is to use <code>mysql_result</code>.I copied some of the code below from other answers to save time. BIGBLOCK"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n IDs are unique. Classes aren't. Elements can also have multiple classes. Also classes can be dynamically added and removed to an element. Anywhere you can use an ID you could use a class instead. The reverse is not true. The convention seems to be to use IDs for page elements that are on every page (like \"navbar\" or \"menu\") and classes for everything else but this is only convention and you'll find wide variance in usage. One other difference is that for form input elements, the <code>&lt;label&gt;</code> element references a field by ID so you need to use IDs if you're going to use <code>&lt;label&gt;</code>. is an accessibility thing and you really should use it. In years gone by IDs were also preferred because they're easily accessible in Javascript (getElementById). With the advent of jQuery and other Javascript frameworks this is pretty much a non-issue now.", "output": "IDs are unique. Classes aren't. Anywhere you can use an ID you could use a class instead. The reverse is not true.", "answer": "IDs are unique. Classes aren't. Elements can also have multiple classes. Also classes can be dynamically added and removed to an element. Anywhere you can use an ID you could use a class instead. The reverse is not true. The convention seems to be to use IDs for page elements that are on every page (like \"navbar\" or \"menu\") and classes for everything else but this is only convention and you'll find wide variance in usage. One other difference is that for form input elements, the <code>&lt;label&gt;</code> element references a field by ID so you need to use IDs if you're going to use <code>&lt;label&gt;</code>. is an accessibility thing and you really should use it. In years gone by IDs were also preferred because they're easily accessible in Javascript (getElementById). With the advent of jQuery and other Javascript frameworks this is pretty much a non-issue now.", "summary": "IDs are unique. Classes aren't. Anywhere you can use an ID you could use a class instead. The reverse is not true."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n As you've already identified, you cannot save from within a <code>foreach</code> that is still drawing from the database via an active reader. Calling <code>ToList()</code> or <code>ToArray()</code> is fine for small data sets, but when you have thousands of rows, you will be consuming a large amount of memory. It's better to load the rows in chunks. Given the above extension methods, you can write your query like this: The queryable object you call this method on must be ordered. This is because Entity Framework only supports <code>IQueryable&lt;T&gt;.Skip(int)</code> on ordered queries, which makes sense when you consider that multiple queries for different ranges require the ordering to be stable. If the ordering isn't important to you, just order by primary key as that's likely to have a clustered index. This version will query the database in batches of 100. Note that <code>SaveChanges()</code> is called for each entity. If you want to improve your throughput dramatically, you should call <code>SaveChanges()</code> less frequently. Use code like this instead: This results in 100 times fewer database update calls. Of course each of those calls takes longer to complete, but you still come out way ahead in the end. Your mileage may vary, but this was worlds faster for me. And it gets around the exception you were seeing. EDIT I revisited this question after running SQL Profiler and updated a few things to improve performance. For anyone who is interested, here is some sample SQL that shows what is created by the DB. The first loop doesn't need to skip anything, so is simpler. Subsequent calls need to skip previous chunks of results, so introduces usage of <code>row_number</code>:", "output": "As you've already identified, you cannot save from within a <code>foreach</code> that is still drawing from the database via an active reader.", "answer": "As you've already identified, you cannot save from within a <code>foreach</code> that is still drawing from the database via an active reader. Calling <code>ToList()</code> or <code>ToArray()</code> is fine for small data sets, but when you have thousands of rows, you will be consuming a large amount of memory. It's better to load the rows in chunks. Given the above extension methods, you can write your query like this: The queryable object you call this method on must be ordered. This is because Entity Framework only supports <code>IQueryable&lt;T&gt;.Skip(int)</code> on ordered queries, which makes sense when you consider that multiple queries for different ranges require the ordering to be stable. If the ordering isn't important to you, just order by primary key as that's likely to have a clustered index. This version will query the database in batches of 100. Note that <code>SaveChanges()</code> is called for each entity. If you want to improve your throughput dramatically, you should call <code>SaveChanges()</code> less frequently. Use code like this instead: This results in 100 times fewer database update calls. Of course each of those calls takes longer to complete, but you still come out way ahead in the end. Your mileage may vary, but this was worlds faster for me. And it gets around the exception you were seeing. EDIT I revisited this question after running SQL Profiler and updated a few things to improve performance. For anyone who is interested, here is some sample SQL that shows what is created by the DB. The first loop doesn't need to skip anything, so is simpler. Subsequent calls need to skip previous chunks of results, so introduces usage of <code>row_number</code>:", "summary": "As you've already identified, you cannot save from within a <code>foreach</code> that is still drawing from the database via an active reader."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n See How to find event listeners on a DOM node. In a nutshell, assuming at some point an event handler is attached to your element (eg): <code>$('#foo').click(function() { console.log('clicked!') });</code> You inspect it like so: <li>jQuery 1.3.x BIGBLOCK <li>jQuery 1.4.x BIGBLOCK See <code>jQuery.fn.data</code> (where jQuery stores your handler internally). <li>jQuery 1.8.x BIGBLOCK", "output": "<li>jQuery 1.3.x BIGBLOCK <li>jQuery 1.4.x BIGBLOCK <li>jQuery 1.8.x BIGBLOCK", "answer": "See How to find event listeners on a DOM node. In a nutshell, assuming at some point an event handler is attached to your element (eg): <code>$('#foo').click(function() { console.log('clicked!') });</code> You inspect it like so: <li>jQuery 1.3.x BIGBLOCK <li>jQuery 1.4.x BIGBLOCK See <code>jQuery.fn.data</code> (where jQuery stores your handler internally). <li>jQuery 1.8.x BIGBLOCK", "summary": "<li>jQuery 1.3.x BIGBLOCK <li>jQuery 1.4.x BIGBLOCK <li>jQuery 1.8.x BIGBLOCK"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n In a thread on <code>comp.lang.java.help</code>, Hunter Gratzner gives some arguments against the presence of a <code>Pair</code> construct in Java. The main argument is that a class <code>Pair</code> doesn't convey any semantics about the relationship between the two values (how do you know what \"first\" and \"second\" mean ? ). A better practice is to write a very simple class, like the one Mike proposed, for each application you would have made of the <code>Pair</code> class. <code>Map.Entry</code> is an example of a pair that carry its meaning in its name. To sum up, in my opinion it is better to have a class <code>Position(x,y)</code>, a class <code>Range(begin,end)</code> and a class <code>Entry(key,value)</code> rather than a generic <code>Pair(first,second)</code> that doesn't tell me anything about what it's supposed to do.", "output": "A better practice is to write a very simple class, like the one Mike proposed, for each application you would have made of the <code>Pair</code> class.", "answer": "In a thread on <code>comp.lang.java.help</code>, Hunter Gratzner gives some arguments against the presence of a <code>Pair</code> construct in Java. The main argument is that a class <code>Pair</code> doesn't convey any semantics about the relationship between the two values (how do you know what \"first\" and \"second\" mean ? ). A better practice is to write a very simple class, like the one Mike proposed, for each application you would have made of the <code>Pair</code> class. <code>Map.Entry</code> is an example of a pair that carry its meaning in its name. To sum up, in my opinion it is better to have a class <code>Position(x,y)</code>, a class <code>Range(begin,end)</code> and a class <code>Entry(key,value)</code> rather than a generic <code>Pair(first,second)</code> that doesn't tell me anything about what it's supposed to do.", "summary": "A better practice is to write a very simple class, like the one Mike proposed, for each application you would have made of the <code>Pair</code> class."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Project Euler is mentioned in the tags and many of the problems in it require checking numbers >> 2^64. Most of the optimizations mentioned above don't work easily when you are working with an 80 byte buffer. I used java BigInteger and a slightly modified version of Newton's method, one that works better with integers. The problem was that exact squares n^2 converged to (n-1) instead of n because n^2-1 = (n-1)(n+1) and the final error was just one step below the final divisor and the algorithm terminated. It was easy to fix by adding one to the original argument before computing the error. (Add two for cube roots, etc.) One nice attribute of this algorithm is that you can immediately tell if the number is a perfect square - the final error (not correction) in Newton's method will be zero. A simple modification also lets you quickly calculate floor(sqrt(x)) instead of the closest integer. This is handy with several Euler problems.", "output": "I used java BigInteger and a slightly modified version of Newton's method, one that works better with integers. The problem was that exact squares n^2 converged to (n-1) instead of n because n^2-1 = (n-1)(n+1) and the final error was just one step below the final divisor and the algorithm terminated. It was easy to fix by adding one to the original argument before computing the error. A simple modification also lets you quickly calculate floor(sqrt(x)) instead of the closest integer.", "answer": "Project Euler is mentioned in the tags and many of the problems in it require checking numbers >> 2^64. Most of the optimizations mentioned above don't work easily when you are working with an 80 byte buffer. I used java BigInteger and a slightly modified version of Newton's method, one that works better with integers. The problem was that exact squares n^2 converged to (n-1) instead of n because n^2-1 = (n-1)(n+1) and the final error was just one step below the final divisor and the algorithm terminated. It was easy to fix by adding one to the original argument before computing the error. (Add two for cube roots, etc.) One nice attribute of this algorithm is that you can immediately tell if the number is a perfect square - the final error (not correction) in Newton's method will be zero. A simple modification also lets you quickly calculate floor(sqrt(x)) instead of the closest integer. This is handy with several Euler problems.", "summary": "I used java BigInteger and a slightly modified version of Newton's method, one that works better with integers. The problem was that exact squares n^2 converged to (n-1) instead of n because n^2-1 = (n-1)(n+1) and the final error was just one step below the final divisor and the algorithm terminated. It was easy to fix by adding one to the original argument before computing the error. A simple modification also lets you quickly calculate floor(sqrt(x)) instead of the closest integer."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n You can connect to a database with <code>\\c &lt;database&gt;</code> or <code>\\connect &lt;database&gt;</code>.", "output": "You can connect to a database with <code>\\c &lt;database&gt;</code> or <code>\\connect &lt;database&gt;</code>.", "answer": "You can connect to a database with <code>\\c &lt;database&gt;</code> or <code>\\connect &lt;database&gt;</code>.", "summary": "You can connect to a database with <code>\\c &lt;database&gt;</code> or <code>\\connect &lt;database&gt;</code>."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Another function, not by me but found on the web and refined it a bit: Just two things that come into my mind: What about people from countries that do not use the gregorian calendar? DateTime.Now is in the server-specific culture i think. I have absolutely 0 knowledge about actually working with Asian calendars and I do not know if there is an easy way to convert dates between calendars, but just in case you're wondering about those chinese guys from the year 4660 :-)", "output": "Another function, not by me but found on the web and refined it a bit:", "answer": "Another function, not by me but found on the web and refined it a bit: Just two things that come into my mind: What about people from countries that do not use the gregorian calendar? DateTime.Now is in the server-specific culture i think. I have absolutely 0 knowledge about actually working with Asian calendars and I do not know if there is an easy way to convert dates between calendars, but just in case you're wondering about those chinese guys from the year 4660 :-)", "summary": "Another function, not by me but found on the web and refined it a bit:"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Inversion of Control is what you get when your program callbacks, e.g. like a gui program. For example, in an old school menu, you might have: thereby controlling the flow of user interaction. In a GUI program or somesuch, instead we say So now control is inverted... instead of the computer accepting user input in a fixed order, the user controls the order in which the data is entered, and when the data is saved in the database. Basically, anything with an event loop, callbacks, or execute triggers falls into this category.", "output": "Inversion of Control is what you get when your program callbacks, e.g. Basically, anything with an event loop, callbacks, or execute triggers falls into this category.", "answer": "Inversion of Control is what you get when your program callbacks, e.g. like a gui program. For example, in an old school menu, you might have: thereby controlling the flow of user interaction. In a GUI program or somesuch, instead we say So now control is inverted... instead of the computer accepting user input in a fixed order, the user controls the order in which the data is entered, and when the data is saved in the database. Basically, anything with an event loop, callbacks, or execute triggers falls into this category.", "summary": "Inversion of Control is what you get when your program callbacks, e.g. Basically, anything with an event loop, callbacks, or execute triggers falls into this category."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n GNU coreutils has it in lib/base64. It's a little bloated but deals with stuff like EBCDIC. You can also play around on your own, e.g., BIGBLOCK Know ye all persons by these presents that you should not confuse \"playing around on your own\" with \"implementing a standard.\" Yeesh.", "output": "GNU coreutils has it in lib/base64. You can also play around on your own, e.g., BIGBLOCK", "answer": "GNU coreutils has it in lib/base64. It's a little bloated but deals with stuff like EBCDIC. You can also play around on your own, e.g., BIGBLOCK Know ye all persons by these presents that you should not confuse \"playing around on your own\" with \"implementing a standard.\" Yeesh.", "summary": "GNU coreutils has it in lib/base64. You can also play around on your own, e.g., BIGBLOCK"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n You should be able to override Equals on person to actually do Equals on Person.id. This ought to result in the behavior you're after.", "output": "You should be able to override Equals on person to actually do Equals on Person.id.", "answer": "You should be able to override Equals on person to actually do Equals on Person.id. This ought to result in the behavior you're after.", "summary": "You should be able to override Equals on person to actually do Equals on Person.id."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Use the <code>Bit</code> datatype. It has values 1 and 0 when dealing with it in native T-SQL", "output": "Use the <code>Bit</code> datatype.", "answer": "Use the <code>Bit</code> datatype. It has values 1 and 0 when dealing with it in native T-SQL", "summary": "Use the <code>Bit</code> datatype."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n If you already know the line numbers, then <code>n,ms/# //</code> would work.", "output": "If you already know the line numbers, then <code>n,ms/# //</code> would work.", "answer": "If you already know the line numbers, then <code>n,ms/# //</code> would work.", "summary": "If you already know the line numbers, then <code>n,ms/# //</code> would work."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n I used this script which I have put on my blog (How-to generate Insert statement procedures on sql server). So far has worked for me, although they might be bugs I have not discovered yet .", "output": "I used this script which I have put on my blog (How-to generate Insert statement procedures on sql server).", "answer": "I used this script which I have put on my blog (How-to generate Insert statement procedures on sql server). So far has worked for me, although they might be bugs I have not discovered yet .", "summary": "I used this script which I have put on my blog (How-to generate Insert statement procedures on sql server)."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n private - can be accessed from WITHIN the class only protected - can be accessed from WITHIN the class and INHERITING classes public - can be accessed from code OUTSIDE the class as well This applies to functions as well as variables.", "output": "private - can be accessed from WITHIN the class only protected - can be accessed from WITHIN the class and INHERITING classes public - can be accessed from code OUTSIDE the class as well", "answer": "private - can be accessed from WITHIN the class only protected - can be accessed from WITHIN the class and INHERITING classes public - can be accessed from code OUTSIDE the class as well This applies to functions as well as variables.", "summary": "private - can be accessed from WITHIN the class only protected - can be accessed from WITHIN the class and INHERITING classes public - can be accessed from code OUTSIDE the class as well"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n I can't speak to python's particular implementation of lambda, but in general lambda functions are really handy. They're a core technique (maybe even THE technique) of functional programming, and they're also very useuful in object-oriented programs. For certain types of problems, they're the best solution, so certainly shouldn't be forgotten! I suggest you read up on closures and the map function (that links to python docs, but it exists in nearly every language that supports functional constructs) to see why it's useful.", "output": "They're a core technique (maybe even THE technique) of functional programming, and they're also very useuful in object-oriented programs. I suggest you read up on closures and the map function (that links to python docs, but it exists in nearly every language that supports functional constructs) to see why it's useful.", "answer": "I can't speak to python's particular implementation of lambda, but in general lambda functions are really handy. They're a core technique (maybe even THE technique) of functional programming, and they're also very useuful in object-oriented programs. For certain types of problems, they're the best solution, so certainly shouldn't be forgotten! I suggest you read up on closures and the map function (that links to python docs, but it exists in nearly every language that supports functional constructs) to see why it's useful.", "summary": "They're a core technique (maybe even THE technique) of functional programming, and they're also very useuful in object-oriented programs. I suggest you read up on closures and the map function (that links to python docs, but it exists in nearly every language that supports functional constructs) to see why it's useful."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Note that in the case of reflection, you get an <code>NoSuchMethodException</code>, while with non-reflective code, you get <code>NoSuchMethodError</code>. I tend to go looking in very different places when confronted with one versus the other.", "output": "Note that in the case of reflection, you get an <code>NoSuchMethodException</code>, while with non-reflective code, you get <code>NoSuchMethodError</code>.", "answer": "Note that in the case of reflection, you get an <code>NoSuchMethodException</code>, while with non-reflective code, you get <code>NoSuchMethodError</code>. I tend to go looking in very different places when confronted with one versus the other.", "summary": "Note that in the case of reflection, you get an <code>NoSuchMethodException</code>, while with non-reflective code, you get <code>NoSuchMethodError</code>."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n A really easy way to understand this is to place the word \"loop\" after each of the keywords. The terms now make sense if they are just read like everyday phrases. <strong><code>break</code></strong> loop - looping is broken and stops. <strong><code>continue</code></strong> loop - loop continues to execute with the next iteration.", "output": "A really easy way to understand this is to place the word \"loop\" after each of the keywords. <strong><code>break</code></strong> loop - looping is broken and stops. <strong><code>continue</code></strong> loop - loop continues to execute with the next iteration.", "answer": "A really easy way to understand this is to place the word \"loop\" after each of the keywords. The terms now make sense if they are just read like everyday phrases. <strong><code>break</code></strong> loop - looping is broken and stops. <strong><code>continue</code></strong> loop - loop continues to execute with the next iteration.", "summary": "A really easy way to understand this is to place the word \"loop\" after each of the keywords. <strong><code>break</code></strong> loop - looping is broken and stops. <strong><code>continue</code></strong> loop - loop continues to execute with the next iteration."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n There's an element in web.config to configure the max size of the uploaded file:", "output": "There's an element in web.config to configure the max size of the uploaded file:", "answer": "There's an element in web.config to configure the max size of the uploaded file:", "summary": "There's an element in web.config to configure the max size of the uploaded file:"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Monopoly is the devil and singletons with non-readonly/mutable state are the 'real' problem... After reading Singletons are Pathological Liars as suggested in jason's answer I came across this little tidbit that provides the best presented example of how singletons are often misused. Global is bad because:   a. It causes namespace conflict   b. It exposes the state in a unwarranted fashion When it comes to Singletons   a. The explicit OO way of calling them, prevents the conflicts, so point a. is not an issue   b. Singletons without state are (like factories) are not a problem. Singletons with state can again fall in two categories, those which are immutable or write once and read many (config/property files). These are not bad. Mutable Singletons, which are kind of reference holders are the ones which you are speaking of. In the last statement he's referring to the blog's concept of 'singletons are liars'. How does this apply to Monopoly? To start a game of monopoly, first: we establish the rules first so everybody is on the same page everybody is given an equal start at the beginning of the game only one set of rules is presented to avoid confusion the rules aren't allowed to change throughout the game Now, for anybody who hasn't really played monopoly, these standards are ideal at best. A defeat in monopoly is hard to swallow because, monopoly is about money, if you lose you have to painstakingly watch the rest of the players finish the game, and losses are usually swift and crushing. So, the rules usually get twisted at some point to serve the self-interest of some of the players at the expense of the others. So you're playing monopoly with friends Bob, Joe, and Ed. You're swiftly building your empire and consuming market share at an exponential rate. Your opponents are weakening and you start to smell blood (figuratively). Your buddy Bob put all of his money into gridlocking as many low-value properties as possible but his isn't receiving a high return on investment the way he expected. Bob, as a stroke of bad luck, lands on your Boardwalk and is excised from the game. Now the game goes from friendly dice-rolling to serious business. Bob has been made the example of failure and Joe and Ed don't want to end up like 'that guy'. So, being the leading player you, all of a sudden, become the enemy. Joe and Ed start practicing under-the-table trades, behind-the-back money injections, undervalued house-swapping and generally anything to weaken you as a player until one of them rises to the top. Then, instead of one of them winning, the process starts all over. All of a sudden, a finite set of rules becomes a moving target and the game degenerates into the type of social interactions that would make up the foundation of every high-rated reality TV show since Survivor. Why, because the rules are changing and there's no consensus on how/why/what they're supposed to represent, and more importantly, there's no one person making the decisions. Every player in the game, at that point, is making his/her own rules and chaos ensues until two of the players are too tired to keep up the charade and slowly give up. So, if a rulebook for a game accurately represented a singleton, the monopoly rulebook would be an example of abuse. How does this apply to programming? Aside from all of the obvious thread-safety and synchronization issues that mutable singletons present... If you have one set of data, that is capable of being read/manipulated by multiple different sources concurrently and exists during the lifetime of the application execution, it's probably a good time to step back and ask \"am I using the right type of data structure here\". Personally, I have seen a programmer abuse a singleton by using it as some sort of twisted cross-thread database store within an application. Having worked on the code directly, I can attest that it was a slow (because of all the thread locks needed to make it thread-safe) and a nightmare to work on (because of the unpredictable/intermittent nature of synchronization bugs), and nearly impossible to test under 'production' conditions. Sure, a system could have been developed using polling/signaling to overcome some of the performance issues but that wouldn't solve the issues with testing and, why bother when a 'real' database can already accomplish the same functionality in a much more robust/scalable manner. A Singleton is only an option if you need what a singleton provides. A write-one read-only instance of an object. That same rule should cascade to the object's properties/members as well.", "output": "Monopoly is the devil and singletons with non-readonly/mutable state are the 'real' problem...", "answer": "Monopoly is the devil and singletons with non-readonly/mutable state are the 'real' problem... After reading Singletons are Pathological Liars as suggested in jason's answer I came across this little tidbit that provides the best presented example of how singletons are often misused. Global is bad because:   a. It causes namespace conflict   b. It exposes the state in a unwarranted fashion When it comes to Singletons   a. The explicit OO way of calling them, prevents the conflicts, so point a. is not an issue   b. Singletons without state are (like factories) are not a problem. Singletons with state can again fall in two categories, those which are immutable or write once and read many (config/property files). These are not bad. Mutable Singletons, which are kind of reference holders are the ones which you are speaking of. In the last statement he's referring to the blog's concept of 'singletons are liars'. How does this apply to Monopoly? To start a game of monopoly, first: we establish the rules first so everybody is on the same page everybody is given an equal start at the beginning of the game only one set of rules is presented to avoid confusion the rules aren't allowed to change throughout the game Now, for anybody who hasn't really played monopoly, these standards are ideal at best. A defeat in monopoly is hard to swallow because, monopoly is about money, if you lose you have to painstakingly watch the rest of the players finish the game, and losses are usually swift and crushing. So, the rules usually get twisted at some point to serve the self-interest of some of the players at the expense of the others. So you're playing monopoly with friends Bob, Joe, and Ed. You're swiftly building your empire and consuming market share at an exponential rate. Your opponents are weakening and you start to smell blood (figuratively). Your buddy Bob put all of his money into gridlocking as many low-value properties as possible but his isn't receiving a high return on investment the way he expected. Bob, as a stroke of bad luck, lands on your Boardwalk and is excised from the game. Now the game goes from friendly dice-rolling to serious business. Bob has been made the example of failure and Joe and Ed don't want to end up like 'that guy'. So, being the leading player you, all of a sudden, become the enemy. Joe and Ed start practicing under-the-table trades, behind-the-back money injections, undervalued house-swapping and generally anything to weaken you as a player until one of them rises to the top. Then, instead of one of them winning, the process starts all over. All of a sudden, a finite set of rules becomes a moving target and the game degenerates into the type of social interactions that would make up the foundation of every high-rated reality TV show since Survivor. Why, because the rules are changing and there's no consensus on how/why/what they're supposed to represent, and more importantly, there's no one person making the decisions. Every player in the game, at that point, is making his/her own rules and chaos ensues until two of the players are too tired to keep up the charade and slowly give up. So, if a rulebook for a game accurately represented a singleton, the monopoly rulebook would be an example of abuse. How does this apply to programming? Aside from all of the obvious thread-safety and synchronization issues that mutable singletons present... If you have one set of data, that is capable of being read/manipulated by multiple different sources concurrently and exists during the lifetime of the application execution, it's probably a good time to step back and ask \"am I using the right type of data structure here\". Personally, I have seen a programmer abuse a singleton by using it as some sort of twisted cross-thread database store within an application. Having worked on the code directly, I can attest that it was a slow (because of all the thread locks needed to make it thread-safe) and a nightmare to work on (because of the unpredictable/intermittent nature of synchronization bugs), and nearly impossible to test under 'production' conditions. Sure, a system could have been developed using polling/signaling to overcome some of the performance issues but that wouldn't solve the issues with testing and, why bother when a 'real' database can already accomplish the same functionality in a much more robust/scalable manner. A Singleton is only an option if you need what a singleton provides. A write-one read-only instance of an object. That same rule should cascade to the object's properties/members as well.", "summary": "Monopoly is the devil and singletons with non-readonly/mutable state are the 'real' problem..."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n <code>int</code> <em>can't</em> be null, but <code>Integer</code> <em>can</em>. You need to be careful when unboxing null Integers since this can cause a lot of confusion and head scratching! e.g. this: BIGBLOCK will give you a <code>NullPointerException</code>, despite object not being null! To follow up on your question, if you want to indicate the <em>absence</em> of a value, I would investigate <code>java.util.Optional&lt;Integer&gt;</code>", "output": "<code>int</code> <em>can't</em> be null, but <code>Integer</code> <em>can</em>.", "answer": "<code>int</code> <em>can't</em> be null, but <code>Integer</code> <em>can</em>. You need to be careful when unboxing null Integers since this can cause a lot of confusion and head scratching! e.g. this: BIGBLOCK will give you a <code>NullPointerException</code>, despite object not being null! To follow up on your question, if you want to indicate the <em>absence</em> of a value, I would investigate <code>java.util.Optional&lt;Integer&gt;</code>", "summary": "<code>int</code> <em>can't</em> be null, but <code>Integer</code> <em>can</em>."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n See Wikipedia Singleton_pattern It is also considered an anti-pattern by some people, who feel that it is overly used, introducing unnecessary limitations in situations where a sole instance of a class is not actually required. [1][2][3][4] References (only relevant references from the article) ^ Alex Miller. Patterns I hate #1: Singleton, July 2007 ^ Scott Densmore. Why singletons are evil, May 2004 ^ Steve Yegge. Singletons considered stupid, September 2004 ^ J.B. Rainsberger, IBM. Use your singletons wisely, July 2001", "output": "It is also considered an anti-pattern by some people, who feel that it is overly used, introducing unnecessary limitations in situations where a sole instance of a class is not actually required.", "answer": "See Wikipedia Singleton_pattern It is also considered an anti-pattern by some people, who feel that it is overly used, introducing unnecessary limitations in situations where a sole instance of a class is not actually required. [1][2][3][4] References (only relevant references from the article) ^ Alex Miller. Patterns I hate #1: Singleton, July 2007 ^ Scott Densmore. Why singletons are evil, May 2004 ^ Steve Yegge. Singletons considered stupid, September 2004 ^ J.B. Rainsberger, IBM. Use your singletons wisely, July 2001", "summary": "It is also considered an anti-pattern by some people, who feel that it is overly used, introducing unnecessary limitations in situations where a sole instance of a class is not actually required."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n You can combine an alias and a script, provided that the script echos the destination path. Note that those are backticks surrounding the script name.&nbsp; For example, your script could be The advantage with this technique is that the script could take any number of command line parameters and emit different destinations calculated by possibly complex logic.", "output": "You can combine an alias and a script,", "answer": "You can combine an alias and a script, provided that the script echos the destination path. Note that those are backticks surrounding the script name.&nbsp; For example, your script could be The advantage with this technique is that the script could take any number of command line parameters and emit different destinations calculated by possibly complex logic.", "summary": "You can combine an alias and a script,"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Static methods are treated as global by the JVM, there are not bound to an object instance at all. It could conceptually be possible if you could call static methods from class objects (like in languages like Smalltalk) but it's not the case in Java. <strong>EDIT</strong> You can <em>overload</em> static method, that's ok. But you can not <em>override</em> a static method, because class are no first-class object. You can use reflection to get the class of an object at run-time, but the object that you get does not parallel the class hierarchy. BIGBLOCK You can reflect over the classes, but it stops there. You don't invoke a static method by using <code>clazz1.staticMethod()</code>, but using <code>MyClass.staticMethod()</code>. A static method is not bound to an object and there is hence no notion of <code>this</code> nor <code>super</code> in a static method. A static method is a global function; as a consequence there is also no notion of polymorphism and, therefore, method overriding makes no sense. But this could be possible if <code>MyClass</code> was an object at run-time on which you invoke a method, as in Smalltalk (or maybe JRuby as one comment suggest, but I know nothing of JRuby). Oh yeah... one more thing. You can invoke a static method through an object <code>obj1.staticMethod()</code> but that really syntactic sugar for <code>MyClass.staticMethod()</code> and should be avoided. It usually raises a warning in modern IDE. I don't know why they ever allowed this shortcut.", "output": "You can <em>overload</em> static method, that's ok. But you can not <em>override</em> a static method, because class are no first-class object. You can use reflection to get the class of an object at run-time, but the object that you get does not parallel the class hierarchy. A static method is a global function; as a consequence there is also no notion of polymorphism and, therefore, method overriding makes no sense. You can invoke a static method through an object <code>obj1.staticMethod()</code> but that really syntactic sugar for <code>MyClass.staticMethod()</code> and should be avoided.", "answer": "Static methods are treated as global by the JVM, there are not bound to an object instance at all. It could conceptually be possible if you could call static methods from class objects (like in languages like Smalltalk) but it's not the case in Java. <strong>EDIT</strong> You can <em>overload</em> static method, that's ok. But you can not <em>override</em> a static method, because class are no first-class object. You can use reflection to get the class of an object at run-time, but the object that you get does not parallel the class hierarchy. BIGBLOCK You can reflect over the classes, but it stops there. You don't invoke a static method by using <code>clazz1.staticMethod()</code>, but using <code>MyClass.staticMethod()</code>. A static method is not bound to an object and there is hence no notion of <code>this</code> nor <code>super</code> in a static method. A static method is a global function; as a consequence there is also no notion of polymorphism and, therefore, method overriding makes no sense. But this could be possible if <code>MyClass</code> was an object at run-time on which you invoke a method, as in Smalltalk (or maybe JRuby as one comment suggest, but I know nothing of JRuby). Oh yeah... one more thing. You can invoke a static method through an object <code>obj1.staticMethod()</code> but that really syntactic sugar for <code>MyClass.staticMethod()</code> and should be avoided. It usually raises a warning in modern IDE. I don't know why they ever allowed this shortcut.", "summary": "You can <em>overload</em> static method, that's ok. But you can not <em>override</em> a static method, because class are no first-class object. You can use reflection to get the class of an object at run-time, but the object that you get does not parallel the class hierarchy. A static method is a global function; as a consequence there is also no notion of polymorphism and, therefore, method overriding makes no sense. You can invoke a static method through an object <code>obj1.staticMethod()</code> but that really syntactic sugar for <code>MyClass.staticMethod()</code> and should be avoided."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Ordered lists of element (unique or not) Conform to Java's interface named <code>List</code> Can be accessed by index implemetented using LinkedList ArrayList Lists of unique elements: Conform to Java's interface named <code>Set</code> Can not be accessed by index implemetented using HashSet (unordered) LinkedHashSet (ordered) TreeSet (sorted by natural order or by provided comparator) Both interfaces <code>Set</code> and <code>List</code> conform to Java's interface named <code>Collection</code>", "output": "Ordered lists of element (unique or not) Lists of unique elements:", "answer": "Ordered lists of element (unique or not) Conform to Java's interface named <code>List</code> Can be accessed by index implemetented using LinkedList ArrayList Lists of unique elements: Conform to Java's interface named <code>Set</code> Can not be accessed by index implemetented using HashSet (unordered) LinkedHashSet (ordered) TreeSet (sorted by natural order or by provided comparator) Both interfaces <code>Set</code> and <code>List</code> conform to Java's interface named <code>Collection</code>", "summary": "Ordered lists of element (unique or not) Lists of unique elements:"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n My compiler will print out 9876543210 when I run this code. As expected. The <code>while( x-- &gt; 0 )</code> actually means <code>while( x &gt; 0)</code>. The <code>x--</code> post decrements <code>x</code>. is a different way of writing the same thing. It is nice that the original looks like \"while x goes to 0\" though.", "output": "The <code>while( x-- &gt; 0 )</code> actually means <code>while( x &gt; 0)</code>. The <code>x--</code> post decrements <code>x</code>. is a different way of writing the same thing.", "answer": "My compiler will print out 9876543210 when I run this code. As expected. The <code>while( x-- &gt; 0 )</code> actually means <code>while( x &gt; 0)</code>. The <code>x--</code> post decrements <code>x</code>. is a different way of writing the same thing. It is nice that the original looks like \"while x goes to 0\" though.", "summary": "The <code>while( x-- &gt; 0 )</code> actually means <code>while( x &gt; 0)</code>. The <code>x--</code> post decrements <code>x</code>. is a different way of writing the same thing."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Nice articles on the topic: MUTEX VS. SEMAPHORES __________________________ÃÂ¢________________________________ PART 1: SEMAPHORES MUTEX VS. SEMAPHORES __________________________ÃÂ¢________________________________ PART 2: THE MUTEX MUTEX VS. SEMAPHORES __________________________ÃÂ¢________________________________ PART 3 (FINAL PART): MUTUAL EXCLUSION PROBLEMS From part 2: The mutex is similar to the principles   of the binary semaphore with one   significant difference: the principle   of ownership. Ownership is the simple   concept that when a task locks   (acquires) a mutex only it can unlock   (release) it. If a task tries to   unlock a mutex it hasn__________________________ÃÂ¢________________________________t locked (thus   doesn__________________________ÃÂ¢________________________________t own) then an error condition   is encountered and, most importantly,   the mutex is not unlocked. If the   mutual exclusion object doesn't have   ownership then, irrelevant of what it   is called, it is not a mutex.", "output": "The mutex is similar to the principles   of the binary semaphore with one   significant difference: the principle   of ownership.", "answer": "Nice articles on the topic: MUTEX VS. SEMAPHORES __________________________ÃÂ¢________________________________ PART 1: SEMAPHORES MUTEX VS. SEMAPHORES __________________________ÃÂ¢________________________________ PART 2: THE MUTEX MUTEX VS. SEMAPHORES __________________________ÃÂ¢________________________________ PART 3 (FINAL PART): MUTUAL EXCLUSION PROBLEMS From part 2: The mutex is similar to the principles   of the binary semaphore with one   significant difference: the principle   of ownership. Ownership is the simple   concept that when a task locks   (acquires) a mutex only it can unlock   (release) it. If a task tries to   unlock a mutex it hasn__________________________ÃÂ¢________________________________t locked (thus   doesn__________________________ÃÂ¢________________________________t own) then an error condition   is encountered and, most importantly,   the mutex is not unlocked. If the   mutual exclusion object doesn't have   ownership then, irrelevant of what it   is called, it is not a mutex.", "summary": "The mutex is similar to the principles   of the binary semaphore with one   significant difference: the principle   of ownership."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n The result of a modulo division is the remainder of an integer division of the given numbers. That means: BIGBLOCK Other examples: BIGBLOCK", "output": "The result of a modulo division is the remainder of an integer division of the given numbers.", "answer": "The result of a modulo division is the remainder of an integer division of the given numbers. That means: BIGBLOCK Other examples: BIGBLOCK", "summary": "The result of a modulo division is the remainder of an integer division of the given numbers."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n No need to use commons--Sun ships a base64 encoder with Java. You can import it as such: And then use it like this: Where <code>encodedBytes</code> is either a <code>java.lang.String</code> or a <code>java.io.InputStream</code>. Just beware that the <code>sun. *</code> classes are not \"officially supported\" by Sun. EDIT: Who knew this would be the most controversial answer I'd ever post? I do know that sun. * packages are not supported or guaranteed to continue existing, and I do know about Commons and use it all the time. However, the poster asked for a class that that was \"included with Sun Java 6,\" and that's what I was trying to answer. I agree that Commons is the best way to go in general. EDIT 2: As amir75 points out below, Java 6+ ships with JAXB, which contains supported code to encode/decode Base64. Please see Jeremy Ross' answer below.", "output": "You can import it as such: And then use it like this: Where <code>encodedBytes</code> is either a <code>java.lang.String</code> or a <code>java.io.InputStream</code>.", "answer": "No need to use commons--Sun ships a base64 encoder with Java. You can import it as such: And then use it like this: Where <code>encodedBytes</code> is either a <code>java.lang.String</code> or a <code>java.io.InputStream</code>. Just beware that the <code>sun. *</code> classes are not \"officially supported\" by Sun. EDIT: Who knew this would be the most controversial answer I'd ever post? I do know that sun. * packages are not supported or guaranteed to continue existing, and I do know about Commons and use it all the time. However, the poster asked for a class that that was \"included with Sun Java 6,\" and that's what I was trying to answer. I agree that Commons is the best way to go in general. EDIT 2: As amir75 points out below, Java 6+ ships with JAXB, which contains supported code to encode/decode Base64. Please see Jeremy Ross' answer below.", "summary": "You can import it as such: And then use it like this: Where <code>encodedBytes</code> is either a <code>java.lang.String</code> or a <code>java.io.InputStream</code>."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n If you are writing a webapp, ensure that you don't have conflicting versions of a jar in your container's global library directory and also in your app. You may not necessarily know which jar is being used by the classloader. e.g. <li>tomcat/common/lib <li>mywebapp/WEB-INF/lib", "output": "If you are writing a webapp, ensure that you don't have conflicting versions of a jar in your container's global library directory and also in your app.", "answer": "If you are writing a webapp, ensure that you don't have conflicting versions of a jar in your container's global library directory and also in your app. You may not necessarily know which jar is being used by the classloader. e.g. <li>tomcat/common/lib <li>mywebapp/WEB-INF/lib", "summary": "If you are writing a webapp, ensure that you don't have conflicting versions of a jar in your container's global library directory and also in your app."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n I haven't found a better solution. You can use <code>explode()</code>, <code>preg_match_all()</code>, etc. I have a static helper function like this BIGBLOCK There is probably a better name for that, but I use <code>ausStrToTime()</code> because it works with Australian dates (which I often deal with, being an Australian). A better name would probably be the standardised name, but I'm not sure what that is.", "output": "You can use <code>explode()</code>, <code>preg_match_all()</code>, etc. I have a static helper function like this BIGBLOCK", "answer": "I haven't found a better solution. You can use <code>explode()</code>, <code>preg_match_all()</code>, etc. I have a static helper function like this BIGBLOCK There is probably a better name for that, but I use <code>ausStrToTime()</code> because it works with Australian dates (which I often deal with, being an Australian). A better name would probably be the standardised name, but I'm not sure what that is.", "summary": "You can use <code>explode()</code>, <code>preg_match_all()</code>, etc. I have a static helper function like this BIGBLOCK"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n <strong>Use <code>enumerate()</code> like so:</strong> BIGBLOCK <strong>Note</strong>: You can optionally put parenthesis around <code>counter, option</code>, like <code>(counter, option)</code>, if you want, but they're extraneous and not normally included.", "output": "<strong>Use <code>enumerate()</code> like so:</strong> BIGBLOCK", "answer": "<strong>Use <code>enumerate()</code> like so:</strong> BIGBLOCK <strong>Note</strong>: You can optionally put parenthesis around <code>counter, option</code>, like <code>(counter, option)</code>, if you want, but they're extraneous and not normally included.", "summary": "<strong>Use <code>enumerate()</code> like so:</strong> BIGBLOCK"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n this one allow you \"inject\" a piece of text to textbox, inject means: appends the text where cursor is. BIGBLOCK And you can use it like this: BIGBLOCK Funny and have more sence when we have \"Insert Tag into Text\" functionality. works in all browsers.", "output": "this one allow you \"inject\" a piece of text to textbox, inject means: appends the text where cursor is. BIGBLOCK And you can use it like this: BIGBLOCK", "answer": "this one allow you \"inject\" a piece of text to textbox, inject means: appends the text where cursor is. BIGBLOCK And you can use it like this: BIGBLOCK Funny and have more sence when we have \"Insert Tag into Text\" functionality. works in all browsers.", "summary": "this one allow you \"inject\" a piece of text to textbox, inject means: appends the text where cursor is. BIGBLOCK And you can use it like this: BIGBLOCK"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n You declared them, but didn't initialize them with a value. Add something like this :", "output": "You declared them, but didn't initialize them with a value.", "answer": "You declared them, but didn't initialize them with a value. Add something like this :", "summary": "You declared them, but didn't initialize them with a value."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n I think a newer version of hibernate (supporting JPA 2.0) should handle this. But otherwise you can work it around by annotating the collection fields with: BIGBLOCK Remember to remove the <code>fetchType</code> attribute from the <code>@*ToMany</code> annotation. But note that in most cases a <code>Set&lt;Child&gt;</code> is more appropriate than <code>List&lt;Child&gt;</code>, so unless you really need a <code>List</code> - go for <code>Set</code>", "output": "I think a newer version of hibernate (supporting JPA 2.0) should handle this. But otherwise you can work it around by annotating the collection fields with: BIGBLOCK", "answer": "I think a newer version of hibernate (supporting JPA 2.0) should handle this. But otherwise you can work it around by annotating the collection fields with: BIGBLOCK Remember to remove the <code>fetchType</code> attribute from the <code>@*ToMany</code> annotation. But note that in most cases a <code>Set&lt;Child&gt;</code> is more appropriate than <code>List&lt;Child&gt;</code>, so unless you really need a <code>List</code> - go for <code>Set</code>", "summary": "I think a newer version of hibernate (supporting JPA 2.0) should handle this. But otherwise you can work it around by annotating the collection fields with: BIGBLOCK"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n BIGBLOCK That'll run as a function. The <code>while True:</code> makes it run forever. You can always take it out of the function if you need.", "output": "BIGBLOCK The <code>while True:</code> makes it run forever.", "answer": "BIGBLOCK That'll run as a function. The <code>while True:</code> makes it run forever. You can always take it out of the function if you need.", "summary": "BIGBLOCK The <code>while True:</code> makes it run forever."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n To allow you to define variables that you don't want to serialise. In an object you may have information that you don't want to serialise/persist (perhaps a reference to a parent factory object), or perhaps it doesn't make sense to serialise. Marking these as 'transient' means the serialisation mechanism will ignore these fields.", "output": "Marking these as 'transient' means the serialisation mechanism will ignore these fields.", "answer": "To allow you to define variables that you don't want to serialise. In an object you may have information that you don't want to serialise/persist (perhaps a reference to a parent factory object), or perhaps it doesn't make sense to serialise. Marking these as 'transient' means the serialisation mechanism will ignore these fields.", "summary": "Marking these as 'transient' means the serialisation mechanism will ignore these fields."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n You need to install the APK on the emulator. You can do this with the <code>adb</code> command line tool that is included in the Android SDK. BIGBLOCK Once you've done that you should be able to run the app. The <code>-e</code> and <code>-r</code> flags might not be necessary. They just specify that you are using an emulator (if you also have a device connected) and that you want to replace the app if it already exists.", "output": "You need to install the APK on the emulator. BIGBLOCK Once you've done that you should be able to run the app.", "answer": "You need to install the APK on the emulator. You can do this with the <code>adb</code> command line tool that is included in the Android SDK. BIGBLOCK Once you've done that you should be able to run the app. The <code>-e</code> and <code>-r</code> flags might not be necessary. They just specify that you are using an emulator (if you also have a device connected) and that you want to replace the app if it already exists.", "summary": "You need to install the APK on the emulator. BIGBLOCK Once you've done that you should be able to run the app."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n You're actually supposed to use <code>$(\"#terms\").dialog({ autoOpen: false });</code> to initialize it.Then you can use <code>$('#terms').dialog('open');</code> to open the dialog, and <code>$('#terms').dialog('close');</code> to close it.", "output": "You're actually supposed to use <code>$(\"#terms\").dialog({ autoOpen: false });</code> to initialize it.Then you can use <code>$('#terms').dialog('open');</code> to open the dialog, and <code>$('#terms').dialog('close');</code> to close it.", "answer": "You're actually supposed to use <code>$(\"#terms\").dialog({ autoOpen: false });</code> to initialize it.Then you can use <code>$('#terms').dialog('open');</code> to open the dialog, and <code>$('#terms').dialog('close');</code> to close it.", "summary": "You're actually supposed to use <code>$(\"#terms\").dialog({ autoOpen: false });</code> to initialize it.Then you can use <code>$('#terms').dialog('open');</code> to open the dialog, and <code>$('#terms').dialog('close');</code> to close it."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Although my understanding from an apache perspective is that Proxy means that if site x proxies for site y, then requests for x return y. The reverse proxy means that the response from y is adjusted so that all references to y become x. So that the user cannot tell that a proxy is involved...", "output": "Although my understanding from an apache perspective is that Proxy means that if site x proxies for site y, then requests for x return y. The reverse proxy means that the response from y is adjusted so that all references to y become x.", "answer": "Although my understanding from an apache perspective is that Proxy means that if site x proxies for site y, then requests for x return y. The reverse proxy means that the response from y is adjusted so that all references to y become x. So that the user cannot tell that a proxy is involved...", "summary": "Although my understanding from an apache perspective is that Proxy means that if site x proxies for site y, then requests for x return y. The reverse proxy means that the response from y is adjusted so that all references to y become x."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Here is a section of my <code>.vimrc</code>: In normal and in visual mode, this lets me press ,ic to insert comments and,rc to remove comments.", "output": "Here is a section of my <code>.vimrc</code>: In normal and in visual mode, this lets me press ,ic to insert comments and,rc to remove comments.", "answer": "Here is a section of my <code>.vimrc</code>: In normal and in visual mode, this lets me press ,ic to insert comments and,rc to remove comments.", "summary": "Here is a section of my <code>.vimrc</code>: In normal and in visual mode, this lets me press ,ic to insert comments and,rc to remove comments."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n It looks to me like you really want to print out the names of each enum, rather than the values. In which case <code>Enum.GetNames()</code> seems to be the right approach. By the way, incrementing the value is not a good way to enumerate the values of an enum. You should do this instead. I would use <code>Enum.GetValues(typeof(Suit))</code> instead.", "output": "I would use <code>Enum.GetValues(typeof(Suit))</code> instead.", "answer": "It looks to me like you really want to print out the names of each enum, rather than the values. In which case <code>Enum.GetNames()</code> seems to be the right approach. By the way, incrementing the value is not a good way to enumerate the values of an enum. You should do this instead. I would use <code>Enum.GetValues(typeof(Suit))</code> instead.", "summary": "I would use <code>Enum.GetValues(typeof(Suit))</code> instead."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n I would not pull in the extra dependency just for that (division is not that hard, after all), but if you are using Commons Lang anyway, there are the DurationFormatUtils.", "output": "I would not pull in the extra dependency just for that (division is not that hard, after all), but if you are using Commons Lang anyway, there are the DurationFormatUtils.", "answer": "I would not pull in the extra dependency just for that (division is not that hard, after all), but if you are using Commons Lang anyway, there are the DurationFormatUtils.", "summary": "I would not pull in the extra dependency just for that (division is not that hard, after all), but if you are using Commons Lang anyway, there are the DurationFormatUtils."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Use the <code>-wait</code> parameter with Get-Content, which displays lines as they are added to the file. This feature was present in PowerShell v1, but for some reason not documented well in v2. Here is an example BIGBLOCK Once you run this, update and save the file and you will see the changes on the console.", "output": "Use the <code>-wait</code> parameter with Get-Content, which displays lines as they are added to the file. Here is an example BIGBLOCK", "answer": "Use the <code>-wait</code> parameter with Get-Content, which displays lines as they are added to the file. This feature was present in PowerShell v1, but for some reason not documented well in v2. Here is an example BIGBLOCK Once you run this, update and save the file and you will see the changes on the console.", "summary": "Use the <code>-wait</code> parameter with Get-Content, which displays lines as they are added to the file. Here is an example BIGBLOCK"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Some coding snobs look down on them as just a glorified global. In the same way that many people hate the goto statement there are others that hate the idea of ever using a global. I have seen several developers go to extraordinary lengths to avoid a global because they considered using one as an admission of failure. Strange but true. In practice the Singleton pattern is just a programming technique that is a useful part of your toolkit of concepts. From time to time you might find it is the ideal solution and so use it. But using it just so you can boast about using a design pattern is just as stupid as refusing to ever use it because it is just a global.", "output": "In practice the Singleton pattern is just a programming technique that is a useful part of your toolkit of concepts. From time to time you might find it is the ideal solution and so use it.", "answer": "Some coding snobs look down on them as just a glorified global. In the same way that many people hate the goto statement there are others that hate the idea of ever using a global. I have seen several developers go to extraordinary lengths to avoid a global because they considered using one as an admission of failure. Strange but true. In practice the Singleton pattern is just a programming technique that is a useful part of your toolkit of concepts. From time to time you might find it is the ideal solution and so use it. But using it just so you can boast about using a design pattern is just as stupid as refusing to ever use it because it is just a global.", "summary": "In practice the Singleton pattern is just a programming technique that is a useful part of your toolkit of concepts. From time to time you might find it is the ideal solution and so use it."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Reading the original comment, rutherford is looking for a <strong>cross-browser</strong> way to wrap <strong>unbroken</strong> text (inferred by his use of word-wrap for IE, designed to break unbroken strings). BIGBLOCK I've used this class for a bit now, and works like a charm. (note: I've only tested in FireFox and IE)", "output": "Reading the original comment, rutherford is looking for a <strong>cross-browser</strong> way to wrap <strong>unbroken</strong> text (inferred by his use of word-wrap for IE, designed to break unbroken strings).", "answer": "Reading the original comment, rutherford is looking for a <strong>cross-browser</strong> way to wrap <strong>unbroken</strong> text (inferred by his use of word-wrap for IE, designed to break unbroken strings). BIGBLOCK I've used this class for a bit now, and works like a charm. (note: I've only tested in FireFox and IE)", "summary": "Reading the original comment, rutherford is looking for a <strong>cross-browser</strong> way to wrap <strong>unbroken</strong> text (inferred by his use of word-wrap for IE, designed to break unbroken strings)."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Or, create a new table as temp with the extra column, copy the data to this new table while manipulating it as necessary to fill the non-nullable new column, and then swap the table via a two-step name change. Yes, it is more complicated, but you may need to do it this way if you don't want a big UPDATE on a live table.", "output": "Or, create a new table as temp with the extra column, copy the data to this new table while manipulating it as necessary to fill the non-nullable new column, and then swap the table via a two-step name change.", "answer": "Or, create a new table as temp with the extra column, copy the data to this new table while manipulating it as necessary to fill the non-nullable new column, and then swap the table via a two-step name change. Yes, it is more complicated, but you may need to do it this way if you don't want a big UPDATE on a live table.", "summary": "Or, create a new table as temp with the extra column, copy the data to this new table while manipulating it as necessary to fill the non-nullable new column, and then swap the table via a two-step name change."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n This is known as the 'Hamming Weight', 'popcount' or 'sideways addition'. The 'best' algorithm really depends on which CPU you are on and what your usage pattern is. Some CPUs have a single built-in instruction to do it and others have parallel instructions which act on bit vectors. The parallel instructions (like x86's <code>popcnt</code>, on CPUs where it's supported) will almost certainly be fastest. Some other architectures may have a slow instruction implemented with a microcoded loop that tests a bit per cycle (citation needed). A pre-populated table lookup method can be very fast if your CPU has a large cache and/or you are doing lots of these instructions in a tight loop. However it can suffer because of the expense of a 'cache miss', where the CPU has to fetch some of the table from main memory. If you know that your bytes will be mostly 0's or mostly 1's then there are very efficient algorithms for these scenarios. I believe a very good general purpose algorithm is the following, known as 'parallel' or 'variable-precision SWAR algorithm'. I have expressed this in a C-like pseudo language, you may need to adjust it to work for a particular language (e.g. using uint32_t for C++ and >>> in Java): This has the best worst-case behaviour of any of the algorithms discussed, so will efficiently deal with any usage pattern or values you throw at it. This bitwise-SWAR algorithm could parallelize to be done in multiple vector elements at once, instead of in a single integer register, for a speedup on CPUs with SIMD but no usable popcount instruction. (e.g. x86-64 code that has to run on any CPU, not just Nehalem or later.) However, the best way to use vector instructions for popcount is usually by using a variable-shuffle to do a table-lookup for 4 bits at a time of each byte in parallel. (The 4 bits index a 16 entry table held in a vector register). On Intel CPUs, the hardware 64bit popcnt instruction can outperform an SSSE3 <code>PSHUFB</code> bit-parallel implementation by about a factor of 2, but only if your compiler gets it just right. Otherwise SSE can come out significantly ahead. Newer compiler versions are aware of the popcnt false dependency problem on Intel. References: https://graphics.stanford.edu/~seander/bithacks.html https://en.wikipedia.org/wiki/Hamming_weight http://gurmeet.net/puzzles/fast-bit-counting-routines/ http://aggregate.ee.engr.uky.edu/MAGIC/#Population%20Count%20(Ones%20Count)", "output": "This is known as the 'Hamming Weight', 'popcount' or 'sideways addition'. The 'best' algorithm really depends on which CPU you are on and what your usage pattern is.", "answer": "This is known as the 'Hamming Weight', 'popcount' or 'sideways addition'. The 'best' algorithm really depends on which CPU you are on and what your usage pattern is. Some CPUs have a single built-in instruction to do it and others have parallel instructions which act on bit vectors. The parallel instructions (like x86's <code>popcnt</code>, on CPUs where it's supported) will almost certainly be fastest. Some other architectures may have a slow instruction implemented with a microcoded loop that tests a bit per cycle (citation needed). A pre-populated table lookup method can be very fast if your CPU has a large cache and/or you are doing lots of these instructions in a tight loop. However it can suffer because of the expense of a 'cache miss', where the CPU has to fetch some of the table from main memory. If you know that your bytes will be mostly 0's or mostly 1's then there are very efficient algorithms for these scenarios. I believe a very good general purpose algorithm is the following, known as 'parallel' or 'variable-precision SWAR algorithm'. I have expressed this in a C-like pseudo language, you may need to adjust it to work for a particular language (e.g. using uint32_t for C++ and >>> in Java): This has the best worst-case behaviour of any of the algorithms discussed, so will efficiently deal with any usage pattern or values you throw at it. This bitwise-SWAR algorithm could parallelize to be done in multiple vector elements at once, instead of in a single integer register, for a speedup on CPUs with SIMD but no usable popcount instruction. (e.g. x86-64 code that has to run on any CPU, not just Nehalem or later.) However, the best way to use vector instructions for popcount is usually by using a variable-shuffle to do a table-lookup for 4 bits at a time of each byte in parallel. (The 4 bits index a 16 entry table held in a vector register). On Intel CPUs, the hardware 64bit popcnt instruction can outperform an SSSE3 <code>PSHUFB</code> bit-parallel implementation by about a factor of 2, but only if your compiler gets it just right. Otherwise SSE can come out significantly ahead. Newer compiler versions are aware of the popcnt false dependency problem on Intel. References: https://graphics.stanford.edu/~seander/bithacks.html https://en.wikipedia.org/wiki/Hamming_weight http://gurmeet.net/puzzles/fast-bit-counting-routines/ http://aggregate.ee.engr.uky.edu/MAGIC/#Population%20Count%20(Ones%20Count)", "summary": "This is known as the 'Hamming Weight', 'popcount' or 'sideways addition'. The 'best' algorithm really depends on which CPU you are on and what your usage pattern is."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n It's fatal. The remote server has sent you a RST packet, which indicates an immediate dropping of the connection, rather than the usual handshake. This bypasses the normal half-closed state transition. I like this description: \"Connection reset by peer\" is the TCP/IP equivalent of slamming the phone back on the hook. It's more polite than merely not replying, leaving one hanging. But it's not the FIN-ACK expected of the truly polite TCP/IP converseur.", "output": "It's fatal. The remote server has sent you a RST packet, which indicates an immediate dropping of the connection, rather than the usual handshake. This bypasses the normal half-closed state transition.", "answer": "It's fatal. The remote server has sent you a RST packet, which indicates an immediate dropping of the connection, rather than the usual handshake. This bypasses the normal half-closed state transition. I like this description: \"Connection reset by peer\" is the TCP/IP equivalent of slamming the phone back on the hook. It's more polite than merely not replying, leaving one hanging. But it's not the FIN-ACK expected of the truly polite TCP/IP converseur.", "summary": "It's fatal. The remote server has sent you a RST packet, which indicates an immediate dropping of the connection, rather than the usual handshake. This bypasses the normal half-closed state transition."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n This is quite the tricky thing to do in Android and I haven't done it yet. But maybe these links may help you: <li>Android Issue 1073:Google Auth Tokens should be accessible to 3rd party applications through an API <li>SDK API AccountManager in Andriod 2.x+", "output": "<li>Android Issue 1073:Google Auth Tokens should be accessible to 3rd party applications through an API <li>SDK API AccountManager in Andriod 2.x+", "answer": "This is quite the tricky thing to do in Android and I haven't done it yet. But maybe these links may help you: <li>Android Issue 1073:Google Auth Tokens should be accessible to 3rd party applications through an API <li>SDK API AccountManager in Andriod 2.x+", "summary": "<li>Android Issue 1073:Google Auth Tokens should be accessible to 3rd party applications through an API <li>SDK API AccountManager in Andriod 2.x+"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n i think you will try the above code, as it work, but i don't know why it work for sometime and then the whole table is removed. i am also trying to remove the row by click the row. but could not find exact answer.", "output": "i think you will try the above code, as it work, but i don't know why it work for sometime and then the whole table is removed.", "answer": "i think you will try the above code, as it work, but i don't know why it work for sometime and then the whole table is removed. i am also trying to remove the row by click the row. but could not find exact answer.", "summary": "i think you will try the above code, as it work, but i don't know why it work for sometime and then the whole table is removed."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n A static method relates an action to a type of object, whereas the non static method relates an action to an instance of that type of object. Typically it is a method that does something with relation to the instance. Ex: class Car might have a wash method, which would indicate washing a particular car, whereas a static method would apply to the type car.", "output": "A static method relates an action to a type of object, whereas the non static method relates an action to an instance of that type of object. Typically it is a method that does something with relation to the instance.", "answer": "A static method relates an action to a type of object, whereas the non static method relates an action to an instance of that type of object. Typically it is a method that does something with relation to the instance. Ex: class Car might have a wash method, which would indicate washing a particular car, whereas a static method would apply to the type car.", "summary": "A static method relates an action to a type of object, whereas the non static method relates an action to an instance of that type of object. Typically it is a method that does something with relation to the instance."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n <code>List</code> is an ordered sequence of elements whereas <code>Set</code> is a distinct list of elements which is unordered (thank you, Quinn Taylor). <code>List&lt;E&gt;:</code> An ordered collection (also known as a   sequence). The user of this interface   has precise control over where in the   list each element is inserted. The   user can access elements by their   integer index (position in the list),   and search for elements in the list. <code>Set&lt;E&gt;:</code> A collection that contains no   duplicate elements. More formally,   sets contain no pair of elements e1   and e2 such that e1.equals(e2), and at   most one null element. As implied by   its name, this interface models the   mathematical set abstraction.", "output": "<code>List</code> is an ordered sequence of elements whereas <code>Set</code> is a distinct list of elements which is unordered (thank you, Quinn Taylor).", "answer": "<code>List</code> is an ordered sequence of elements whereas <code>Set</code> is a distinct list of elements which is unordered (thank you, Quinn Taylor). <code>List&lt;E&gt;:</code> An ordered collection (also known as a   sequence). The user of this interface   has precise control over where in the   list each element is inserted. The   user can access elements by their   integer index (position in the list),   and search for elements in the list. <code>Set&lt;E&gt;:</code> A collection that contains no   duplicate elements. More formally,   sets contain no pair of elements e1   and e2 such that e1.equals(e2), and at   most one null element. As implied by   its name, this interface models the   mathematical set abstraction.", "summary": "<code>List</code> is an ordered sequence of elements whereas <code>Set</code> is a distinct list of elements which is unordered (thank you, Quinn Taylor)."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Since I don't like neither using a png (proably heavier than the jpg) nor an extra element for setting an opacity and considering this would be a presentational enhacement, then I suggest to try JPEGs with Alpha Channels, a technique that uses canvas. Maybe it could be a nice technique to implement even I don't know if it's appliable in your specific case.", "output": "Since I don't like neither using a png (proably heavier than the jpg) nor an extra element for setting an opacity and considering this would be a presentational enhacement, then I suggest to try", "answer": "Since I don't like neither using a png (proably heavier than the jpg) nor an extra element for setting an opacity and considering this would be a presentational enhacement, then I suggest to try JPEGs with Alpha Channels, a technique that uses canvas. Maybe it could be a nice technique to implement even I don't know if it's appliable in your specific case.", "summary": "Since I don't like neither using a png (proably heavier than the jpg) nor an extra element for setting an opacity and considering this would be a presentational enhacement, then I suggest to try"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n You can also use in your xml layout or <code>/res/layout/activity_main.xml</code>, or you can change the theme in your AndroidManifest.xml by adding to your activity tag. If you want to change the background dynamically, use", "output": "You can also use If you want to change the background dynamically, use", "answer": "You can also use in your xml layout or <code>/res/layout/activity_main.xml</code>, or you can change the theme in your AndroidManifest.xml by adding to your activity tag. If you want to change the background dynamically, use", "summary": "You can also use If you want to change the background dynamically, use"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n The Toilet example is an enjoyable analogy: Mutex: Is a key to a toilet. One person can   have the key - occupy the toilet - at   the time. When finished, the person   gives (frees) the key to the next   person in the queue. Officially: \"Mutexes are typically   used to serialise access to a section   of  re-entrant code that cannot be   executed concurrently by more than one   thread. A mutex object only allows one   thread into a controlled section,   forcing other threads which attempt to   gain access to that section to wait   until the first thread has exited from   that section.\" Ref: Symbian Developer   Library (A mutex is really a semaphore with   value 1.) Semaphore: Is the number of free identical toilet   keys. Example, say we have four   toilets with identical locks and keys.   The semaphore count - the count of   keys - is set to 4 at beginning (all   four toilets are free), then the count   value is decremented as people are   coming in. If all toilets are full,   ie. there are no free keys left, the   semaphore count is 0. Now, when eq.   one person leaves the toilet,   semaphore is increased to 1 (one free   key), and given to the next person in   the queue. Officially: \"A semaphore restricts the   number of simultaneous users of a   shared resource up to a maximum   number. Threads can request access to   the resource (decrementing the   semaphore), and can signal that they   have finished using the resource   (incrementing the semaphore).\" Ref:   Symbian Developer Library", "output": "Mutex: Is a key to a toilet. Semaphore: Is the number of free identical toilet", "answer": "The Toilet example is an enjoyable analogy: Mutex: Is a key to a toilet. One person can   have the key - occupy the toilet - at   the time. When finished, the person   gives (frees) the key to the next   person in the queue. Officially: \"Mutexes are typically   used to serialise access to a section   of  re-entrant code that cannot be   executed concurrently by more than one   thread. A mutex object only allows one   thread into a controlled section,   forcing other threads which attempt to   gain access to that section to wait   until the first thread has exited from   that section.\" Ref: Symbian Developer   Library (A mutex is really a semaphore with   value 1.) Semaphore: Is the number of free identical toilet   keys. Example, say we have four   toilets with identical locks and keys.   The semaphore count - the count of   keys - is set to 4 at beginning (all   four toilets are free), then the count   value is decremented as people are   coming in. If all toilets are full,   ie. there are no free keys left, the   semaphore count is 0. Now, when eq.   one person leaves the toilet,   semaphore is increased to 1 (one free   key), and given to the next person in   the queue. Officially: \"A semaphore restricts the   number of simultaneous users of a   shared resource up to a maximum   number. Threads can request access to   the resource (decrementing the   semaphore), and can signal that they   have finished using the resource   (incrementing the semaphore).\" Ref:   Symbian Developer Library", "summary": "Mutex: Is a key to a toilet. Semaphore: Is the number of free identical toilet"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Open Quickly... <li>Command Ã©Â?Shift Ã©Â?D <li><strong>File</strong> > <strong>Open Quickly...</strong> I'm a big fan of the <strong>Open Quickly</strong> feature, which is particularly good in Xcode 3.1 and later. When you want to open a file or a symbol definition that's in your project or in a framework, just hit the keyboard shortcut, type a bit of the file or symbol's name, use Up Arrow Ã©Â?and Down Arrow Ã©Â?to pick to the right result (if need be), and then hit Return Ã©Â?to open the file or navigate to the symbol definition. On Xcode 4: <li>Command Ã©Â?Shift Ã©Â?o Open Quickly uses the current word as a search term Also, something I didn't know about Xcode until two minutes ago (when schwa pointed it out in a comment) is that, if the editor's text caret is inside of a word when <strong>Open Quickly</strong> is invoked, that word will be used as the <strong>Open Quickly</strong> search term.", "output": "<li>Command Ã©Â?Shift Ã©Â?D <li><strong>File</strong> > <strong>Open Quickly...</strong> On Xcode 4: <li>Command Ã©Â?Shift Ã©Â?o Also, something I didn't know about Xcode until two minutes ago (when schwa pointed it out in a comment) is that, if the editor's text caret is inside of a word when <strong>Open Quickly</strong> is invoked, that word will be used as the <strong>Open Quickly</strong> search term.", "answer": "Open Quickly... <li>Command Ã©Â?Shift Ã©Â?D <li><strong>File</strong> > <strong>Open Quickly...</strong> I'm a big fan of the <strong>Open Quickly</strong> feature, which is particularly good in Xcode 3.1 and later. When you want to open a file or a symbol definition that's in your project or in a framework, just hit the keyboard shortcut, type a bit of the file or symbol's name, use Up Arrow Ã©Â?and Down Arrow Ã©Â?to pick to the right result (if need be), and then hit Return Ã©Â?to open the file or navigate to the symbol definition. On Xcode 4: <li>Command Ã©Â?Shift Ã©Â?o Open Quickly uses the current word as a search term Also, something I didn't know about Xcode until two minutes ago (when schwa pointed it out in a comment) is that, if the editor's text caret is inside of a word when <strong>Open Quickly</strong> is invoked, that word will be used as the <strong>Open Quickly</strong> search term.", "summary": "<li>Command Ã©Â?Shift Ã©Â?D <li><strong>File</strong> > <strong>Open Quickly...</strong> On Xcode 4: <li>Command Ã©Â?Shift Ã©Â?o Also, something I didn't know about Xcode until two minutes ago (when schwa pointed it out in a comment) is that, if the editor's text caret is inside of a word when <strong>Open Quickly</strong> is invoked, that word will be used as the <strong>Open Quickly</strong> search term."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n <code>toCharArray</code> followed by <code>Arrays.sort</code> followed by a String constructor call: BIGBLOCK EDIT: As tackline points out, this will fail if the string contains surrogate pairs or indeed composite characters (accent + e as separate chars) etc. At that point it gets a lot harder... hopefully you don't need this :) In addition, this is just ordering by ordinal, without taking capitalisation, accents or anything else into account.", "output": "<code>toCharArray</code> followed by <code>Arrays.sort</code> followed by a String constructor call: BIGBLOCK", "answer": "<code>toCharArray</code> followed by <code>Arrays.sort</code> followed by a String constructor call: BIGBLOCK EDIT: As tackline points out, this will fail if the string contains surrogate pairs or indeed composite characters (accent + e as separate chars) etc. At that point it gets a lot harder... hopefully you don't need this :) In addition, this is just ordering by ordinal, without taking capitalisation, accents or anything else into account.", "summary": "<code>toCharArray</code> followed by <code>Arrays.sort</code> followed by a String constructor call: BIGBLOCK"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n what is the exact purpose of this \".prototype\" property? The interface to standard classes become extensible. For example, you are using the <code>Array</code> class and you also need to add a custom serializer for all your array objects. Would you spend time coding up a subclass, or use composition or ... The prototype property solves this by letting the users control the exact set of members/methods available to a class. Think of prototypes as an extra vtable-pointer. When some members are missing from the original class, the prototype is looked up at runtime.", "output": "The interface to standard classes become extensible.", "answer": "what is the exact purpose of this \".prototype\" property? The interface to standard classes become extensible. For example, you are using the <code>Array</code> class and you also need to add a custom serializer for all your array objects. Would you spend time coding up a subclass, or use composition or ... The prototype property solves this by letting the users control the exact set of members/methods available to a class. Think of prototypes as an extra vtable-pointer. When some members are missing from the original class, the prototype is looked up at runtime.", "summary": "The interface to standard classes become extensible."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Extending DarenW's comment. Once typename and class are not accepted to be very different, it might be still valid to be strict on their use. Use class only if is really a class, and typename when its a basic type, such as <strong>char</strong>. These types are indeed also accepted instead of <strong>typename</strong> template&lt; <strong>char</strong> <em>myc</em> = '/' > which would be in this case even superior to typename or class. Think of \"hintfullness\" or intelligibility to other people. And actually consider that 3rd party software/scripts might try to use the code/information to guess what is happening with the template (consider swig).", "output": "Use class only if is really a class, and typename when its a basic type, such as <strong>char</strong>. These types are indeed also accepted instead of <strong>typename</strong> Think of \"hintfullness\" or intelligibility to other people. And actually consider that 3rd party software/scripts might try to use the code/information to guess what is happening with the template (consider swig).", "answer": "Extending DarenW's comment. Once typename and class are not accepted to be very different, it might be still valid to be strict on their use. Use class only if is really a class, and typename when its a basic type, such as <strong>char</strong>. These types are indeed also accepted instead of <strong>typename</strong> template&lt; <strong>char</strong> <em>myc</em> = '/' > which would be in this case even superior to typename or class. Think of \"hintfullness\" or intelligibility to other people. And actually consider that 3rd party software/scripts might try to use the code/information to guess what is happening with the template (consider swig).", "summary": "Use class only if is really a class, and typename when its a basic type, such as <strong>char</strong>. These types are indeed also accepted instead of <strong>typename</strong> Think of \"hintfullness\" or intelligibility to other people. And actually consider that 3rd party software/scripts might try to use the code/information to guess what is happening with the template (consider swig)."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n jQuery has a function that can do this: <li>include the following script in your head: BIGBLOCK (or just download the jQuery.js file online and include it locally) <li>use this script to toggle the check box when the input is clicked: BIGBLOCK That should do what you want if I understood what you were trying to do.", "output": "jQuery has a function that can do this: <li>include the following script in your head: BIGBLOCK <li>use this script to toggle the check box when the input is clicked: BIGBLOCK", "answer": "jQuery has a function that can do this: <li>include the following script in your head: BIGBLOCK (or just download the jQuery.js file online and include it locally) <li>use this script to toggle the check box when the input is clicked: BIGBLOCK That should do what you want if I understood what you were trying to do.", "summary": "jQuery has a function that can do this: <li>include the following script in your head: BIGBLOCK <li>use this script to toggle the check box when the input is clicked: BIGBLOCK"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n A couple of quick notes: <li>It's \"length\" not \"lenght\" <li>Table aliases in your query would probably make it a lot more readable Now onto the problem... You need to explicitly convert your parameters to VARCHAR before trying to concatenate them. When SQL Server sees @my_int + 'X' it thinks you're trying to add the number \"X\" to @my_int and it can't do that. Instead try:", "output": "You need to explicitly convert your parameters to VARCHAR before trying to concatenate them.", "answer": "A couple of quick notes: <li>It's \"length\" not \"lenght\" <li>Table aliases in your query would probably make it a lot more readable Now onto the problem... You need to explicitly convert your parameters to VARCHAR before trying to concatenate them. When SQL Server sees @my_int + 'X' it thinks you're trying to add the number \"X\" to @my_int and it can't do that. Instead try:", "summary": "You need to explicitly convert your parameters to VARCHAR before trying to concatenate them."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n The simplest way in Python: This assumes that your program takes at least a tenth of second to run. Prints:", "output": "The simplest way in Python:", "answer": "The simplest way in Python: This assumes that your program takes at least a tenth of second to run. Prints:", "summary": "The simplest way in Python:"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n I use it quite often, mainly as a null object or to partially bind parameters to a function. Here are examples: to implement null object pattern: for parameter binding: let say that I have the following API Then, when I wan't to quickly dump the recieved data to a file I do that:", "output": "I use it quite often, mainly as a null object or to partially bind parameters to a function.", "answer": "I use it quite often, mainly as a null object or to partially bind parameters to a function. Here are examples: to implement null object pattern: for parameter binding: let say that I have the following API Then, when I wan't to quickly dump the recieved data to a file I do that:", "summary": "I use it quite often, mainly as a null object or to partially bind parameters to a function."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Try to find the product of numbers from 1 to 50: Let product, P1 = 1 x 2 x 3 x ............. 50 When you take out numbers one by one, multiply them so that you get the product P2. But two numbers are missing here, hence P2 &lt; P1. The product of the two mising terms, a x b = P1 - P2. You already know the sum, a + b = S1. From the above two equations, solve for a and b through a quadratic equation. a and b are your missing numbers.", "output": "Let product, P1 = 1 x 2 x 3 x ............. 50 When you take out numbers one by one, multiply them so that you get the product P2. The product of the two mising terms, a x b = P1 - P2. You already know the sum, a + b = S1. From the above two equations, solve for a and b through a quadratic equation.", "answer": "Try to find the product of numbers from 1 to 50: Let product, P1 = 1 x 2 x 3 x ............. 50 When you take out numbers one by one, multiply them so that you get the product P2. But two numbers are missing here, hence P2 &lt; P1. The product of the two mising terms, a x b = P1 - P2. You already know the sum, a + b = S1. From the above two equations, solve for a and b through a quadratic equation. a and b are your missing numbers.", "summary": "Let product, P1 = 1 x 2 x 3 x ............. 50 When you take out numbers one by one, multiply them so that you get the product P2. The product of the two mising terms, a x b = P1 - P2. You already know the sum, a + b = S1. From the above two equations, solve for a and b through a quadratic equation."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Static fields and methods are connected to the class itself and not its instances. If you have a class <code>A</code>, a 'normal' method <code>b</code>, and a static method <code>c</code>, and you make an instance <code>a</code> of your class <code>A</code>, the calls to <code>A.c()</code> and <code>a.b()</code> are valid. Method <code>c()</code> has no idea which instance is connected, so it cannot use non-static fields. The solution for you is that you either make your fields static or your methods non-static. You main could look like this then:", "output": "Static fields and methods are connected to the class itself and not its instances. You main could look like this then:", "answer": "Static fields and methods are connected to the class itself and not its instances. If you have a class <code>A</code>, a 'normal' method <code>b</code>, and a static method <code>c</code>, and you make an instance <code>a</code> of your class <code>A</code>, the calls to <code>A.c()</code> and <code>a.b()</code> are valid. Method <code>c()</code> has no idea which instance is connected, so it cannot use non-static fields. The solution for you is that you either make your fields static or your methods non-static. You main could look like this then:", "summary": "Static fields and methods are connected to the class itself and not its instances. You main could look like this then:"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n You can select the items in a collection (and much more) in a more readable way by using the lambdaj library https://code.google.com/archive/p/lambdaj/ It has some advantages over the Quaere library because it doesn't use any magic string, it is completely type safe and in my opinion it offers a more readable DSL.", "output": "You can select the items in a collection (and much more) in a more readable way by using the lambdaj library", "answer": "You can select the items in a collection (and much more) in a more readable way by using the lambdaj library https://code.google.com/archive/p/lambdaj/ It has some advantages over the Quaere library because it doesn't use any magic string, it is completely type safe and in my opinion it offers a more readable DSL.", "summary": "You can select the items in a collection (and much more) in a more readable way by using the lambdaj library"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n An application server is a machine (an executable process running on some machine, actually) that \"listens\" (on any channel, using any protocol), for requests from clients for whatever service it provides, and then does something based on those requests. (may or may not involve a respose to the client) A Web server is process running on a machine that \"listens\" specifically on TCP/IP Channel using one of the \"internet\" protocols, (http, https, ftp, etc..)  and does whatever it does based on those incoming requests... Generally, (as origianly defined), it fetched/generated and returned an html web page to the client, either fetched from a static html file on the server, or constructed dynamically based on parameters in the incoming client request.", "output": "An application server is a machine (an executable process running on some machine, actually) that \"listens\" (on any channel, using any protocol), for requests from clients for whatever service it provides, and then does something based on those requests. A Web server is process running on a machine that \"listens\" specifically on TCP/IP Channel using one of the \"internet\" protocols, (http, https, ftp, etc..)  and does whatever it does based on those incoming requests... Generally, (as origianly defined), it fetched/generated and returned an html web page to the client, either fetched from a static html file on the server, or constructed dynamically based on parameters in the incoming client request.", "answer": "An application server is a machine (an executable process running on some machine, actually) that \"listens\" (on any channel, using any protocol), for requests from clients for whatever service it provides, and then does something based on those requests. (may or may not involve a respose to the client) A Web server is process running on a machine that \"listens\" specifically on TCP/IP Channel using one of the \"internet\" protocols, (http, https, ftp, etc..)  and does whatever it does based on those incoming requests... Generally, (as origianly defined), it fetched/generated and returned an html web page to the client, either fetched from a static html file on the server, or constructed dynamically based on parameters in the incoming client request.", "summary": "An application server is a machine (an executable process running on some machine, actually) that \"listens\" (on any channel, using any protocol), for requests from clients for whatever service it provides, and then does something based on those requests. A Web server is process running on a machine that \"listens\" specifically on TCP/IP Channel using one of the \"internet\" protocols, (http, https, ftp, etc..)  and does whatever it does based on those incoming requests... Generally, (as origianly defined), it fetched/generated and returned an html web page to the client, either fetched from a static html file on the server, or constructed dynamically based on parameters in the incoming client request."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n I've tried making an object and tried  using .getWidth and .getHeight but  can't get it to work. ThatÃ©ÂºÂs because you are not setting the width and height fields in JFrame, but you are setting them on local variables. Fields HEIGHT and WIDTH are inhereted from ImageObserver BIGBLOCK Seehttp://java.sun.com/javase/6/docs/api/javax/swing/JFrame.html If width and height represent state of the frame, then you could refactorize them to fields, and write getters for them. Then, you could create a Constructor that receives both values as parameters BIGBLOCK If widht and height are going to be constant (after created) then you should use the <strong>final</strong> modifier. This way, once they are assigned a value, they canÃ©ÂºÂt be modified. Also, the variables i use in  DrawCircle, should I have them in the  constructor or not? The way it is writen now, will only allow you to create <strong>one type of circle</strong>. If you wanÃ©ÂºÂt to create different circles, you should overload the constructor with one with arguments). For example, if you want to change the attributes xPoint and yPoint, you could have a constructor BIGBLOCK EDIT: BIGBLOCK Those are arguments to constructors. You set values on them when you call the Constructor method. In DrawFrame I set width and height. In DrawCircle I need to access the  width and height of DrawFrame. How do  I do this? BIGBLOCK Now when the DrawCircle constructor executes, it will receive the values you used in DrawFrame  as _width and _height respectively. EDIT: Try doing BIGBLOCK http://java.sun.com/docs/books/tutorial/uiswing/components/frame.html", "output": "Fields HEIGHT and WIDTH are inhereted from ImageObserver BIGBLOCK If width and height represent state of the frame, then you could refactorize them to fields, and write getters for them. Then, you could create a Constructor that receives both values as parameters BIGBLOCK If widht and height are going to be constant (after created) then you should use the <strong>final</strong> modifier. Also, the variables i use in  DrawCircle, should I have them in the  constructor or not? The way it is writen now, will only allow you to create <strong>one type of circle</strong>. If you wanÃ©ÂºÂt to create different circles, you should overload the constructor with one with arguments).", "answer": "I've tried making an object and tried  using .getWidth and .getHeight but  can't get it to work. ThatÃ©ÂºÂs because you are not setting the width and height fields in JFrame, but you are setting them on local variables. Fields HEIGHT and WIDTH are inhereted from ImageObserver BIGBLOCK Seehttp://java.sun.com/javase/6/docs/api/javax/swing/JFrame.html If width and height represent state of the frame, then you could refactorize them to fields, and write getters for them. Then, you could create a Constructor that receives both values as parameters BIGBLOCK If widht and height are going to be constant (after created) then you should use the <strong>final</strong> modifier. This way, once they are assigned a value, they canÃ©ÂºÂt be modified. Also, the variables i use in  DrawCircle, should I have them in the  constructor or not? The way it is writen now, will only allow you to create <strong>one type of circle</strong>. If you wanÃ©ÂºÂt to create different circles, you should overload the constructor with one with arguments). For example, if you want to change the attributes xPoint and yPoint, you could have a constructor BIGBLOCK EDIT: BIGBLOCK Those are arguments to constructors. You set values on them when you call the Constructor method. In DrawFrame I set width and height. In DrawCircle I need to access the  width and height of DrawFrame. How do  I do this? BIGBLOCK Now when the DrawCircle constructor executes, it will receive the values you used in DrawFrame  as _width and _height respectively. EDIT: Try doing BIGBLOCK http://java.sun.com/docs/books/tutorial/uiswing/components/frame.html", "summary": "Fields HEIGHT and WIDTH are inhereted from ImageObserver BIGBLOCK If width and height represent state of the frame, then you could refactorize them to fields, and write getters for them. Then, you could create a Constructor that receives both values as parameters BIGBLOCK If widht and height are going to be constant (after created) then you should use the <strong>final</strong> modifier. Also, the variables i use in  DrawCircle, should I have them in the  constructor or not? The way it is writen now, will only allow you to create <strong>one type of circle</strong>. If you wanÃ©ÂºÂt to create different circles, you should overload the constructor with one with arguments)."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n A clustered index means you are telling the database to store close values actually close to one another on the disk. This has the benefit of rapid scan / retrieval of records falling into some range of clustered index values. For example, you have two tables, Customer and Order: If you wish to quickly retrieve all orders of one particular customer, you may wish to create a clustered index on the \"CustomerID\" column of the Order table. This way the records with the same CustomerID will be physically stored close to each other on disk (clustered) which speeds up their retrieval. P.S. The index on CustomerID will obviously be not unique, so you either need to add a second field to \"uniquify\" the index or let the database handle that for you but that's another story. Regarding multiple indexes. You can have only one clustered index per table because this defines how the data is physically arranged. If you wish an analogy, imagine a big room with many tables in it. You can either put these tables to form several rows or pull them all together to form a big conference table, but not both ways at the same time. A table can have other indexes, they will then point to the entries in the clustered index which in its turn will finally say where to find the actual data.", "output": "A clustered index means you are telling the database to store close values actually close to one another on the disk. This has the benefit of rapid scan / retrieval of records falling into some range of clustered index values.", "answer": "A clustered index means you are telling the database to store close values actually close to one another on the disk. This has the benefit of rapid scan / retrieval of records falling into some range of clustered index values. For example, you have two tables, Customer and Order: If you wish to quickly retrieve all orders of one particular customer, you may wish to create a clustered index on the \"CustomerID\" column of the Order table. This way the records with the same CustomerID will be physically stored close to each other on disk (clustered) which speeds up their retrieval. P.S. The index on CustomerID will obviously be not unique, so you either need to add a second field to \"uniquify\" the index or let the database handle that for you but that's another story. Regarding multiple indexes. You can have only one clustered index per table because this defines how the data is physically arranged. If you wish an analogy, imagine a big room with many tables in it. You can either put these tables to form several rows or pull them all together to form a big conference table, but not both ways at the same time. A table can have other indexes, they will then point to the entries in the clustered index which in its turn will finally say where to find the actual data.", "summary": "A clustered index means you are telling the database to store close values actually close to one another on the disk. This has the benefit of rapid scan / retrieval of records falling into some range of clustered index values."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n The <code>transient</code> keyword in Java is used to indicate that a field should not be serialized. From the Java Language Specification, Java SE 7 Edition, Section 8.3.1.3. <code>transient</code> Fields: Variables may be marked <code>transient</code> to  indicate that they are not part of the  persistent state of an object. For example, you may have fields that are derived from other fields, and should only be done so programmatically, rather than having the state be persisted via serialization. Here's a <code>GalleryImage</code> class which contains an image and a thumbnail derived from the image: In this example, the <code>thumbnailImage</code> is a thumbnail image that is generated by invoking the <code>generateThumbnail</code> method. The <code>thumbnailImage</code> field is marked as <code>transient</code>, so only the original <code>image</code> is serialized rather than persisting both the original image and the thumbnail image. This means that less storage would be needed to save the serialized object. (Of course, this may or may not be desirable depending on the requirements of the system -- this is just an example.) At the time of deserialization, the <code>readObject</code> method is called to perform any operations necessary to restore the state of the object back to the state at which the serialization occurred. Here, the thumbnail needs to be generated, so the <code>readObject</code> method is overridden so that the thumbnail will be generated by calling the <code>generateThumbnail</code> method. For additional information, the Discover the secrets of the Java Serialization API article (which was originally available on the Sun Developer Network) has a section which discusses the use of and presents a scenario where the <code>transient</code> keyword is used to prevent serialization of certain fields.", "output": "The <code>transient</code> keyword in Java is used to indicate that a field should not be serialized. Variables may be marked <code>transient</code> to  indicate that they are not part of the  persistent state of an object. For example, you may have fields that are derived from other fields, and should only be done so programmatically, rather than having the state be persisted via serialization.", "answer": "The <code>transient</code> keyword in Java is used to indicate that a field should not be serialized. From the Java Language Specification, Java SE 7 Edition, Section 8.3.1.3. <code>transient</code> Fields: Variables may be marked <code>transient</code> to  indicate that they are not part of the  persistent state of an object. For example, you may have fields that are derived from other fields, and should only be done so programmatically, rather than having the state be persisted via serialization. Here's a <code>GalleryImage</code> class which contains an image and a thumbnail derived from the image: In this example, the <code>thumbnailImage</code> is a thumbnail image that is generated by invoking the <code>generateThumbnail</code> method. The <code>thumbnailImage</code> field is marked as <code>transient</code>, so only the original <code>image</code> is serialized rather than persisting both the original image and the thumbnail image. This means that less storage would be needed to save the serialized object. (Of course, this may or may not be desirable depending on the requirements of the system -- this is just an example.) At the time of deserialization, the <code>readObject</code> method is called to perform any operations necessary to restore the state of the object back to the state at which the serialization occurred. Here, the thumbnail needs to be generated, so the <code>readObject</code> method is overridden so that the thumbnail will be generated by calling the <code>generateThumbnail</code> method. For additional information, the Discover the secrets of the Java Serialization API article (which was originally available on the Sun Developer Network) has a section which discusses the use of and presents a scenario where the <code>transient</code> keyword is used to prevent serialization of certain fields.", "summary": "The <code>transient</code> keyword in Java is used to indicate that a field should not be serialized. Variables may be marked <code>transient</code> to  indicate that they are not part of the  persistent state of an object. For example, you may have fields that are derived from other fields, and should only be done so programmatically, rather than having the state be persisted via serialization."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Maybe the example with an clock could help you understand the modulo. <em>A familiar use of modular arithmetic is its use in the 12-hour clock, in which the day is divided into two 12 hour periods.</em> Lets say we have currently this time: <strong>15:00</strong> But you could also say it is <strong>3 pm</strong> This is exactly what modulo does: BIGBLOCK You find this example better explained on wikipedia: Wikipedia Modulo Article", "output": "<em>A familiar use of modular arithmetic is its use in the 12-hour clock, in which the day is divided into two 12 hour periods.</em> You find this example better explained on wikipedia: Wikipedia Modulo Article", "answer": "Maybe the example with an clock could help you understand the modulo. <em>A familiar use of modular arithmetic is its use in the 12-hour clock, in which the day is divided into two 12 hour periods.</em> Lets say we have currently this time: <strong>15:00</strong> But you could also say it is <strong>3 pm</strong> This is exactly what modulo does: BIGBLOCK You find this example better explained on wikipedia: Wikipedia Modulo Article", "summary": "<em>A familiar use of modular arithmetic is its use in the 12-hour clock, in which the day is divided into two 12 hour periods.</em> You find this example better explained on wikipedia: Wikipedia Modulo Article"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n This a rework from decimal to binary of the old Marchant calculator algorithm (sorry, I don't have a reference), in Ruby, adapted specifically for this question: BIGBLOCK Here's a workup of something similar (please don't vote me down for coding style/smells or clunky O/O - it's the algorithm that counts, and C++ is not my home language). In this case, we're looking for residue == 0: BIGBLOCK", "output": "This a rework from decimal to binary of the old Marchant calculator algorithm (sorry, I don't have a reference), in Ruby, adapted specifically for this question: BIGBLOCK In this case, we're looking for residue == 0: BIGBLOCK", "answer": "This a rework from decimal to binary of the old Marchant calculator algorithm (sorry, I don't have a reference), in Ruby, adapted specifically for this question: BIGBLOCK Here's a workup of something similar (please don't vote me down for coding style/smells or clunky O/O - it's the algorithm that counts, and C++ is not my home language). In this case, we're looking for residue == 0: BIGBLOCK", "summary": "This a rework from decimal to binary of the old Marchant calculator algorithm (sorry, I don't have a reference), in Ruby, adapted specifically for this question: BIGBLOCK In this case, we're looking for residue == 0: BIGBLOCK"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n BIGBLOCK for capturing current window use BIGBLOCK", "output": "BIGBLOCK BIGBLOCK", "answer": "BIGBLOCK for capturing current window use BIGBLOCK", "summary": "BIGBLOCK BIGBLOCK"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n The problems with singletons is the issue of increased scope and therefore coupling. There is no denying that there are some of situations where you do need access to a single instance, and it can be accomplished other ways. I now prefer to design around an inversion of control (IoC) container and allow the the lifetimes to be controlled by the container. This gives you the benefit of the classes that depend on the instance to be unaware of the fact that there is a single instance. The lifetime of the singleton can be changed in the future. Once such example I encountered recently was an easy adjustment from single threaded to multi-threaded. FWIW, if it a PIA when you try to unit test it then it's going to PIA when you try to debug, bug fix or enhance it.", "output": "The problems with singletons is the issue of increased scope and therefore coupling.", "answer": "The problems with singletons is the issue of increased scope and therefore coupling. There is no denying that there are some of situations where you do need access to a single instance, and it can be accomplished other ways. I now prefer to design around an inversion of control (IoC) container and allow the the lifetimes to be controlled by the container. This gives you the benefit of the classes that depend on the instance to be unaware of the fact that there is a single instance. The lifetime of the singleton can be changed in the future. Once such example I encountered recently was an easy adjustment from single threaded to multi-threaded. FWIW, if it a PIA when you try to unit test it then it's going to PIA when you try to debug, bug fix or enhance it.", "summary": "The problems with singletons is the issue of increased scope and therefore coupling."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n What I do with my TestNG, (sorry, JUnit doesn't support this) test cases is I can assign a group to the test I want to run BIGBLOCK And then simply run 'mvn -Dgroups=broken'.", "output": "What I do with my TestNG, (sorry, JUnit doesn't support this) test cases is I can assign a group to the test I want to run BIGBLOCK And then simply run 'mvn -Dgroups=broken'.", "answer": "What I do with my TestNG, (sorry, JUnit doesn't support this) test cases is I can assign a group to the test I want to run BIGBLOCK And then simply run 'mvn -Dgroups=broken'.", "summary": "What I do with my TestNG, (sorry, JUnit doesn't support this) test cases is I can assign a group to the test I want to run BIGBLOCK And then simply run 'mvn -Dgroups=broken'."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n In my case, this issue was related to renaming my model's edmx file... correcting the app.config connection string for the csdl/ssdl/msl files fixed my issue. If you're using the EF 4.0 designer to generate your csdl/ssdl/msl, these 3 \"files\" will actually be stored within the model's main edmx file. In this case, the post by Waqas is pretty much on the mark. It's important to understand that \"Model_Name\" in his example will need to be changed to whatever the current name of your model's .edmx file (without the .edmx). Also, if your edmx file is not at the root level of your project, you need to preface Model_Name with the relative path, e.g. would specify the csdl/ssdl/msl xml is stored in the model file 'WidgetModel.edmx' which is stored in a folder named 'MyModel'.", "output": "In my case, this issue was related to renaming my model's edmx file... correcting the app.config connection string for the csdl/ssdl/msl files fixed my issue.", "answer": "In my case, this issue was related to renaming my model's edmx file... correcting the app.config connection string for the csdl/ssdl/msl files fixed my issue. If you're using the EF 4.0 designer to generate your csdl/ssdl/msl, these 3 \"files\" will actually be stored within the model's main edmx file. In this case, the post by Waqas is pretty much on the mark. It's important to understand that \"Model_Name\" in his example will need to be changed to whatever the current name of your model's .edmx file (without the .edmx). Also, if your edmx file is not at the root level of your project, you need to preface Model_Name with the relative path, e.g. would specify the csdl/ssdl/msl xml is stored in the model file 'WidgetModel.edmx' which is stored in a folder named 'MyModel'.", "summary": "In my case, this issue was related to renaming my model's edmx file... correcting the app.config connection string for the csdl/ssdl/msl files fixed my issue."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n \"What does <code>if __name__==Ã©ÂÂ¥Ã¦Â·Â¿_main__Ã©Â?</code> do?\" has already been answered. Having a <code>main()</code> <em>function</em> allows you to call its functionality if you <code>import</code> the module. The main (no pun intended) benefit of this (IMHO) is that you can unit test it.", "output": "Having a <code>main()</code> <em>function</em> allows you to call its functionality if you <code>import</code> the module.", "answer": "\"What does <code>if __name__==Ã©ÂÂ¥Ã¦Â·Â¿_main__Ã©Â?</code> do?\" has already been answered. Having a <code>main()</code> <em>function</em> allows you to call its functionality if you <code>import</code> the module. The main (no pun intended) benefit of this (IMHO) is that you can unit test it.", "summary": "Having a <code>main()</code> <em>function</em> allows you to call its functionality if you <code>import</code> the module."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n I always find it conceptually easier to think of that you are making the this pointer const (which is pretty much what it does).", "output": "I always find it conceptually easier to think of that you are making the this pointer const (which is pretty much what it does).", "answer": "I always find it conceptually easier to think of that you are making the this pointer const (which is pretty much what it does).", "summary": "I always find it conceptually easier to think of that you are making the this pointer const (which is pretty much what it does)."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Easy.. Try this", "output": "Try this", "answer": "Easy.. Try this", "summary": "Try this"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n This may not be the most popular or efficient method, but I tend to forgo strong datatypes in SQLite since they are all essentially dumped in as strings anyway. I've written a thin C# wrapper around the SQLite library before (when using SQLite with C#, of course) to handle insertions and extractions to and from SQLite as if I were dealing with DateTime objects.", "output": "I've written a thin C# wrapper around the SQLite library before (when using SQLite with C#, of course) to handle insertions and extractions to and from SQLite as if I were dealing with DateTime objects.", "answer": "This may not be the most popular or efficient method, but I tend to forgo strong datatypes in SQLite since they are all essentially dumped in as strings anyway. I've written a thin C# wrapper around the SQLite library before (when using SQLite with C#, of course) to handle insertions and extractions to and from SQLite as if I were dealing with DateTime objects.", "summary": "I've written a thin C# wrapper around the SQLite library before (when using SQLite with C#, of course) to handle insertions and extractions to and from SQLite as if I were dealing with DateTime objects."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n One possible solution in pure javascript: BIGBLOCK", "output": "One possible solution in pure javascript: BIGBLOCK", "answer": "One possible solution in pure javascript: BIGBLOCK", "summary": "One possible solution in pure javascript: BIGBLOCK"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Oddly enough, <code>new Array(size)</code> is almost 2x faster than <code>[]</code> in Chrome, and about the same in FF and IE (measured by creating and filling an array). It only matters if you know the approximate size of the array. If you add more items than the length you've given, the performance boost is lost.", "output": "Oddly enough, <code>new Array(size)</code> is almost 2x faster than <code>[]</code> in Chrome, and about the same in FF and IE (measured by creating and filling an array). It only matters if you know the approximate size of the array. If you add more items than the length you've given, the performance boost is lost.", "answer": "Oddly enough, <code>new Array(size)</code> is almost 2x faster than <code>[]</code> in Chrome, and about the same in FF and IE (measured by creating and filling an array). It only matters if you know the approximate size of the array. If you add more items than the length you've given, the performance boost is lost.", "summary": "Oddly enough, <code>new Array(size)</code> is almost 2x faster than <code>[]</code> in Chrome, and about the same in FF and IE (measured by creating and filling an array). It only matters if you know the approximate size of the array. If you add more items than the length you've given, the performance boost is lost."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Well, one classic example is where you wanted to get a list of employees and their immediate managers: It's basically used where there is any relationship between rows stored in the same table. employees. multi-level marketing. machine parts. And so on...", "output": "It's basically used where there is any relationship between rows stored in the same table.", "answer": "Well, one classic example is where you wanted to get a list of employees and their immediate managers: It's basically used where there is any relationship between rows stored in the same table. employees. multi-level marketing. machine parts. And so on...", "summary": "It's basically used where there is any relationship between rows stored in the same table."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Originally ZIP files were created with MS-DOS command line software from PKWare, the two programs were PKZIP.EXE and PKUNZIP.EXE. I think you can still download PKUNZIP at the PKWare site here: http://www.pkware.com/software-pkzip/dos-compression The actual command line could look something like this:", "output": "The actual command line could look something like this:", "answer": "Originally ZIP files were created with MS-DOS command line software from PKWare, the two programs were PKZIP.EXE and PKUNZIP.EXE. I think you can still download PKUNZIP at the PKWare site here: http://www.pkware.com/software-pkzip/dos-compression The actual command line could look something like this:", "summary": "The actual command line could look something like this:"}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n In order to symbolicate crashes, Spotlight must be able to find the .dSYM file that was generated at the same time the binary you submitted to Apple was. Since it contains the symbol information, you will be out of luck if it isn't available.", "output": "In order to symbolicate crashes, Spotlight must be able to find the .dSYM file that was generated at the same time the binary you submitted to Apple was.", "answer": "In order to symbolicate crashes, Spotlight must be able to find the .dSYM file that was generated at the same time the binary you submitted to Apple was. Since it contains the symbol information, you will be out of luck if it isn't available.", "summary": "In order to symbolicate crashes, Spotlight must be able to find the .dSYM file that was generated at the same time the binary you submitted to Apple was."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Well, Groovy accepts the Java form just fine. If you are asking if there is a <em>Groovier</em> way, there is a way to go to <code>Integer</code>. Both are shown here: BIGBLOCK", "output": "Well, Groovy accepts the Java form just fine.", "answer": "Well, Groovy accepts the Java form just fine. If you are asking if there is a <em>Groovier</em> way, there is a way to go to <code>Integer</code>. Both are shown here: BIGBLOCK", "summary": "Well, Groovy accepts the Java form just fine."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Scott gives a good example of how to do it, but the question is why would you want to? If you need to do a find-and-replace on a specific string, you could also try doing a mysqldump of your database, do a find-and-replace in an editor, then re-load the database. Maybe if you gave some background on what you are trying to achieve, others might be able to provide better answers.", "output": "If you need to do a find-and-replace on a specific string, you could also try doing a mysqldump of your database, do a find-and-replace in an editor, then re-load the database.", "answer": "Scott gives a good example of how to do it, but the question is why would you want to? If you need to do a find-and-replace on a specific string, you could also try doing a mysqldump of your database, do a find-and-replace in an editor, then re-load the database. Maybe if you gave some background on what you are trying to achieve, others might be able to provide better answers.", "summary": "If you need to do a find-and-replace on a specific string, you could also try doing a mysqldump of your database, do a find-and-replace in an editor, then re-load the database."}, {"instruction": "Summarize the following paragraph, avoid adding any information not presented in the original text.\n Kinda hacky, but it works. Doesn't work if you have other foreground processes (please help me fix this!) BIGBLOCK Actually, I think you can reverse it, meeting your 'bonus' criteria: BIGBLOCK", "output": "Actually, I think you can reverse it, meeting your 'bonus' criteria: BIGBLOCK", "answer": "Kinda hacky, but it works. Doesn't work if you have other foreground processes (please help me fix this!) BIGBLOCK Actually, I think you can reverse it, meeting your 'bonus' criteria: BIGBLOCK", "summary": "Actually, I think you can reverse it, meeting your 'bonus' criteria: BIGBLOCK"}]